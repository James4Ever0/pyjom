import { ArgParser, Register, ParseContext } from './argparser';
import { ProvidesHelp, PrintHelp, Versioned } from './helpdoc';
import * as Result from './Result';
declare type CircuitBreaker = 'help' | 'version';
export declare const helpFlag: Partial<Register> & {
    parse(context: ParseContext): Promise<import("./argparser").ParsingResult<boolean>>;
} & ProvidesHelp & Register & Partial<import("./helpdoc").Descriptive>;
export declare const versionFlag: Partial<Register> & {
    parse(context: ParseContext): Promise<import("./argparser").ParsingResult<boolean>>;
} & ProvidesHelp & Register & Partial<import("./helpdoc").Descriptive>;
export declare function handleCircuitBreaker(context: ParseContext, value: PrintHelp & Partial<Versioned>, breaker: Result.Result<any, CircuitBreaker>): void;
/**
 * Helper flags that are being used in `command` and `subcommands`:
 * `--help, -h` to show help
 * `--version, -v` to show the current version
 *
 * It is called circuitbreaker because if you have `--help` or `--version`
 * anywhere in your argument list, you'll see the version and the help for the closest command
 */
export declare function createCircuitBreaker(withVersion: boolean): ArgParser<CircuitBreaker> & ProvidesHelp & Register;
export {};
