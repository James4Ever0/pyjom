#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *   Ducks - https://github.com/huan/ducks
 *
 *   @copyright 2020 Huan LI (李卓桓) <https://github.com/huan>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
const tstest_1 = require("tstest");
const redux_1 = require("redux");
const reducers_js_1 = __importDefault(require("./reducers.js"));
const actions = __importStar(require("./actions.js"));
(0, tstest_1.test)('counter reducer initial state', async (t) => {
    let state = (0, reducers_js_1.default)(undefined, {});
    t.same(state, { total: 0 }, 'should return the initial state');
    state = (0, reducers_js_1.default)(state, actions.tap());
    t.same(state, { total: 1 }, 'should increase 1 after tap()');
    state = (0, reducers_js_1.default)(state, actions.tap(2));
    t.same(state, { total: 3 }, 'should increase 3 after tap(2)');
});
(0, tstest_1.test)('counter reducer with combineReducers()', async (t) => {
    const combinedReducer = (0, redux_1.combineReducers)({
        counter: reducers_js_1.default,
    });
    let state = combinedReducer(undefined, {});
    t.same(state, { counter: { total: 0 } }, 'should return the initial state');
    state = combinedReducer(state, actions.tap());
    t.same(state, { counter: { total: 1 } }, 'should increase 1 after tap()');
});
//# sourceMappingURL=reducers.spec.js.map