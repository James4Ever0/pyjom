import { log } from 'wechaty-puppet';
import { instanceToClass } from 'clone-class';
import { isWechatyPluginUninstaller, } from '../plugin.js';
import { WechatyImpl, } from '../wechaty/mod.js';
const pluginMixin = (mixinBase) => {
    log.verbose('WechatyPluginMixin', 'pluginMixin(%s)', mixinBase.name);
    class PluginMixin extends mixinBase {
        static __pluginList = [];
        __pluginList = [];
        __pluginUninstallerList = [];
        /**
         * @param   {WechatyPlugin[]} plugins      - The plugins you want to use
         *
         * @return  {WechatyInterface}                      - this for chaining,
         *
         * @desc
         * For wechaty ecosystem, allow user to define a 3rd party plugin for the all wechaty instances
         *
         * @example
         * // Report all chat message to my server.
         *
         * function WechatyReportPlugin(options: { url: string }) {
         *   return function (this: Wechaty) {
         *     this.on('message', message => http.post(options.url, { data: message }))
         *   }
         * }
         *
         * bot.use(WechatyReportPlugin({ url: 'http://somewhere.to.report.your.data.com' })
         */
        static use(...plugins) {
            const pluginList = plugins.flat();
            this.__pluginList.push(...pluginList);
            // Huan(202110): TODO: remove any
            return this;
        }
        constructor(...args) {
            super(...args);
        }
        /**
         * @param {WechatyPlugin[]}Interfacehaty.use().
         *
         */
        use(...plugins) {
            const pluginList = plugins.flat();
            log.verbose('WechatyPluginMixin', 'use() total %d plugins', pluginList.length);
            this.__pluginList.push(...pluginList);
            /**
             * If the wechaty has already been started
             */
            if (this.state.active()) {
                if (this.state.pending()) {
                    log.warn('WechatyPluginMixin', 'use() called during bot is starting: the plugins might not be able to activate correctly.');
                    /**
                     * We do not active plugin when starting to prevent install one plugin twice
                     *  because the plugin might be installed inside the start() method too.
                     */
                }
                else {
                    this.__activePlugin(pluginList);
                }
            }
            return this;
        }
        /**
         * @protected active the plugins
         */
        __activePlugin(pluginList) {
            log.verbose('WechatyPluginMixin', '__activePlugin() %s', pluginList.map(p => p.name).join(', '));
            const uninstallerList = pluginList
                .map(plugin => plugin(this)) // <- Huan(202110): TODO: remove any
                .filter(isWechatyPluginUninstaller);
            this.__pluginUninstallerList.push(...uninstallerList);
        }
        async start() {
            log.verbose('WechatyPluginMixin', 'start()');
            await super.start();
            const pluginList = [
                ...instanceToClass(this, WechatyImpl).__pluginList,
                ...this.__pluginList,
            ];
            log.verbose('WechatyPluginMixin', 'start() installing plugins(global/%d, instance/%d) ...', instanceToClass(this, WechatyImpl).__pluginList.length, this.__pluginList.length);
            this.__activePlugin(pluginList);
            log.verbose('WechatyPluginMixin', 'start() installing plugins(global/%d, instance/%d) ... done', instanceToClass(this, WechatyImpl).__pluginList.length, this.__pluginList.length);
        }
        async stop() {
            log.verbose('WechatyPluginMixin', 'stop() uninstall %d plugins ...', this.__pluginUninstallerList.length);
            this.__pluginUninstallerList.forEach(setImmediate);
            this.__pluginUninstallerList.length = 0;
            log.verbose('WechatyPluginMixin', 'stop() uninstall %d plugins ... done', this.__pluginUninstallerList.length);
            await super.stop();
        }
    }
    return PluginMixin;
};
export { pluginMixin, };
//# sourceMappingURL=plugin-mixin.js.map