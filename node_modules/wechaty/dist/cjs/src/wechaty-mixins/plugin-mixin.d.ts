import type { ServiceCtl } from 'state-switch';
import type { WechatyPlugin, WechatyPluginUninstaller } from '../plugin.js';
import { WechatySkeleton } from '../wechaty/mod.js';
interface Plugable {
    use(...plugins: (WechatyPlugin | WechatyPlugin[])[]): Plugable;
}
declare const pluginMixin: <MixinBase extends typeof WechatySkeleton & ((abstract new (...args: any[]) => {
    wrapAsync: import("gerror/dist/esm/src/wrap-async-error/wrap-async-error").WrapAsync;
    emitError(e: any): void;
    emit(event: any, ...args: any): boolean;
    readonly log: import("brolog/dist/esm/src/logger").Loggable;
    readonly id: string;
    __memory?: import("memory-card").MemoryCard | undefined;
    readonly memory: import("memory-card").MemoryCard;
    __options: import("../schemas/wechaty-options.js").WechatyOptions;
    start(): Promise<void>;
    stop(): Promise<void>;
    on(event: "error" | "room-invite" | "room-join" | "room-leave" | "room-topic" | "dong" | "friendship" | "heartbeat" | "login" | "logout" | "message" | "puppet" | "ready" | "scan" | "start" | "stop", listener: (...args: any[]) => any): any;
    addListener<E extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E]): any;
    once<E_1 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_1, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_1]): any;
    prependListener<E_2 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_2, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_2]): any;
    prependOnceListener<E_3 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_3, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_3]): any;
    off<E_4 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_4, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_4]): any;
    removeAllListeners<E_5 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event?: E_5 | undefined): any;
    removeListener<E_6 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_6, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_6]): any;
    eventNames(): (string | symbol)[];
    rawListeners<E_7 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_7): Function[];
    listeners<E_8 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_8): Function[];
    listenerCount<E_9 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_9): number;
    getMaxListeners(): number;
    setMaxListeners(maxListeners: number): any;
    __events: import("../schemas/wechaty-events.js").WechatyEventListeners;
}) & {
    readonly log: import("brolog/dist/esm/src/logger").Loggable;
}) & typeof ServiceCtl>(mixinBase: MixinBase) => ((abstract new (...args: any[]) => {
    __pluginList: WechatyPlugin[];
    __pluginUninstallerList: WechatyPluginUninstaller[];
    /**
     * @param {WechatyPlugin[]}Interfacehaty.use().
     *
     */
    use(...plugins: (WechatyPlugin | WechatyPlugin[])[]): Plugable;
    /**
     * @protected active the plugins
     */
    __activePlugin(pluginList: WechatyPlugin[]): void;
    start(): Promise<void>;
    stop(): Promise<void>;
    readonly log: import("brolog/dist/esm/src/logger").Loggable;
    readonly id: string;
    __memory?: import("memory-card").MemoryCard | undefined;
    readonly memory: import("memory-card").MemoryCard;
    __options: import("../schemas/wechaty-options.js").WechatyOptions;
    on(event: "error" | "room-invite" | "room-join" | "room-leave" | "room-topic" | "dong" | "friendship" | "heartbeat" | "login" | "logout" | "message" | "puppet" | "ready" | "scan" | "start" | "stop", listener: (...args: any[]) => any): any;
    addListener<E_10 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_10, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_10]): any;
    once<E_11 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_11, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_11]): any;
    prependListener<E_12 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_12, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_12]): any;
    prependOnceListener<E_13 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_13, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_13]): any;
    off<E_14 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_14, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_14]): any;
    removeAllListeners<E_15 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event?: E_15 | undefined): any;
    removeListener<E_16 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_16, listener: import("../schemas/wechaty-events.js").WechatyEventListeners[E_16]): any;
    emit: (<E_17 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_17, ...args: import("typed-emitter").Arguments<import("../schemas/wechaty-events.js").WechatyEventListeners[E_17]>) => boolean) & ((event: any, ...args: any) => boolean) & ((..._: any[]) => any) & ((..._: any[]) => any);
    eventNames(): (string | symbol)[];
    rawListeners<E_7 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_7): Function[];
    listeners<E_8 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_8): Function[];
    listenerCount<E_9 extends keyof import("../schemas/wechaty-events.js").WechatyEventListeners>(event: E_9): number;
    getMaxListeners(): number;
    setMaxListeners(maxListeners: number): any;
    __events: import("../schemas/wechaty-events.js").WechatyEventListeners;
    wrapAsync: import("gerror/dist/esm/src/wrap-async-error/wrap-async-error").WrapAsync;
    emitError(e: any): void;
    state: import("state-switch/dist/esm/src/interfaces").StateSwitchInterface;
    __serviceCtlResettingIndicator: import("state-switch/dist/esm/src/busy-indicator").BusyIndicator;
    __serviceCtlLogger: import("brolog/dist/esm/src/logger").Loggable;
    /**
     * @param   {WechatyPlugin[]} plugins      - The plugins you want to use
     *
     * @return  {WechatyInterface}                      - this for chaining,
     *
     * @desc
     * For wechaty ecosystem, allow user to define a 3rd party plugin for the all wechaty instances
     *
     * @example
     * // Report all chat message to my server.
     *
     * function WechatyReportPlugin(options: { url: string }) {
     *   return function (this: Wechaty) {
     *     this.on('message', message => http.post(options.url, { data: message }))
     *   }
     * }
     *
     * bot.use(WechatyReportPlugin({ url: 'http://somewhere.to.report.your.data.com' })
     */
    reset(): Promise<void>;
    onStart(): Promise<void>;
    onStop(): Promise<void>;
}) & {
    __pluginList: WechatyPlugin[];
    /**
     * @param   {WechatyPlugin[]} plugins      - The plugins you want to use
     *
     * @return  {WechatyInterface}                      - this for chaining,
     *
     * @desc
     * For wechaty ecosystem, allow user to define a 3rd party plugin for the all wechaty instances
     *
     * @example
     * // Report all chat message to my server.
     *
     * function WechatyReportPlugin(options: { url: string }) {
     *   return function (this: Wechaty) {
     *     this.on('message', message => http.post(options.url, { data: message }))
     *   }
     * }
     *
     * bot.use(WechatyReportPlugin({ url: 'http://somewhere.to.report.your.data.com' })
     */
    use(...plugins: (WechatyPlugin | WechatyPlugin[])[]): Plugable;
    readonly log: import("brolog/dist/esm/src/logger").Loggable;
    VERSION: string;
}) & MixinBase;
declare type PluginMixin = ReturnType<typeof pluginMixin>;
declare type ProtectedPropertyPluginMixin = '__activePlugin' | '__pluginList' | '__pluginUninstallerList';
export { type Plugable, type PluginMixin, type ProtectedPropertyPluginMixin, pluginMixin, };
//# sourceMappingURL=plugin-mixin.d.ts.map