
// @ts-nocheck
/**
 * @fileoverview Closure Compiler externs for Ix
 * @externs
 * @suppress {duplicate,checkTypes}
 */
/** @type {symbol} */
Symbol.iterator;
/** @type {symbol} */
Symbol.observable;
/** @type {symbol} */
Symbol.asyncIterator;

var as = function() {};
var average = function() {};
var CatchIterable = function() {};
var catchAll = function() {};
var catchError = function() {};
var ConcatIterable = function() {};
var concat = function() {};
var count = function() {};
var create = function() {};
var defer = function() {};
var elementAt = function() {};
var empty = function() {};
var every = function() {};
var findIndex = function() {};
var find = function() {};
var first = function() {};
var FromIterable = function() {};
var _initialize = function() {};
var from = function() {};
var generate = function() {};
var iif = function() {};
var includes = function() {};
var isEmpty = function() {};
var IterableX = function() {};
/** @type {?} */
IterableX.prototype.forEach;
/** @type {?} */
IterableX.prototype.pipe;
/** @type {?} */
IterableX.prototype.tee;
/** @type {?} */
IterableX.prototype.pipeTo;
/** @type {?} */
IterableX.prototype.pipeThrough;
/** @type {?} */
IterableX.prototype.toDOMStream;
var last = function() {};
var max = function() {};
var maxBy = function() {};
var min = function() {};
var minBy = function() {};
var of = function() {};
var OfIterable = function() {};
var OnErrorResumeNextIterable = function() {};
var onErrorResumeNext = function() {};
var pipe = function() {};
var range = function() {};
var reduceRight = function() {};
var reduce = function() {};
var repeatValue = function() {};
var sequenceEqual = function() {};
var single = function() {};
var some = function() {};
var sum = function() {};
var throwError = function() {};
var toArray = function() {};
var toDOMStream = function() {};
var toDOMStreamProto = function() {};
var toMap = function() {};
var toSet = function() {};
var whileDo = function() {};
var ZipIterable = function() {};
var zip = function() {};