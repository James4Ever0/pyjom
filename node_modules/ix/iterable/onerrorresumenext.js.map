{"version":3,"sources":["iterable/onerrorresumenext.ts"],"names":[],"mappings":";;;AAAA,2CAAwC;AAExC,MAAa,yBAAmC,SAAQ,qBAAkB;IAChE,OAAO,CAA8B;IAE7C,YAAY,MAAmC;QAC7C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnC,OAAO,CAAC,EAAE;gBACR,IAAI,IAAI,CAAC;gBACT,IAAI;oBACF,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;iBAClB;gBAAC,OAAO,CAAC,EAAE;oBACV,MAAM;iBACP;gBAED,IAAI,IAAI,CAAC,IAAI,EAAE;oBACb,MAAM;iBACP;gBACD,MAAM,IAAI,CAAC,KAAK,CAAC;aAClB;SACF;IACH,CAAC;CACF;AA1BD,8DA0BC;AAED;;;;;;GAMG;AACH,SAAgB,iBAAiB,CAAI,GAAG,MAAqB;IAC3D,OAAO,IAAI,yBAAyB,CAAI,MAAM,CAAC,CAAC;AAClD,CAAC;AAFD,8CAEC","file":"onerrorresumenext.js","sourcesContent":["import { IterableX } from './iterablex';\n\nexport class OnErrorResumeNextIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<Iterable<TSource>>;\n\n  constructor(source: Iterable<Iterable<TSource>>) {\n    super();\n    this._source = source;\n  }\n\n  *[Symbol.iterator]() {\n    for (const item of this._source) {\n      const it = item[Symbol.iterator]();\n      while (1) {\n        let next;\n        try {\n          next = it.next();\n        } catch (e) {\n          break;\n        }\n\n        if (next.done) {\n          break;\n        }\n        yield next.value;\n      }\n    }\n  }\n}\n\n/**\n * Concatenates all of the specified iterable sequences, even if the previous iterable sequence terminated exceptionally.\n *\n * @template T The type of the elements in the source sequences.\n * @param {...Iterable<T>[]} args iterable sequences to concatenate.\n * @returns {IterableX<T>} An iterable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.\n */\nexport function onErrorResumeNext<T>(...source: Iterable<T>[]): IterableX<T> {\n  return new OnErrorResumeNextIterable<T>(source);\n}\n"]}