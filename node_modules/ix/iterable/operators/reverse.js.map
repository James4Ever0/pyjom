{"version":3,"sources":["iterable/operators/reverse.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAGzC,MAAa,eAAyB,SAAQ,qBAAkB;IACtD,OAAO,CAAoB;IAEnC,YAAY,MAAyB;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,MAAM,OAAO,GAAG,EAAe,CAAC;QAChC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACvB;QACD,KAAK,CAAC,CAAC,OAAO,CAAC;IACjB,CAAC;CACF;AAfD,0CAeC;AAED;;;;;GAKG;AACH,SAAgB,OAAO;IACrB,OAAO,SAAS,uBAAuB,CAAC,MAAyB;QAC/D,OAAO,IAAI,eAAe,CAAU,MAAM,CAAC,CAAC;IAC9C,CAAC,CAAC;AACJ,CAAC;AAJD,0BAIC","file":"reverse.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { MonoTypeOperatorFunction } from '../../interfaces';\n\nexport class ReverseIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n\n  constructor(source: Iterable<TSource>) {\n    super();\n    this._source = source;\n  }\n\n  *[Symbol.iterator]() {\n    const results = [] as TSource[];\n    for (const item of this._source) {\n      results.unshift(item);\n    }\n    yield* results;\n  }\n}\n\n/**\n * Reverses the iterable instance.\n *\n * @template TSource The type of the elements in the source sequence.\n * @returns {MonoTypeOperatorAsyncFunction<TSource>} The iterable in reversed sequence.\n */\nexport function reverse<TSource>(): MonoTypeOperatorFunction<TSource> {\n  return function reverseOperatorFunction(source: Iterable<TSource>): IterableX<TSource> {\n    return new ReverseIterable<TSource>(source);\n  };\n}\n"]}