{"version":3,"sources":["iterable/operators/defaultifempty.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAGzC,MAAa,sBAAgC,SAAQ,qBAAkB;IAC7D,OAAO,CAAoB;IAC3B,aAAa,CAAU;IAE/B,YAAY,MAAyB,EAAE,YAAqB;QAC1D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,KAAK,GAAG,CAAC,CAAC;YACV,MAAM,IAAI,CAAC;SACZ;QACD,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,MAAM,IAAI,CAAC,aAAa,CAAC;SAC1B;IACH,CAAC;CACF;AApBD,wDAoBC;AAED;;;;;;;GAOG;AACH,SAAgB,cAAc,CAAI,YAAe;IAC/C,OAAO,SAAS,8BAA8B,CAAC,MAAmB;QAChE,OAAO,IAAI,sBAAsB,CAAI,MAAM,EAAE,YAAY,CAAC,CAAC;IAC7D,CAAC,CAAC;AACJ,CAAC;AAJD,wCAIC","file":"defaultifempty.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { MonoTypeOperatorFunction } from '../../interfaces';\n\nexport class DefaultIfEmptyIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _defaultValue: TSource;\n\n  constructor(source: Iterable<TSource>, defaultValue: TSource) {\n    super();\n    this._source = source;\n    this._defaultValue = defaultValue;\n  }\n\n  *[Symbol.iterator]() {\n    let state = 1;\n    for (const item of this._source) {\n      state = 2;\n      yield item;\n    }\n    if (state === 1) {\n      yield this._defaultValue;\n    }\n  }\n}\n\n/**\n * Returns the elements of the specified sequence or the default value in a singleton sequence\n * if the sequence is empty.\n *\n * @template T The type of elements in the source sequence.\n * @param {T} defaultValue The value to return if the sequence is empty.\n * @returns {MonoTypeOperatorFunction<T>} An operator which returns the elements of the source sequence or the default value as a singleton.\n */\nexport function defaultIfEmpty<T>(defaultValue: T): MonoTypeOperatorFunction<T> {\n  return function defaultIfEmptyOperatorFunction(source: Iterable<T>): IterableX<T> {\n    return new DefaultIfEmptyIterable<T>(source, defaultValue);\n  };\n}\n"]}