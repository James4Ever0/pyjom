{"version":3,"sources":["add/asynciterable-operators/skipwhile.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AACpE,OAAO,EAAE,sBAAsB,EAAE,MAAM,yCAAyC,CAAC;AAcjF,MAAM,UAAU,cAAc,CAE5B,SAAwF;IAExF,OAAO,IAAI,sBAAsB,CAAI,IAAI,EAAE,SAAS,CAAC,CAAC;AACxD,CAAC;AAED,cAAc,CAAC,SAAS,CAAC,SAAS,GAAG,cAAc,CAAC","file":"skipwhile.js","sourcesContent":["import { AsyncIterableX } from '../../asynciterable/asynciterablex';\nimport { SkipWhileAsyncIterable } from '../../asynciterable/operators/skipwhile';\n\n/**\n * @ignore\n */\n\nexport function skipWhileProto<T, S extends T>(\n  this: AsyncIterableX<T>,\n  predicate: (value: T, index: number, signal?: AbortSignal) => value is S\n): AsyncIterableX<S>;\nexport function skipWhileProto<T>(\n  this: AsyncIterableX<T>,\n  predicate: (value: T, index: number, signal?: AbortSignal) => boolean | Promise<boolean>\n): AsyncIterableX<T>;\nexport function skipWhileProto<T>(\n  this: AsyncIterableX<T>,\n  predicate: (value: T, index: number, signal?: AbortSignal) => boolean | Promise<boolean>\n): AsyncIterableX<T> {\n  return new SkipWhileAsyncIterable<T>(this, predicate);\n}\n\nAsyncIterableX.prototype.skipWhile = skipWhileProto;\n\ndeclare module '../../asynciterable/asynciterablex' {\n  interface AsyncIterableX<T> {\n    skipWhile: typeof skipWhileProto;\n  }\n}\n"]}