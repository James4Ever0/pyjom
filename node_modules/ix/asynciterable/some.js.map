{"version":3,"sources":["asynciterable/some.ts"],"names":[],"mappings":";;;AAAA,qDAAsD;AACtD,8CAA+C;AAG/C;;;;;;;;;GASG;AACI,KAAK,UAAU,IAAI,CAAI,MAAwB,EAAE,OAAuB;IAC7E,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,CAAC,WAAW,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IACvF,2BAAc,CAAC,MAAM,CAAC,CAAC;IACvB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,yBAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACtD,IAAI,MAAM,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;YACpD,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAVD,oBAUC","file":"some.js","sourcesContent":["import { wrapWithAbort } from './operators/withabort';\nimport { throwIfAborted } from '../aborterror';\nimport { FindOptions } from './findoptions';\n\n/**\n * Determines whether any element of an async-iterable sequence satisfies a condition.\n *\n * @template T The type of the elements in the source sequence.\n * @param {AsyncIterable<T>} source An async-iterable sequence whose elements to apply the predicate to.\n * @param {FindOptions<T, S>} options The options which includes a required predicate, an optional\n * thisArg for binding, and an abort signal for cancellation.\n * @returns {Promise<boolean>} A promise with a boolean determining whether any elements in the source sequence\n * pass the test in the specified predicate.\n */\nexport async function some<T>(source: AsyncIterable<T>, options: FindOptions<T>): Promise<boolean> {\n  const { ['signal']: signal, ['thisArg']: thisArg, ['predicate']: predicate } = options;\n  throwIfAborted(signal);\n  let i = 0;\n  for await (const item of wrapWithAbort(source, signal)) {\n    if (await predicate.call(thisArg, item, i++, signal)) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}