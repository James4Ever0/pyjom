{"version":3,"sources":["asynciterable/max.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,GAAG,CACvB,MAA8B,EAC9B,OAA0C;IAE1C,MAAM,EACJ,CAAC,UAAU,CAAC,EAAE,QAAQ,GAAG,qBAAqB,EAC9C,CAAC,QAAQ,CAAC,EAAE,MAAM,EAClB,CAAC,UAAU,CAAC,EAAE,QAAQ,GAAG,aAAa,GACvC,GAAG,OAAO,IAAI,EAAE,CAAC;IAElB,cAAc,CAAC,MAAM,CAAC,CAAC;IAEvB,MAAM,EAAE,GAAG,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;IACjE,IAAI,IAAI,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;IAE3B,IAAI,IAAI,CAAC,IAAI,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;IAED,IAAI,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAE1C,OAAO,CAAC,CAAC,IAAI,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;QACrC,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE;YAC3C,QAAQ,GAAG,OAAO,CAAC;SACpB;KACF;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","file":"max.js","sourcesContent":["import { equalityComparerAsync } from '../util/comparer';\nimport { identityAsync } from '../util/identity';\nimport { ExtremaOptions } from './extremaoptions';\nimport { wrapWithAbort } from './operators/withabort';\nimport { throwIfAborted } from '../aborterror';\n\n/**\n * Returns the maximum element with the optional selector.\n *\n * @template TSource The type of the elements in the source sequence.\n * @param {AsyncIterable<TSource>} source An async-iterable sequence to determine the maximum element of.\n * @param {ExtremaByOptions<TKey>} [options] The options which include an optional comparer and abort signal.\n * @returns {Promise<TResult>} The maximum element.\n */\nexport async function max<TSource, TResult = TSource>(\n  source: AsyncIterable<TSource>,\n  options?: ExtremaOptions<TSource, TResult>\n): Promise<TResult> {\n  const {\n    ['comparer']: comparer = equalityComparerAsync,\n    ['signal']: signal,\n    ['selector']: selector = identityAsync,\n  } = options || {};\n\n  throwIfAborted(signal);\n\n  const it = wrapWithAbort(source, signal)[Symbol.asyncIterator]();\n  let next = await it.next();\n\n  if (next.done) {\n    throw new Error('Sequence contains no elements');\n  }\n\n  let maxValue = await selector(next.value);\n\n  while (!(next = await it.next()).done) {\n    const current = await selector(next.value);\n    if ((await comparer(current, maxValue)) > 0) {\n      maxValue = current;\n    }\n  }\n\n  return maxValue;\n}\n"]}