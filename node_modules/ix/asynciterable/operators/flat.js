"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flat = exports.FlattenAsyncIterable = void 0;
const asynciterablex_1 = require("../asynciterablex");
const isiterable_1 = require("../../util/isiterable");
const withabort_1 = require("./withabort");
const aborterror_1 = require("../../aborterror");
class FlattenAsyncIterable extends asynciterablex_1.AsyncIterableX {
    _source;
    _depth;
    constructor(source, depth) {
        super();
        this._source = source;
        this._depth = depth;
    }
    // eslint-disable-next-line consistent-return
    async *_flatten(source, depth, signal) {
        if (depth === 0) {
            for await (const item of withabort_1.wrapWithAbort(source, signal)) {
                yield item;
            }
            return undefined;
        }
        for await (const item of withabort_1.wrapWithAbort(source, signal)) {
            if (isiterable_1.isAsyncIterable(item)) {
                for await (const innerItem of this._flatten(item, depth - 1, signal)) {
                    yield innerItem;
                }
            }
            else {
                yield item;
            }
        }
    }
    [Symbol.asyncIterator](signal) {
        aborterror_1.throwIfAborted(signal);
        return this._flatten(this._source, this._depth, signal)[Symbol.asyncIterator]();
    }
}
exports.FlattenAsyncIterable = FlattenAsyncIterable;
/**
 * Flattens the nested async-iterable by the given depth.
 *
 * @template T The type of elements in the source sequence.
 * @param {number} [depth=Infinity] The depth to flatten the async-iterable sequence if specified, otherwise infinite.
 * @returns {MonoTypeOperatorAsyncFunction<T>} An operator that flattens the async-iterable sequence.
 */
function flat(depth = Infinity) {
    return function flattenOperatorFunction(source) {
        return new FlattenAsyncIterable(source, depth);
    };
}
exports.flat = flat;

//# sourceMappingURL=flat.js.map
