{"version":3,"sources":["asynciterable/operators/take.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,iBAA2B,SAAQ,cAAuB;IAC7D,OAAO,CAAyB;IAChC,MAAM,CAAS;IAEvB,YAAY,MAA8B,EAAE,KAAa;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QAChD,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,EAAE;YACT,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;gBAC5D,MAAM,IAAI,CAAC;gBACX,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE;oBACb,MAAM;iBACP;aACF;SACF;IACH,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,IAAI,CAAU,KAAa;IACzC,OAAO,SAAS,oBAAoB,CAAC,MAA8B;QACjE,OAAO,IAAI,iBAAiB,CAAU,MAAM,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC,CAAC;AACJ,CAAC","file":"take.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { MonoTypeOperatorAsyncFunction } from '../../interfaces';\nimport { wrapWithAbort } from './withabort';\nimport { throwIfAborted } from '../../aborterror';\n\nexport class TakeAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _count: number;\n\n  constructor(source: AsyncIterable<TSource>, count: number) {\n    super();\n    this._source = source;\n    this._count = count;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n    let i = this._count;\n    if (i > 0) {\n      for await (const item of wrapWithAbort(this._source, signal)) {\n        yield item;\n        if (--i === 0) {\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns a specified number of contiguous elements from the start of an async-iterable sequence.\n *\n * @template TSource The type of the elements in the source sequence.\n * @param {number} count The number of elements to return.\n * @returns {MonoTypeOperatorAsyncFunction<TSource>} An async-iterable sequence that contains the specified\n * number of elements from the start of the input sequence.\n */\nexport function take<TSource>(count: number): MonoTypeOperatorAsyncFunction<TSource> {\n  return function takeOperatorFunction(source: AsyncIterable<TSource>): AsyncIterableX<TSource> {\n    return new TakeAsyncIterable<TSource>(source, count);\n  };\n}\n"]}