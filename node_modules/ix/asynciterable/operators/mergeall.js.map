{"version":3,"sources":["asynciterable/operators/mergeall.ts"],"names":[],"mappings":";;;AACA,8BAA2B;AAC3B,uCAAoC;AAGpC;;;;;GAKG;AACH,SAAgB,QAAQ;IACtB,OAAO,SAAS,wBAAwB,CACtC,MAA6C;QAE7C,OAAO,OAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,iBAAO,CAAkC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF,CAAC,CAAC;AACJ,CAAC;AAND,4BAMC","file":"mergeall.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { as } from '../as';\nimport { flatMap } from './flatmap';\nimport { OperatorAsyncFunction } from '../../interfaces';\n\n/**\n * Merges elements from all inner async-iterable sequences into a single async-iterable sequence.\n *\n * @template TSource The type of the elements in the source sequences.\n * @returns {OperatorAsyncFunction<AsyncIterable<TSource>, TSource>} The async-iterable sequence that merges the elements of the inner sequences.\n */\nexport function mergeAll<TSource>(): OperatorAsyncFunction<AsyncIterable<TSource>, TSource> {\n  return function mergeAllOperatorFunction(\n    source: AsyncIterable<AsyncIterable<TSource>>\n  ): AsyncIterableX<TSource> {\n    return as(source)['pipe'](flatMap<AsyncIterable<TSource>, TSource>((s) => s));\n  };\n}\n"]}