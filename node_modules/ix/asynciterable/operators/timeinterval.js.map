{"version":3,"sources":["asynciterable/operators/timeinterval.ts"],"names":[],"mappings":";;;AAAA,sDAAmD;AAEnD,2CAA4C;AAC5C,iDAAkD;AAOlD,MAAa,yBAAmC,SAAQ,+BAAqC;IACnF,OAAO,CAAyB;IAExC,YAAY,MAA8B;QACxC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QAChD,2BAAc,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACtB,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,yBAAa,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;YAC5D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACvB,MAAM,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;YACxB,IAAI,GAAG,GAAG,CAAC;YACX,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SACtC;IACH,CAAC;CACF;AAlBD,8DAkBC;AAED;;;;;;GAMG;AACH,SAAgB,YAAY;IAC1B,OAAO,SAAS,4BAA4B,CAC1C,MAA8B;QAE9B,OAAO,IAAI,yBAAyB,CAAU,MAAM,CAAC,CAAC;IACxD,CAAC,CAAC;AACJ,CAAC;AAND,oCAMC","file":"timeinterval.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { OperatorAsyncFunction } from '../../interfaces';\nimport { wrapWithAbort } from './withabort';\nimport { throwIfAborted } from '../../aborterror';\n\nexport interface TimeInterval<T> {\n  value: T;\n  elapsed: number;\n}\n\nexport class TimeIntervalAsyncIterable<TSource> extends AsyncIterableX<TimeInterval<TSource>> {\n  private _source: AsyncIterable<TSource>;\n\n  constructor(source: AsyncIterable<TSource>) {\n    super();\n    this._source = source;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n    let last = Date.now();\n    for await (const item of wrapWithAbort(this._source, signal)) {\n      const now = Date.now();\n      const span = now - last;\n      last = now;\n      yield { value: item, elapsed: span };\n    }\n  }\n}\n\n/**\n * Records the time interval between consecutive elements in an async-iterable sequence.\n *\n * @template TSource The type of the elements in the source sequence.\n * @returns {OperatorAsyncFunction<TSource, TimeInterval<TSource>>} An async-iterable sequence with time\n * interval information on elements.\n */\nexport function timeInterval<TSource>(): OperatorAsyncFunction<TSource, TimeInterval<TSource>> {\n  return function timeIntervalOperatorFunction(\n    source: AsyncIterable<TSource>\n  ): AsyncIterableX<TimeInterval<TSource>> {\n    return new TimeIntervalAsyncIterable<TSource>(source);\n  };\n}\n"]}