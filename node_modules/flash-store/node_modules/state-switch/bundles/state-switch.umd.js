var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* state-switch version 0.14.1 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('events'), require('nop')) :
        typeof define === 'function' && define.amd ? define(['exports', 'events', 'nop'], factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.window = {}, global.events, global.NOP));
}(this, (function (exports, events, NOP) {
    'use strict';
    function _interopDefaultLegacy(e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
    var NOP__default = /*#__PURE__*/ _interopDefaultLegacy(NOP);
    /**
     * This file was auto generated from scripts/generate-version.sh
     */
    var VERSION = '0.14.1';
    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var COUNTER = 0;
    var StateSwitch = /** @class */ (function (_super) {
        __extends(StateSwitch, _super);
        function StateSwitch(name, options) {
            if (name === void 0) { name = "#" + COUNTER++; }
            if (options === void 0) { options = {}; }
            var _this = _super.call(this) || this;
            _this.name = name;
            _this.options = options;
            if (options.log) {
                _this.setLog(options.log);
            }
            else {
                _this.setLog(null);
            }
            _this.log.verbose('StateSwitch', 'constructor(%s, "%s")', name, JSON.stringify(options));
            _this._onoff = false;
            _this._pending = false;
            /**
             * for ready()
             */
            _this.offPromise = Promise.resolve();
            _this.onPromise = new Promise(function (resolve) {
                _this.onResolver = resolve;
            });
            _this.offResolver = NOP__default['default'];
            return _this;
        }
        Object.defineProperty(StateSwitch.prototype, "pending", {
            /**
             * does the state is not stable(in process)?
             */
            get: function () {
                this.log.silly('StateSwitch', '<%s> pending() is %s', this.name, this._pending);
                return this._pending;
            },
            enumerable: false,
            configurable: true
        });
        StateSwitch.prototype.version = function () {
            return VERSION;
        };
        StateSwitch.prototype.setLog = function (logInstance) {
            if (logInstance) {
                this.log = logInstance;
            }
            else {
                /* eslint @typescript-eslint/no-unused-vars: off */
                this.log = {
                    error: NOP__default['default'],
                    silly: NOP__default['default'],
                    verbose: NOP__default['default'],
                    warn: NOP__default['default'],
                };
            }
        };
        StateSwitch.prototype.on = function (state) {
            var _this = this;
            /**
             * Set
             */
            if (state) {
                this.log.verbose('StateSwitch', '<%s> on(%s) <- (%s)', this.name, state, this.on());
                this._onoff = true;
                this._pending = (state === 'pending');
                this.emit('on', state);
                /**
                  * for ready()
                  */
                if (this.offResolver === NOP__default['default']) {
                    this.offPromise = new Promise(function (resolve) { return (_this.offResolver = resolve); });
                }
                if (state === true && this.onResolver !== NOP__default['default']) {
                    this.onResolver();
                    this.onResolver = NOP__default['default'];
                }
                return;
            }
            /**
             * Get
             */
            var on = this._onoff
                ? this._pending
                    ? 'pending'
                    : true
                : false;
            this.log.silly('StateSwitch', '<%s> on() is %s', this.name, on);
            return on;
        };
        StateSwitch.prototype.off = function (state) {
            var _this = this;
            /**
             * Set
             */
            if (state) {
                this.log.verbose('StateSwitch', '<%s> off(%s) <- (%s)', this.name, state, this.off());
                this._onoff = false;
                this._pending = (state === 'pending');
                this.emit('off', state);
                /**
                  * for ready()
                  */
                if (this.onResolver === NOP__default['default']) {
                    this.onPromise = new Promise(function (resolve) { return (_this.onResolver = resolve); });
                }
                if (state === true && this.offResolver !== NOP__default['default']) {
                    this.offResolver();
                    this.offResolver = NOP__default['default'];
                }
                return;
            }
            /**
             * Get
             */
            var off = !this._onoff
                ? this._pending ? 'pending' : true
                : false;
            this.log.silly('StateSwitch', '<%s> off() is %s', this.name, off);
            return off;
        };
        StateSwitch.prototype.ready = function (state, noCross) {
            if (state === void 0) { state = 'on'; }
            if (noCross === void 0) { noCross = false; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.log.verbose('StateSwitch', '<%s> ready(%s, noCross=%s)', this.name, state, noCross);
                            if (!(state === 'on')) return [3 /*break*/, 2];
                            if (this._onoff === false && noCross === true) {
                                throw new Error('ready(on) but the state is off. call ready(on, false) to disable noCross');
                            }
                            return [4 /*yield*/, this.onPromise];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 2:
                            if (!(state === 'off')) return [3 /*break*/, 4];
                            if (this._onoff === true && noCross === true) {
                                throw new Error('ready(off) but the state is on. call ready(off, false) to disable noCross');
                            }
                            return [4 /*yield*/, this.offPromise];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4: throw new Error("should not go here. " + state + " should be of type 'never'");
                        case 5:
                            this.log.silly('StateSwitch', '<%s> ready(%s, %s) resolved.', this.name, state, noCross);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Huan(202105): To make RxJS fromEvent happy: type inferencing
         *  https://github.com/ReactiveX/rxjs/blob/92fbdda7c06561bc73dae3c14de3fc7aff92bbd4/src/internal/observable/fromEvent.ts#L39-L50
         */
        StateSwitch.prototype.addEventListener = function (event, listener) {
            if (listener) {
                _super.prototype.addListener.call(this, event, listener);
            }
        };
        StateSwitch.prototype.removeEventListener = function (event, listener) {
            if (listener) {
                _super.prototype.removeListener.call(this, event, listener);
            }
        };
        return StateSwitch;
    }(events.EventEmitter));
    exports.StateSwitch = StateSwitch;
    exports.VERSION = VERSION;
    exports['default'] = StateSwitch;
    Object.defineProperty(exports, '__esModule', { value: true });
})));
/* https://github.com/huan */
//# sourceMappingURL=state-switch.es6.umd.js.map
