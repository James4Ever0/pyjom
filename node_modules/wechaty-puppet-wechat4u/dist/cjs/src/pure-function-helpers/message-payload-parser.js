"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageRawPayloadParser = void 0;
const is_type_js_1 = require("./is-type.js");
const message_file_name_js_1 = require("./message-file-name.js");
const message_type_js_1 = require("./message-type.js");
function messageRawPayloadParser(rawPayload) {
    /**
     * 0. Set Message Type
     */
    const payloadBase = {
        filename: (0, message_file_name_js_1.messageFileName)(rawPayload) || undefined,
        id: rawPayload.MsgId,
        mentionIdList: [],
        timestamp: rawPayload.CreateTime,
        type: (0, message_type_js_1.messageType)(rawPayload),
    };
    let fromId;
    let roomId;
    let toId;
    let text;
    /**
     * 1. Set Room Id
     */
    if ((0, is_type_js_1.isRoomId)(rawPayload.FromUserName)) {
        roomId = rawPayload.FromUserName;
    }
    else if ((0, is_type_js_1.isRoomId)(rawPayload.ToUserName)) {
        roomId = rawPayload.ToUserName;
    }
    else {
        roomId = undefined;
    }
    /**
     * 2. Set To Contact Id
     */
    if ((0, is_type_js_1.isContactId)(rawPayload.ToUserName)) {
        toId = rawPayload.ToUserName;
    }
    else {
        // TODO: if the message @someone, the toId should set to the mentioned contact id(?)
        toId = undefined;
    }
    /**
     * 3. Set From Contact Id
     */
    if ((0, is_type_js_1.isContactId)(rawPayload.FromUserName)) {
        fromId = rawPayload.FromUserName;
    }
    else {
        const parts = rawPayload.Content.split(':\n');
        if (parts.length > 1) {
            if ((0, is_type_js_1.isContactId)(parts[0])) {
                fromId = parts[0];
            }
        }
        else {
            fromId = undefined;
        }
    }
    /**
     *
     * 4. Set Text
     */
    if ((0, is_type_js_1.isRoomId)(rawPayload.FromUserName)) {
        const parts = rawPayload.Content.split(':\n');
        if (parts.length > 1) {
            text = parts[1];
        }
        else {
            text = rawPayload.Content;
        }
    }
    else {
        text = rawPayload.Content;
    }
    /**
     * 5.1 Validate Room & From ID
     */
    if (!roomId && !fromId) {
        throw Error('empty roomId and empty fromId!');
    }
    /**
     * 5.1 Validate Room & To ID
     */
    if (!roomId && !toId) {
        throw Error('empty roomId and empty toId!');
    }
    let payload;
    // Two branch is the same code.
    // Only for making TypeScript happy
    if (fromId && toId) {
        payload = {
            ...payloadBase,
            fromId,
            roomId,
            text,
            toId,
        };
    }
    else if (roomId) {
        payload = {
            ...payloadBase,
            fromId,
            roomId,
            text,
            toId,
        };
    }
    else {
        throw new Error('neither toId nor roomId');
    }
    return payload;
}
exports.messageRawPayloadParser = messageRawPayloadParser;
//# sourceMappingURL=message-payload-parser.js.map