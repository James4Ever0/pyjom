
# python wrapper for package github.com/mcoo/OPQBot/qzone within overall package OPQBot
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=bindings_all -vm=python3 github.com/mcoo/OPQBot github.com/mcoo/OPQBot/qzone

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _OPQBot
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from OPQBot import qzone
# and then refer to everything using qzone. prefix
# packages imported by this package listed below:

import OPQBot



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct qzone.ShuoshuoList
class ShuoshuoList(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.qzone_ShuoshuoList_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Code = args[0]
			if "Code" in kwargs:
				self.Code = kwargs["Code"]
			if  1 < len(args):
				self.Subcode = args[1]
			if "Subcode" in kwargs:
				self.Subcode = kwargs["Subcode"]
			if  2 < len(args):
				self.Message = args[2]
			if "Message" in kwargs:
				self.Message = kwargs["Message"]
			if  3 < len(args):
				self.Default = args[3]
			if "Default" in kwargs:
				self.Default = kwargs["Default"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'qzone.ShuoshuoList{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'qzone.ShuoshuoList ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Code(self):
		return _OPQBot.qzone_ShuoshuoList_Code_Get(self.handle)
	@Code.setter
	def Code(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_ShuoshuoList_Code_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_ShuoshuoList_Code_Set(self.handle, value)
	@property
	def Subcode(self):
		return _OPQBot.qzone_ShuoshuoList_Subcode_Get(self.handle)
	@Subcode.setter
	def Subcode(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_ShuoshuoList_Subcode_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_ShuoshuoList_Subcode_Set(self.handle, value)
	@property
	def Message(self):
		return _OPQBot.qzone_ShuoshuoList_Message_Get(self.handle)
	@Message.setter
	def Message(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_ShuoshuoList_Message_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_ShuoshuoList_Message_Set(self.handle, value)
	@property
	def Default(self):
		return _OPQBot.qzone_ShuoshuoList_Default_Get(self.handle)
	@Default.setter
	def Default(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_ShuoshuoList_Default_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_ShuoshuoList_Default_Set(self.handle, value)

# Python type for struct qzone.UploadPicResult
class UploadPicResult(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.qzone_UploadPicResult_CTor()
			_OPQBot.IncRef(self.handle)
			if  1 < len(args):
				self.Ret = args[1]
			if "Ret" in kwargs:
				self.Ret = kwargs["Ret"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'qzone.UploadPicResult{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'qzone.UploadPicResult ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Ret(self):
		return _OPQBot.qzone_UploadPicResult_Ret_Get(self.handle)
	@Ret.setter
	def Ret(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_UploadPicResult_Ret_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_UploadPicResult_Ret_Set(self.handle, value)

# Python type for struct qzone.Manager
class Manager(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.qzone_Manager_CTor()
			_OPQBot.IncRef(self.handle)
			if  1 < len(args):
				self.QQ = args[1]
			if "QQ" in kwargs:
				self.QQ = kwargs["QQ"]
			if  2 < len(args):
				self.Gtk = args[2]
			if "Gtk" in kwargs:
				self.Gtk = kwargs["Gtk"]
			if  3 < len(args):
				self.Gtk2 = args[3]
			if "Gtk2" in kwargs:
				self.Gtk2 = kwargs["Gtk2"]
			if  4 < len(args):
				self.PSkey = args[4]
			if "PSkey" in kwargs:
				self.PSkey = kwargs["PSkey"]
			if  5 < len(args):
				self.Skey = args[5]
			if "Skey" in kwargs:
				self.Skey = kwargs["Skey"]
			if  6 < len(args):
				self.Uin = args[6]
			if "Uin" in kwargs:
				self.Uin = kwargs["Uin"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'qzone.Manager{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'qzone.Manager ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def QQ(self):
		return _OPQBot.qzone_Manager_QQ_Get(self.handle)
	@QQ.setter
	def QQ(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_Manager_QQ_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_Manager_QQ_Set(self.handle, value)
	@property
	def Gtk(self):
		return _OPQBot.qzone_Manager_Gtk_Get(self.handle)
	@Gtk.setter
	def Gtk(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_Manager_Gtk_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_Manager_Gtk_Set(self.handle, value)
	@property
	def Gtk2(self):
		return _OPQBot.qzone_Manager_Gtk2_Get(self.handle)
	@Gtk2.setter
	def Gtk2(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_Manager_Gtk2_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_Manager_Gtk2_Set(self.handle, value)
	@property
	def PSkey(self):
		return _OPQBot.qzone_Manager_PSkey_Get(self.handle)
	@PSkey.setter
	def PSkey(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_Manager_PSkey_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_Manager_PSkey_Set(self.handle, value)
	@property
	def Skey(self):
		return _OPQBot.qzone_Manager_Skey_Get(self.handle)
	@Skey.setter
	def Skey(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_Manager_Skey_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_Manager_Skey_Set(self.handle, value)
	@property
	def Uin(self):
		return _OPQBot.qzone_Manager_Uin_Get(self.handle)
	@Uin.setter
	def Uin(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_Manager_Uin_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_Manager_Uin_Set(self.handle, value)
	def GetQzoneToken(self):
		"""GetQzoneToken() str, str"""
		return _OPQBot.qzone_Manager_GetQzoneToken(self.handle)
	def RefreshToken(self):
		"""RefreshToken() str"""
		return _OPQBot.qzone_Manager_RefreshToken(self.handle)
	def GetShuoShuoList(self):
		"""GetShuoShuoList() object, str"""
		return ShuoshuoList(handle=_OPQBot.qzone_Manager_GetShuoShuoList(self.handle))
	def SendShuoShuo(self, Content):
		"""SendShuoShuo(str Content) object, str"""
		return SendShuoShuoResult(handle=_OPQBot.qzone_Manager_SendShuoShuo(self.handle, Content))
	def UploadPic(self, picBase64):
		"""UploadPic(str picBase64) object, str"""
		return UploadPicResult(handle=_OPQBot.qzone_Manager_UploadPic(self.handle, picBase64))
	def SendShuoShuoWithBase64Pic(self, Content, pics):
		"""SendShuoShuoWithBase64Pic(str Content, []str pics) object, str"""
		return SendShuoShuoResult(handle=_OPQBot.qzone_Manager_SendShuoShuoWithBase64Pic(self.handle, Content, pics.handle))
	def SendShuoShuoWithLocalPic(self, content, pics):
		"""SendShuoShuoWithLocalPic(str content, []str pics) object, str"""
		return SendShuoShuoResult(handle=_OPQBot.qzone_Manager_SendShuoShuoWithLocalPic(self.handle, content, pics.handle))
	def Like(self, unikey, curkey, appid):
		"""Like(str unikey, str curkey, str appid) str"""
		return _OPQBot.qzone_Manager_Like(self.handle, unikey, curkey, appid)

# Python type for struct qzone.SendShuoShuoResult
class SendShuoShuoResult(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.qzone_SendShuoShuoResult_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Attach = args[0]
			if "Attach" in kwargs:
				self.Attach = kwargs["Attach"]
			if  1 < len(args):
				self.Code = args[1]
			if "Code" in kwargs:
				self.Code = kwargs["Code"]
			if  2 < len(args):
				self.Feedinfo = args[2]
			if "Feedinfo" in kwargs:
				self.Feedinfo = kwargs["Feedinfo"]
			if  3 < len(args):
				self.Message = args[3]
			if "Message" in kwargs:
				self.Message = kwargs["Message"]
			if  4 < len(args):
				self.Needverify = args[4]
			if "Needverify" in kwargs:
				self.Needverify = kwargs["Needverify"]
			if  5 < len(args):
				self.Now = args[5]
			if "Now" in kwargs:
				self.Now = kwargs["Now"]
			if  6 < len(args):
				self.Republish = args[6]
			if "Republish" in kwargs:
				self.Republish = kwargs["Republish"]
			if  7 < len(args):
				self.Secret = args[7]
			if "Secret" in kwargs:
				self.Secret = kwargs["Secret"]
			if  8 < len(args):
				self.Subcode = args[8]
			if "Subcode" in kwargs:
				self.Subcode = kwargs["Subcode"]
			if  9 < len(args):
				self.Tid = args[9]
			if "Tid" in kwargs:
				self.Tid = kwargs["Tid"]
			if  10 < len(args):
				self.Vote = args[10]
			if "Vote" in kwargs:
				self.Vote = kwargs["Vote"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'qzone.SendShuoShuoResult{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'qzone.SendShuoShuoResult ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Attach(self):
		return _OPQBot.qzone_SendShuoShuoResult_Attach_Get(self.handle)
	@Attach.setter
	def Attach(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Attach_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Attach_Set(self.handle, value)
	@property
	def Code(self):
		return _OPQBot.qzone_SendShuoShuoResult_Code_Get(self.handle)
	@Code.setter
	def Code(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Code_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Code_Set(self.handle, value)
	@property
	def Feedinfo(self):
		return _OPQBot.qzone_SendShuoShuoResult_Feedinfo_Get(self.handle)
	@Feedinfo.setter
	def Feedinfo(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Feedinfo_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Feedinfo_Set(self.handle, value)
	@property
	def Message(self):
		return _OPQBot.qzone_SendShuoShuoResult_Message_Get(self.handle)
	@Message.setter
	def Message(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Message_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Message_Set(self.handle, value)
	@property
	def Needverify(self):
		return _OPQBot.qzone_SendShuoShuoResult_Needverify_Get(self.handle)
	@Needverify.setter
	def Needverify(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Needverify_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Needverify_Set(self.handle, value)
	@property
	def Now(self):
		return _OPQBot.qzone_SendShuoShuoResult_Now_Get(self.handle)
	@Now.setter
	def Now(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Now_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Now_Set(self.handle, value)
	@property
	def Republish(self):
		return _OPQBot.qzone_SendShuoShuoResult_Republish_Get(self.handle)
	@Republish.setter
	def Republish(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Republish_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Republish_Set(self.handle, value)
	@property
	def Secret(self):
		return _OPQBot.qzone_SendShuoShuoResult_Secret_Get(self.handle)
	@Secret.setter
	def Secret(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Secret_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Secret_Set(self.handle, value)
	@property
	def Subcode(self):
		return _OPQBot.qzone_SendShuoShuoResult_Subcode_Get(self.handle)
	@Subcode.setter
	def Subcode(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Subcode_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Subcode_Set(self.handle, value)
	@property
	def Tid(self):
		return _OPQBot.qzone_SendShuoShuoResult_Tid_Get(self.handle)
	@Tid.setter
	def Tid(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Tid_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Tid_Set(self.handle, value)
	@property
	def Vote(self):
		return _OPQBot.qzone_SendShuoShuoResult_Vote_Get(self.handle)
	@Vote.setter
	def Vote(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.qzone_SendShuoShuoResult_Vote_Set(self.handle, value.handle)
		else:
			_OPQBot.qzone_SendShuoShuoResult_Vote_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewQzoneManager(qq, cookie):
	"""NewQzoneManager(long qq, object cookie) object"""
	return Manager(handle=_OPQBot.qzone_NewQzoneManager(qq, cookie.handle))


# ---- Functions ---
def GenderGTK(sKey):
	"""GenderGTK(str sKey) str
	
	GenderGTK 生成GTK
	"""
	return _OPQBot.qzone_GenderGTK(sKey)
def GetBase64(path):
	"""GetBase64(str path) str, str"""
	return _OPQBot.qzone_GetBase64(path)


