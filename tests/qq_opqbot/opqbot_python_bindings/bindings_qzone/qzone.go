/*
cgo stubs for package qzone.
File is generated by gopy. Do not edit.
gopy build -output=bindings_qzone -vm=python3 github.com/mcoo/OPQBot/qzone
*/

package main

/*

#cgo CFLAGS: -I/usr/include/python3.9 -Wno-error -Wno-implicit-function-declaration -Wno-int-conversion
#cgo LDFLAGS: -L/usr/lib/x86_64-linux-gnu -lpython3.9 -lcrypt -lpthread -ldl  -lutil -lm -lm

// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}

*/
import "C"
import (
	"errors"
	"reflect"
	"unsafe"

	"github.com/go-python/gopy/gopyh" // handler

	"github.com/mcoo/OPQBot"
	"github.com/mcoo/OPQBot/qzone"
)

// main doesn't do anything in lib / pkg mode, but is essential for exe mode
func main() {

}

// initialization functions -- can be called from python after library is loaded
// GoPyInitRunFile runs a separate python file -- call in GoPyInit if it
// steals the main thread e.g., for GUI event loop, as in GoGi startup.

//export GoPyInit
func GoPyInit() {

}

// type for the handle -- int64 for speed (can switch to string)
type GoHandle int64
type CGoHandle C.longlong

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//export DecRef
func DecRef(handle CGoHandle) {
	gopyh.DecRef(gopyh.CGoHandle(handle))
}

// IncRef increments the reference count for the specified handle.
//export IncRef
func IncRef(handle CGoHandle) {
	gopyh.IncRef(gopyh.CGoHandle(handle))
}

// NumHandles returns the number of handles currently in use.
//export NumHandles
func NumHandles() int {
	return gopyh.NumHandles()
}

// boolGoToPy converts a Go bool to python-compatible C.char
func boolGoToPy(b bool) C.char {
	if b {
		return 1
	}
	return 0
}

// boolPyToGo converts a python-compatible C.Char to Go bool
func boolPyToGo(b C.char) bool {
	if b != 0 {
		return true
	}
	return false
}

func complex64GoToPy(c complex64) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex64PyToGo(o *C.PyObject) complex64 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float32(v.real), float32(v.imag))
}

func complex128GoToPy(c complex128) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex128PyToGo(o *C.PyObject) complex128 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float64(v.real), float64(v.imag))
}

// errorGoToPy converts a Go error to python-compatible C.CString
func errorGoToPy(e error) *C.char {
	if e != nil {
		return C.CString(e.Error())
	}
	return C.CString("")
}

// --- generated code for package: qzone below: ---

// ---- External Types Outside of Targeted Packages ---

// Converters for non-pointer handles for type: OPQBot.Cookie
func ptrFromHandle_OPQBot_Cookie(h CGoHandle) *OPQBot.Cookie {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.Cookie")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Cookie{})).(*OPQBot.Cookie)
}
func handleFromPtr_OPQBot_Cookie(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.Cookie", p))
}

// ---- Package: go ---

// ---- Types ---

// Converters for implicit pointer handles for type: []bool
func ptrFromHandle_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func deptrFromHandle_Slice_bool(h CGoHandle) []bool {
	p := ptrFromHandle_Slice_bool(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bool", p))
}

// --- wrapping slice: []bool ---
//export Slice_bool_CTor
func Slice_bool_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bool(&[]bool{}))
}

//export Slice_bool_len
func Slice_bool_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bool(handle))
}

//export Slice_bool_elem
func Slice_bool_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_bool(handle)
	return boolGoToPy(s[_idx])
}

//export Slice_bool_subslice
func Slice_bool_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bool(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bool(&ss))
}

//export Slice_bool_set
func Slice_bool_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_bool(handle)
	s[_idx] = boolPyToGo(_vl)
}

//export Slice_bool_append
func Slice_bool_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_bool(handle)
	*s = append(*s, boolPyToGo(_vl))
}

// Converters for implicit pointer handles for type: []byte
func ptrFromHandle_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func deptrFromHandle_Slice_byte(h CGoHandle) []byte {
	p := ptrFromHandle_Slice_byte(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]byte", p))
}

// --- wrapping slice: []byte ---
//export Slice_byte_CTor
func Slice_byte_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_byte(&[]byte{}))
}

//export Slice_byte_len
func Slice_byte_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_byte(handle))
}

//export Slice_byte_elem
func Slice_byte_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_byte(handle)
	return C.char(s[_idx])
}

//export Slice_byte_subslice
func Slice_byte_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_byte(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_byte(&ss))
}

//export Slice_byte_set
func Slice_byte_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_byte(handle)
	s[_idx] = byte(_vl)
}

//export Slice_byte_append
func Slice_byte_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_byte(handle)
	*s = append(*s, byte(_vl))
}

// Converters for implicit pointer handles for type: []error
func ptrFromHandle_Slice_error(h CGoHandle) *[]error {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]error")
	if p == nil {
		return nil
	}
	return p.(*[]error)
}
func deptrFromHandle_Slice_error(h CGoHandle) []error {
	p := ptrFromHandle_Slice_error(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_error(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]error", p))
}

// --- wrapping slice: []error ---
//export Slice_error_CTor
func Slice_error_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_error(&[]error{}))
}

//export Slice_error_len
func Slice_error_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_error(handle))
}

//export Slice_error_elem
func Slice_error_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_error(handle)
	return errorGoToPy(s[_idx])
}

//export Slice_error_subslice
func Slice_error_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_error(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_error(&ss))
}

//export Slice_error_set
func Slice_error_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_error(handle)
	s[_idx] = errors.New(C.GoString(_vl))
}

//export Slice_error_append
func Slice_error_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_error(handle)
	*s = append(*s, errors.New(C.GoString(_vl)))
}

// Converters for implicit pointer handles for type: []float32
func ptrFromHandle_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func deptrFromHandle_Slice_float32(h CGoHandle) []float32 {
	p := ptrFromHandle_Slice_float32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float32", p))
}

// --- wrapping slice: []float32 ---
//export Slice_float32_CTor
func Slice_float32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float32(&[]float32{}))
}

//export Slice_float32_len
func Slice_float32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float32(handle))
}

//export Slice_float32_elem
func Slice_float32_elem(handle CGoHandle, _idx int) C.float {
	s := deptrFromHandle_Slice_float32(handle)
	return C.float(s[_idx])
}

//export Slice_float32_subslice
func Slice_float32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float32(&ss))
}

//export Slice_float32_set
func Slice_float32_set(handle CGoHandle, _idx int, _vl C.float) {
	s := deptrFromHandle_Slice_float32(handle)
	s[_idx] = float32(_vl)
}

//export Slice_float32_append
func Slice_float32_append(handle CGoHandle, _vl C.float) {
	s := ptrFromHandle_Slice_float32(handle)
	*s = append(*s, float32(_vl))
}

// Converters for implicit pointer handles for type: []float64
func ptrFromHandle_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func deptrFromHandle_Slice_float64(h CGoHandle) []float64 {
	p := ptrFromHandle_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float64", p))
}

// --- wrapping slice: []float64 ---
//export Slice_float64_CTor
func Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float64(&[]float64{}))
}

//export Slice_float64_len
func Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float64(handle))
}

//export Slice_float64_elem
func Slice_float64_elem(handle CGoHandle, _idx int) C.double {
	s := deptrFromHandle_Slice_float64(handle)
	return C.double(s[_idx])
}

//export Slice_float64_subslice
func Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float64(&ss))
}

//export Slice_float64_set
func Slice_float64_set(handle CGoHandle, _idx int, _vl C.double) {
	s := deptrFromHandle_Slice_float64(handle)
	s[_idx] = float64(_vl)
}

//export Slice_float64_append
func Slice_float64_append(handle CGoHandle, _vl C.double) {
	s := ptrFromHandle_Slice_float64(handle)
	*s = append(*s, float64(_vl))
}

// Converters for implicit pointer handles for type: []int
func ptrFromHandle_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func deptrFromHandle_Slice_int(h CGoHandle) []int {
	p := ptrFromHandle_Slice_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int", p))
}

// --- wrapping slice: []int ---
//export Slice_int_CTor
func Slice_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int(&[]int{}))
}

//export Slice_int_len
func Slice_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int(handle))
}

//export Slice_int_elem
func Slice_int_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int(handle)
	return C.longlong(s[_idx])
}

//export Slice_int_subslice
func Slice_int_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int(&ss))
}

//export Slice_int_set
func Slice_int_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int(handle)
	s[_idx] = int(_vl)
}

//export Slice_int_append
func Slice_int_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int(handle)
	*s = append(*s, int(_vl))
}

// Converters for implicit pointer handles for type: []int16
func ptrFromHandle_Slice_int16(h CGoHandle) *[]int16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int16")
	if p == nil {
		return nil
	}
	return p.(*[]int16)
}
func deptrFromHandle_Slice_int16(h CGoHandle) []int16 {
	p := ptrFromHandle_Slice_int16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int16", p))
}

// --- wrapping slice: []int16 ---
//export Slice_int16_CTor
func Slice_int16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int16(&[]int16{}))
}

//export Slice_int16_len
func Slice_int16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int16(handle))
}

//export Slice_int16_elem
func Slice_int16_elem(handle CGoHandle, _idx int) C.short {
	s := deptrFromHandle_Slice_int16(handle)
	return C.short(s[_idx])
}

//export Slice_int16_subslice
func Slice_int16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int16(&ss))
}

//export Slice_int16_set
func Slice_int16_set(handle CGoHandle, _idx int, _vl C.short) {
	s := deptrFromHandle_Slice_int16(handle)
	s[_idx] = int16(_vl)
}

//export Slice_int16_append
func Slice_int16_append(handle CGoHandle, _vl C.short) {
	s := ptrFromHandle_Slice_int16(handle)
	*s = append(*s, int16(_vl))
}

// Converters for implicit pointer handles for type: []int32
func ptrFromHandle_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func deptrFromHandle_Slice_int32(h CGoHandle) []int32 {
	p := ptrFromHandle_Slice_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int32", p))
}

// --- wrapping slice: []int32 ---
//export Slice_int32_CTor
func Slice_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int32(&[]int32{}))
}

//export Slice_int32_len
func Slice_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int32(handle))
}

//export Slice_int32_elem
func Slice_int32_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_int32(handle)
	return C.long(s[_idx])
}

//export Slice_int32_subslice
func Slice_int32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int32(&ss))
}

//export Slice_int32_set
func Slice_int32_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_int32(handle)
	s[_idx] = int32(_vl)
}

//export Slice_int32_append
func Slice_int32_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_int32(handle)
	*s = append(*s, int32(_vl))
}

// Converters for implicit pointer handles for type: []int64
func ptrFromHandle_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func deptrFromHandle_Slice_int64(h CGoHandle) []int64 {
	p := ptrFromHandle_Slice_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int64", p))
}

// --- wrapping slice: []int64 ---
//export Slice_int64_CTor
func Slice_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int64(&[]int64{}))
}

//export Slice_int64_len
func Slice_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int64(handle))
}

//export Slice_int64_elem
func Slice_int64_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int64(handle)
	return C.longlong(s[_idx])
}

//export Slice_int64_subslice
func Slice_int64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int64(&ss))
}

//export Slice_int64_set
func Slice_int64_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int64(handle)
	s[_idx] = int64(_vl)
}

//export Slice_int64_append
func Slice_int64_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int64(handle)
	*s = append(*s, int64(_vl))
}

// Converters for implicit pointer handles for type: []int8
func ptrFromHandle_Slice_int8(h CGoHandle) *[]int8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int8")
	if p == nil {
		return nil
	}
	return p.(*[]int8)
}
func deptrFromHandle_Slice_int8(h CGoHandle) []int8 {
	p := ptrFromHandle_Slice_int8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int8", p))
}

// --- wrapping slice: []int8 ---
//export Slice_int8_CTor
func Slice_int8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int8(&[]int8{}))
}

//export Slice_int8_len
func Slice_int8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int8(handle))
}

//export Slice_int8_elem
func Slice_int8_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_int8(handle)
	return C.char(s[_idx])
}

//export Slice_int8_subslice
func Slice_int8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int8(&ss))
}

//export Slice_int8_set
func Slice_int8_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_int8(handle)
	s[_idx] = int8(_vl)
}

//export Slice_int8_append
func Slice_int8_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_int8(handle)
	*s = append(*s, int8(_vl))
}

// Converters for implicit pointer handles for type: []rune
func ptrFromHandle_Slice_rune(h CGoHandle) *[]rune {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]rune")
	if p == nil {
		return nil
	}
	return p.(*[]rune)
}
func deptrFromHandle_Slice_rune(h CGoHandle) []rune {
	p := ptrFromHandle_Slice_rune(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_rune(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]rune", p))
}

// --- wrapping slice: []rune ---
//export Slice_rune_CTor
func Slice_rune_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_rune(&[]rune{}))
}

//export Slice_rune_len
func Slice_rune_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_rune(handle))
}

//export Slice_rune_elem
func Slice_rune_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_rune(handle)
	return C.long(s[_idx])
}

//export Slice_rune_subslice
func Slice_rune_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_rune(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_rune(&ss))
}

//export Slice_rune_set
func Slice_rune_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_rune(handle)
	s[_idx] = rune(_vl)
}

//export Slice_rune_append
func Slice_rune_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_rune(handle)
	*s = append(*s, rune(_vl))
}

// Converters for implicit pointer handles for type: []string
func ptrFromHandle_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func deptrFromHandle_Slice_string(h CGoHandle) []string {
	p := ptrFromHandle_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]string", p))
}

// --- wrapping slice: []string ---
//export Slice_string_CTor
func Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_string(&[]string{}))
}

//export Slice_string_len
func Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_string(handle))
}

//export Slice_string_elem
func Slice_string_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_string(handle)
	return C.CString(s[_idx])
}

//export Slice_string_subslice
func Slice_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_string(&ss))
}

//export Slice_string_set
func Slice_string_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_string(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_string_append
func Slice_string_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_string(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []uint
func ptrFromHandle_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func deptrFromHandle_Slice_uint(h CGoHandle) []uint {
	p := ptrFromHandle_Slice_uint(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint", p))
}

// --- wrapping slice: []uint ---
//export Slice_uint_CTor
func Slice_uint_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint(&[]uint{}))
}

//export Slice_uint_len
func Slice_uint_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint(handle))
}

//export Slice_uint_elem
func Slice_uint_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint_subslice
func Slice_uint_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint(&ss))
}

//export Slice_uint_set
func Slice_uint_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint(handle)
	s[_idx] = uint(_vl)
}

//export Slice_uint_append
func Slice_uint_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint(handle)
	*s = append(*s, uint(_vl))
}

// Converters for implicit pointer handles for type: []uint16
func ptrFromHandle_Slice_uint16(h CGoHandle) *[]uint16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint16")
	if p == nil {
		return nil
	}
	return p.(*[]uint16)
}
func deptrFromHandle_Slice_uint16(h CGoHandle) []uint16 {
	p := ptrFromHandle_Slice_uint16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint16", p))
}

// --- wrapping slice: []uint16 ---
//export Slice_uint16_CTor
func Slice_uint16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint16(&[]uint16{}))
}

//export Slice_uint16_len
func Slice_uint16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint16(handle))
}

//export Slice_uint16_elem
func Slice_uint16_elem(handle CGoHandle, _idx int) C.ushort {
	s := deptrFromHandle_Slice_uint16(handle)
	return C.ushort(s[_idx])
}

//export Slice_uint16_subslice
func Slice_uint16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint16(&ss))
}

//export Slice_uint16_set
func Slice_uint16_set(handle CGoHandle, _idx int, _vl C.ushort) {
	s := deptrFromHandle_Slice_uint16(handle)
	s[_idx] = uint16(_vl)
}

//export Slice_uint16_append
func Slice_uint16_append(handle CGoHandle, _vl C.ushort) {
	s := ptrFromHandle_Slice_uint16(handle)
	*s = append(*s, uint16(_vl))
}

// Converters for implicit pointer handles for type: []uint32
func ptrFromHandle_Slice_uint32(h CGoHandle) *[]uint32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint32")
	if p == nil {
		return nil
	}
	return p.(*[]uint32)
}
func deptrFromHandle_Slice_uint32(h CGoHandle) []uint32 {
	p := ptrFromHandle_Slice_uint32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint32", p))
}

// --- wrapping slice: []uint32 ---
//export Slice_uint32_CTor
func Slice_uint32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint32(&[]uint32{}))
}

//export Slice_uint32_len
func Slice_uint32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint32(handle))
}

//export Slice_uint32_elem
func Slice_uint32_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_uint32(handle)
	return C.ulong(s[_idx])
}

//export Slice_uint32_subslice
func Slice_uint32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint32(&ss))
}

//export Slice_uint32_set
func Slice_uint32_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_uint32(handle)
	s[_idx] = uint32(_vl)
}

//export Slice_uint32_append
func Slice_uint32_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_uint32(handle)
	*s = append(*s, uint32(_vl))
}

// Converters for implicit pointer handles for type: []uint64
func ptrFromHandle_Slice_uint64(h CGoHandle) *[]uint64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint64")
	if p == nil {
		return nil
	}
	return p.(*[]uint64)
}
func deptrFromHandle_Slice_uint64(h CGoHandle) []uint64 {
	p := ptrFromHandle_Slice_uint64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint64", p))
}

// --- wrapping slice: []uint64 ---
//export Slice_uint64_CTor
func Slice_uint64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint64(&[]uint64{}))
}

//export Slice_uint64_len
func Slice_uint64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint64(handle))
}

//export Slice_uint64_elem
func Slice_uint64_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint64(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint64_subslice
func Slice_uint64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint64(&ss))
}

//export Slice_uint64_set
func Slice_uint64_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint64(handle)
	s[_idx] = uint64(_vl)
}

//export Slice_uint64_append
func Slice_uint64_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint64(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for implicit pointer handles for type: []uint8
func ptrFromHandle_Slice_uint8(h CGoHandle) *[]uint8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint8")
	if p == nil {
		return nil
	}
	return p.(*[]uint8)
}
func deptrFromHandle_Slice_uint8(h CGoHandle) []uint8 {
	p := ptrFromHandle_Slice_uint8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint8", p))
}

// --- wrapping slice: []uint8 ---
//export Slice_uint8_CTor
func Slice_uint8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint8(&[]uint8{}))
}

//export Slice_uint8_len
func Slice_uint8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint8(handle))
}

//export Slice_uint8_elem
func Slice_uint8_elem(handle CGoHandle, _idx int) C.uchar {
	s := deptrFromHandle_Slice_uint8(handle)
	return C.uchar(s[_idx])
}

//export Slice_uint8_subslice
func Slice_uint8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint8(&ss))
}

//export Slice_uint8_set
func Slice_uint8_set(handle CGoHandle, _idx int, _vl C.uchar) {
	s := deptrFromHandle_Slice_uint8(handle)
	s[_idx] = uint8(_vl)
}

//export Slice_uint8_append
func Slice_uint8_append(handle CGoHandle, _vl C.uchar) {
	s := ptrFromHandle_Slice_uint8(handle)
	*s = append(*s, uint8(_vl))
}

// ---- Package: qzone ---

// ---- Types ---

// Converters for pointer handles for type: *qzone.Manager
func ptrFromHandle_Ptr_qzone_Manager(h CGoHandle) *qzone.Manager {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*qzone.Manager")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(qzone.Manager{})).(*qzone.Manager)
}
func handleFromPtr_Ptr_qzone_Manager(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*qzone.Manager", p))
}

// Converters for pointer handles for type: *qzone.SendShuoShuoResult
func ptrFromHandle_Ptr_qzone_SendShuoShuoResult(h CGoHandle) *qzone.SendShuoShuoResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*qzone.SendShuoShuoResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(qzone.SendShuoShuoResult{})).(*qzone.SendShuoShuoResult)
}
func handleFromPtr_Ptr_qzone_SendShuoShuoResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*qzone.SendShuoShuoResult", p))
}

// Converters for pointer handles for type: *qzone.ShuoshuoList
func ptrFromHandle_Ptr_qzone_ShuoshuoList(h CGoHandle) *qzone.ShuoshuoList {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*qzone.ShuoshuoList")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(qzone.ShuoshuoList{})).(*qzone.ShuoshuoList)
}
func handleFromPtr_Ptr_qzone_ShuoshuoList(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*qzone.ShuoshuoList", p))
}

// Converters for pointer handles for type: *qzone.UploadPicResult
func ptrFromHandle_Ptr_qzone_UploadPicResult(h CGoHandle) *qzone.UploadPicResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*qzone.UploadPicResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(qzone.UploadPicResult{})).(*qzone.UploadPicResult)
}
func handleFromPtr_Ptr_qzone_UploadPicResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*qzone.UploadPicResult", p))
}

// Converters for non-pointer handles for type: qzone.Manager
func ptrFromHandle_qzone_Manager(h CGoHandle) *qzone.Manager {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "qzone.Manager")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(qzone.Manager{})).(*qzone.Manager)
}
func handleFromPtr_qzone_Manager(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("qzone.Manager", p))
}

// Converters for non-pointer handles for type: qzone.SendShuoShuoResult
func ptrFromHandle_qzone_SendShuoShuoResult(h CGoHandle) *qzone.SendShuoShuoResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "qzone.SendShuoShuoResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(qzone.SendShuoShuoResult{})).(*qzone.SendShuoShuoResult)
}
func handleFromPtr_qzone_SendShuoShuoResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("qzone.SendShuoShuoResult", p))
}

// Converters for non-pointer handles for type: qzone.ShuoshuoList
func ptrFromHandle_qzone_ShuoshuoList(h CGoHandle) *qzone.ShuoshuoList {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "qzone.ShuoshuoList")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(qzone.ShuoshuoList{})).(*qzone.ShuoshuoList)
}
func handleFromPtr_qzone_ShuoshuoList(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("qzone.ShuoshuoList", p))
}

// Converters for non-pointer handles for type: qzone.UploadPicResult
func ptrFromHandle_qzone_UploadPicResult(h CGoHandle) *qzone.UploadPicResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "qzone.UploadPicResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(qzone.UploadPicResult{})).(*qzone.UploadPicResult)
}
func handleFromPtr_qzone_UploadPicResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("qzone.UploadPicResult", p))
}

// ---- Global Variables: can only use functions to access ---

// ---- Interfaces ---

// ---- Structs ---

// --- wrapping struct: qzone.Manager ---
//export qzone_Manager_CTor
func qzone_Manager_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_qzone_Manager(&qzone.Manager{}))
}

//export qzone_Manager_QQ_Get
func qzone_Manager_QQ_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_Manager(handle)
	return C.CString(op.QQ)
}

//export qzone_Manager_QQ_Set
func qzone_Manager_QQ_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_Manager(handle)
	op.QQ = C.GoString(val)
}

//export qzone_Manager_Gtk_Get
func qzone_Manager_Gtk_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_Manager(handle)
	return C.CString(op.Gtk)
}

//export qzone_Manager_Gtk_Set
func qzone_Manager_Gtk_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_Manager(handle)
	op.Gtk = C.GoString(val)
}

//export qzone_Manager_Gtk2_Get
func qzone_Manager_Gtk2_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_Manager(handle)
	return C.CString(op.Gtk2)
}

//export qzone_Manager_Gtk2_Set
func qzone_Manager_Gtk2_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_Manager(handle)
	op.Gtk2 = C.GoString(val)
}

//export qzone_Manager_PSkey_Get
func qzone_Manager_PSkey_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_Manager(handle)
	return C.CString(op.PSkey)
}

//export qzone_Manager_PSkey_Set
func qzone_Manager_PSkey_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_Manager(handle)
	op.PSkey = C.GoString(val)
}

//export qzone_Manager_Skey_Get
func qzone_Manager_Skey_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_Manager(handle)
	return C.CString(op.Skey)
}

//export qzone_Manager_Skey_Set
func qzone_Manager_Skey_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_Manager(handle)
	op.Skey = C.GoString(val)
}

//export qzone_Manager_Uin_Get
func qzone_Manager_Uin_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_Manager(handle)
	return C.CString(op.Uin)
}

//export qzone_Manager_Uin_Set
func qzone_Manager_Uin_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_Manager(handle)
	op.Uin = C.GoString(val)
}

//export qzone_Manager_GetQzoneToken
func qzone_Manager_GetQzoneToken(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*qzone.Manager")
	if __err != nil {
		return C.CString("")
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(qzone.Manager{})).(*qzone.Manager).GetQzoneToken()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}

//export qzone_Manager_GetShuoShuoList
func qzone_Manager_GetShuoShuoList(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*qzone.Manager")
	if __err != nil {
		return handleFromPtr_qzone_ShuoshuoList(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(qzone.Manager{})).(*qzone.Manager).GetShuoShuoList()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_qzone_ShuoshuoList(nil)
	}
	return handleFromPtr_qzone_ShuoshuoList(&cret)
}

//export qzone_Manager_SendShuoShuo
func qzone_Manager_SendShuoShuo(_handle CGoHandle, Content *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*qzone.Manager")
	if __err != nil {
		return handleFromPtr_qzone_SendShuoShuoResult(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(qzone.Manager{})).(*qzone.Manager).SendShuoShuo(C.GoString(Content))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_qzone_SendShuoShuoResult(nil)
	}
	return handleFromPtr_qzone_SendShuoShuoResult(&cret)
}

//export qzone_Manager_SendShuoShuoWithPic
func qzone_Manager_SendShuoShuoWithPic(_handle CGoHandle, Content *C.char, picBo *C.char, richVal *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*qzone.Manager")
	if __err != nil {
		return handleFromPtr_qzone_SendShuoShuoResult(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(qzone.Manager{})).(*qzone.Manager).SendShuoShuoWithPic(C.GoString(Content), C.GoString(picBo), C.GoString(richVal))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_qzone_SendShuoShuoResult(nil)
	}
	return handleFromPtr_qzone_SendShuoShuoResult(&cret)
}

//export qzone_Manager_UploadPic
func qzone_Manager_UploadPic(_handle CGoHandle, picBase64 *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*qzone.Manager")
	if __err != nil {
		return handleFromPtr_qzone_UploadPicResult(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(qzone.Manager{})).(*qzone.Manager).UploadPic(C.GoString(picBase64))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_qzone_UploadPicResult(nil)
	}
	return handleFromPtr_qzone_UploadPicResult(&cret)
}

//export qzone_Manager_Like
func qzone_Manager_Like(_handle CGoHandle, unikey *C.char, curkey *C.char, appid *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*qzone.Manager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(qzone.Manager{})).(*qzone.Manager).Like(C.GoString(unikey), C.GoString(curkey), C.GoString(appid))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

// --- wrapping struct: qzone.SendShuoShuoResult ---
//export qzone_SendShuoShuoResult_CTor
func qzone_SendShuoShuoResult_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_qzone_SendShuoShuoResult(&qzone.SendShuoShuoResult{}))
}

//export qzone_SendShuoShuoResult_Attach_Get
func qzone_SendShuoShuoResult_Attach_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.CString(op.Attach)
}

//export qzone_SendShuoShuoResult_Attach_Set
func qzone_SendShuoShuoResult_Attach_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Attach = C.GoString(val)
}

//export qzone_SendShuoShuoResult_Code_Get
func qzone_SendShuoShuoResult_Code_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.longlong(op.Code)
}

//export qzone_SendShuoShuoResult_Code_Set
func qzone_SendShuoShuoResult_Code_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Code = int(val)
}

//export qzone_SendShuoShuoResult_Feedinfo_Get
func qzone_SendShuoShuoResult_Feedinfo_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.CString(op.Feedinfo)
}

//export qzone_SendShuoShuoResult_Feedinfo_Set
func qzone_SendShuoShuoResult_Feedinfo_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Feedinfo = C.GoString(val)
}

//export qzone_SendShuoShuoResult_Message_Get
func qzone_SendShuoShuoResult_Message_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.CString(op.Message)
}

//export qzone_SendShuoShuoResult_Message_Set
func qzone_SendShuoShuoResult_Message_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Message = C.GoString(val)
}

//export qzone_SendShuoShuoResult_Needverify_Get
func qzone_SendShuoShuoResult_Needverify_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.longlong(op.Needverify)
}

//export qzone_SendShuoShuoResult_Needverify_Set
func qzone_SendShuoShuoResult_Needverify_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Needverify = int(val)
}

//export qzone_SendShuoShuoResult_Now_Get
func qzone_SendShuoShuoResult_Now_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.longlong(op.Now)
}

//export qzone_SendShuoShuoResult_Now_Set
func qzone_SendShuoShuoResult_Now_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Now = int(val)
}

//export qzone_SendShuoShuoResult_Republish_Get
func qzone_SendShuoShuoResult_Republish_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.longlong(op.Republish)
}

//export qzone_SendShuoShuoResult_Republish_Set
func qzone_SendShuoShuoResult_Republish_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Republish = int(val)
}

//export qzone_SendShuoShuoResult_Secret_Get
func qzone_SendShuoShuoResult_Secret_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.longlong(op.Secret)
}

//export qzone_SendShuoShuoResult_Secret_Set
func qzone_SendShuoShuoResult_Secret_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Secret = int(val)
}

//export qzone_SendShuoShuoResult_Subcode_Get
func qzone_SendShuoShuoResult_Subcode_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.longlong(op.Subcode)
}

//export qzone_SendShuoShuoResult_Subcode_Set
func qzone_SendShuoShuoResult_Subcode_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Subcode = int(val)
}

//export qzone_SendShuoShuoResult_Tid_Get
func qzone_SendShuoShuoResult_Tid_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.CString(op.Tid)
}

//export qzone_SendShuoShuoResult_Tid_Set
func qzone_SendShuoShuoResult_Tid_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Tid = C.GoString(val)
}

//export qzone_SendShuoShuoResult_Vote_Get
func qzone_SendShuoShuoResult_Vote_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	return C.CString(op.Vote)
}

//export qzone_SendShuoShuoResult_Vote_Set
func qzone_SendShuoShuoResult_Vote_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_SendShuoShuoResult(handle)
	op.Vote = C.GoString(val)
}

// --- wrapping struct: qzone.ShuoshuoList ---
//export qzone_ShuoshuoList_CTor
func qzone_ShuoshuoList_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_qzone_ShuoshuoList(&qzone.ShuoshuoList{}))
}

//export qzone_ShuoshuoList_Code_Get
func qzone_ShuoshuoList_Code_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_ShuoshuoList(handle)
	return C.longlong(op.Code)
}

//export qzone_ShuoshuoList_Code_Set
func qzone_ShuoshuoList_Code_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_ShuoshuoList(handle)
	op.Code = int(val)
}

//export qzone_ShuoshuoList_Subcode_Get
func qzone_ShuoshuoList_Subcode_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_ShuoshuoList(handle)
	return C.longlong(op.Subcode)
}

//export qzone_ShuoshuoList_Subcode_Set
func qzone_ShuoshuoList_Subcode_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_ShuoshuoList(handle)
	op.Subcode = int(val)
}

//export qzone_ShuoshuoList_Message_Get
func qzone_ShuoshuoList_Message_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_qzone_ShuoshuoList(handle)
	return C.CString(op.Message)
}

//export qzone_ShuoshuoList_Message_Set
func qzone_ShuoshuoList_Message_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_qzone_ShuoshuoList(handle)
	op.Message = C.GoString(val)
}

//export qzone_ShuoshuoList_Default_Get
func qzone_ShuoshuoList_Default_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_ShuoshuoList(handle)
	return C.longlong(op.Default)
}

//export qzone_ShuoshuoList_Default_Set
func qzone_ShuoshuoList_Default_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_ShuoshuoList(handle)
	op.Default = int(val)
}

// --- wrapping struct: qzone.UploadPicResult ---
//export qzone_UploadPicResult_CTor
func qzone_UploadPicResult_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_qzone_UploadPicResult(&qzone.UploadPicResult{}))
}

//export qzone_UploadPicResult_Ret_Get
func qzone_UploadPicResult_Ret_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_qzone_UploadPicResult(handle)
	return C.longlong(op.Ret)
}

//export qzone_UploadPicResult_Ret_Set
func qzone_UploadPicResult_Ret_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_qzone_UploadPicResult(handle)
	op.Ret = int(val)
}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

//export qzone_NewQzoneManager
func qzone_NewQzoneManager(qq C.longlong, cookie CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	cret := qzone.NewQzoneManager(int64(qq), *ptrFromHandle_OPQBot_Cookie(cookie))

	return handleFromPtr_qzone_Manager(&cret)
}

// ---- Functions ---

//export qzone_GenderGTK
func qzone_GenderGTK(sKey *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.CString(qzone.GenderGTK(C.GoString(sKey)))

}
