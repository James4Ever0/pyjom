/*
cgo stubs for package OPQBot.
File is generated by gopy. Do not edit.
gopy build -output=bindings -vm=python3 github.com/mcoo/OPQBot
*/

package main

/*

#cgo CFLAGS: -I/usr/include/python3.9 -Wno-error -Wno-implicit-function-declaration -Wno-int-conversion
#cgo LDFLAGS: -L/usr/lib/x86_64-linux-gnu -lpython3.9 -lcrypt -lpthread -ldl  -lutil -lm -lm

// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}

*/
import "C"
import (
	"errors"
	"fmt"
	"reflect"
	"unsafe"

	"github.com/go-python/gopy/gopyh" // handler

	"bytes"
	"context"
	"io"
	"runtime"
	"time"

	"github.com/mcoo/OPQBot"
	"github.com/mcoo/OPQBot/session"
	"github.com/sirupsen/logrus"
)

// main doesn't do anything in lib / pkg mode, but is essential for exe mode
func main() {

}

// initialization functions -- can be called from python after library is loaded
// GoPyInitRunFile runs a separate python file -- call in GoPyInit if it
// steals the main thread e.g., for GUI event loop, as in GoGi startup.

//export GoPyInit
func GoPyInit() {

}

// type for the handle -- int64 for speed (can switch to string)
type GoHandle int64
type CGoHandle C.longlong

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//export DecRef
func DecRef(handle CGoHandle) {
	gopyh.DecRef(gopyh.CGoHandle(handle))
}

// IncRef increments the reference count for the specified handle.
//export IncRef
func IncRef(handle CGoHandle) {
	gopyh.IncRef(gopyh.CGoHandle(handle))
}

// NumHandles returns the number of handles currently in use.
//export NumHandles
func NumHandles() int {
	return gopyh.NumHandles()
}

// boolGoToPy converts a Go bool to python-compatible C.char
func boolGoToPy(b bool) C.char {
	if b {
		return 1
	}
	return 0
}

// boolPyToGo converts a python-compatible C.Char to Go bool
func boolPyToGo(b C.char) bool {
	if b != 0 {
		return true
	}
	return false
}

func complex64GoToPy(c complex64) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex64PyToGo(o *C.PyObject) complex64 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float32(v.real), float32(v.imag))
}

func complex128GoToPy(c complex128) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex128PyToGo(o *C.PyObject) complex128 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float64(v.real), float64(v.imag))
}

// errorGoToPy converts a Go error to python-compatible C.CString
func errorGoToPy(e error) *C.char {
	if e != nil {
		return C.CString(e.Error())
	}
	return C.CString("")
}

// --- generated code for package: OPQBot below: ---

// ---- External Types Outside of Targeted Packages ---

// Converters for pointer handles for type: *bytes.Buffer
func ptrFromHandle_Ptr_bytes_Buffer(h CGoHandle) *bytes.Buffer {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*bytes.Buffer")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bytes.Buffer{})).(*bytes.Buffer)
}
func handleFromPtr_Ptr_bytes_Buffer(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*bytes.Buffer", p))
}

// Converters for pointer handles for type: *session.Manager
func ptrFromHandle_Ptr_session_Manager(h CGoHandle) *session.Manager {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*session.Manager")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(session.Manager{})).(*session.Manager)
}
func handleFromPtr_Ptr_session_Manager(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*session.Manager", p))
}

// Converters for pointer handles for type: *logrus.Entry
func ptrFromHandle_Ptr_logrus_Entry(h CGoHandle) *logrus.Entry {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*logrus.Entry")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(logrus.Entry{})).(*logrus.Entry)
}
func handleFromPtr_Ptr_logrus_Entry(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*logrus.Entry", p))
}

// Converters for pointer handles for type: *logrus.Logger
func ptrFromHandle_Ptr_logrus_Logger(h CGoHandle) *logrus.Logger {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*logrus.Logger")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(logrus.Logger{})).(*logrus.Logger)
}
func handleFromPtr_Ptr_logrus_Logger(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*logrus.Logger", p))
}

// Converters for pointer handles for type: *io.PipeWriter
func ptrFromHandle_Ptr_io_PipeWriter(h CGoHandle) *io.PipeWriter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*io.PipeWriter")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(io.PipeWriter{})).(*io.PipeWriter)
}
func handleFromPtr_Ptr_io_PipeWriter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*io.PipeWriter", p))
}

// Converters for pointer handles for type: *runtime.Frame
func ptrFromHandle_Ptr_runtime_Frame(h CGoHandle) *runtime.Frame {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*runtime.Frame")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(runtime.Frame{})).(*runtime.Frame)
}
func handleFromPtr_Ptr_runtime_Frame(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*runtime.Frame", p))
}

// Converters for pointer handles for type: *runtime.Func
func ptrFromHandle_Ptr_runtime_Func(h CGoHandle) *runtime.Func {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*runtime.Func")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(runtime.Func{})).(*runtime.Func)
}
func handleFromPtr_Ptr_runtime_Func(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*runtime.Func", p))
}

// Converters for pointer handles for type: *time.Location
func ptrFromHandle_Ptr_time_Location(h CGoHandle) *time.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*time.Location")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Location{})).(*time.Location)
}
func handleFromPtr_Ptr_time_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*time.Location", p))
}

// Converters for non-pointer handles for type: bytes.Buffer
func ptrFromHandle_bytes_Buffer(h CGoHandle) *bytes.Buffer {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "bytes.Buffer")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(bytes.Buffer{})).(*bytes.Buffer)
}
func handleFromPtr_bytes_Buffer(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("bytes.Buffer", p))
}

// Converters for pointer handles for type: context.Context
func ptrFromHandle_context_Context(h CGoHandle) context.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "context.Context")
	if p == nil {
		return nil
	}
	return p.(context.Context)
}
func handleFromPtr_context_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("context.Context", p))
}

// Converters for non-pointer handles for type: session.Manager
func ptrFromHandle_session_Manager(h CGoHandle) *session.Manager {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "session.Manager")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(session.Manager{})).(*session.Manager)
}
func handleFromPtr_session_Manager(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("session.Manager", p))
}

// Converters for pointer handles for type: session.Session
func ptrFromHandle_session_Session(h CGoHandle) session.Session {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "session.Session")
	if p == nil {
		return nil
	}
	return p.(session.Session)
}
func handleFromPtr_session_Session(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("session.Session", p))
}

// Converters for non-pointer handles for type: logrus.Entry
func ptrFromHandle_logrus_Entry(h CGoHandle) *logrus.Entry {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "logrus.Entry")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(logrus.Entry{})).(*logrus.Entry)
}
func handleFromPtr_logrus_Entry(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("logrus.Entry", p))
}

// Converters for implicit pointer handles for type: logrus.Fields
func ptrFromHandle_logrus_Fields(h CGoHandle) *logrus.Fields {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "logrus.Fields")
	if p == nil {
		return nil
	}
	return p.(*logrus.Fields)
}
func deptrFromHandle_logrus_Fields(h CGoHandle) logrus.Fields {
	p := ptrFromHandle_logrus_Fields(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_logrus_Fields(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("logrus.Fields", p))
}

// --- wrapping map: logrus.Fields ---
//export logrus_Fields_CTor
func logrus_Fields_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_logrus_Fields(&logrus.Fields{}))
}

//export logrus_Fields_len
func logrus_Fields_len(handle CGoHandle) int {
	return len(deptrFromHandle_logrus_Fields(handle))
}

//export logrus_Fields_elem
func logrus_Fields_elem(handle CGoHandle, _ky *C.char) *C.char {
	s := deptrFromHandle_logrus_Fields(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return C.CString(fmt.Sprintf("%s", (v)))
}

//export logrus_Fields_contains
func logrus_Fields_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_logrus_Fields(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export logrus_Fields_set
func logrus_Fields_set(handle CGoHandle, _ky *C.char, _vl *C.char) {
	s := deptrFromHandle_logrus_Fields(handle)
	s[C.GoString(_ky)] = C.GoString(_vl)
}

//export logrus_Fields_delete
func logrus_Fields_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_logrus_Fields(handle)
	delete(s, C.GoString(_ky))
}

//export logrus_Fields_keys
func logrus_Fields_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_logrus_Fields(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// Converters for pointer handles for type: logrus.Formatter
func ptrFromHandle_logrus_Formatter(h CGoHandle) logrus.Formatter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "logrus.Formatter")
	if p == nil {
		return nil
	}
	return p.(logrus.Formatter)
}
func handleFromPtr_logrus_Formatter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("logrus.Formatter", p))
}

// Converters for pointer handles for type: logrus.Hook
func ptrFromHandle_logrus_Hook(h CGoHandle) logrus.Hook {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "logrus.Hook")
	if p == nil {
		return nil
	}
	return p.(logrus.Hook)
}
func handleFromPtr_logrus_Hook(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("logrus.Hook", p))
}

// Converters for implicit pointer handles for type: logrus.LevelHooks
func ptrFromHandle_logrus_LevelHooks(h CGoHandle) *logrus.LevelHooks {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "logrus.LevelHooks")
	if p == nil {
		return nil
	}
	return p.(*logrus.LevelHooks)
}
func deptrFromHandle_logrus_LevelHooks(h CGoHandle) logrus.LevelHooks {
	p := ptrFromHandle_logrus_LevelHooks(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_logrus_LevelHooks(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("logrus.LevelHooks", p))
}

// --- wrapping map: logrus.LevelHooks ---
//export logrus_LevelHooks_CTor
func logrus_LevelHooks_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_logrus_LevelHooks(&logrus.LevelHooks{}))
}

//export logrus_LevelHooks_len
func logrus_LevelHooks_len(handle CGoHandle) int {
	return len(deptrFromHandle_logrus_LevelHooks(handle))
}

//export logrus_LevelHooks_elem
func logrus_LevelHooks_elem(handle CGoHandle, _ky C.ulong) CGoHandle {
	s := deptrFromHandle_logrus_LevelHooks(handle)
	v, ok := s[logrus.Level(uint32(_ky))]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return handleFromPtr_Slice_logrus_Hook(v)
}

//export logrus_LevelHooks_contains
func logrus_LevelHooks_contains(handle CGoHandle, _ky C.ulong) C.char {
	s := deptrFromHandle_logrus_LevelHooks(handle)
	_, ok := s[logrus.Level(uint32(_ky))]
	return boolGoToPy(ok)
}

//export logrus_LevelHooks_set
func logrus_LevelHooks_set(handle CGoHandle, _ky C.ulong, _vl CGoHandle) {
	s := deptrFromHandle_logrus_LevelHooks(handle)
	s[logrus.Level(uint32(_ky))] = deptrFromHandle_Slice_logrus_Hook(_vl)
}

//export logrus_LevelHooks_delete
func logrus_LevelHooks_delete(handle CGoHandle, _ky C.ulong) {
	s := deptrFromHandle_logrus_LevelHooks(handle)
	delete(s, logrus.Level(uint32(_ky)))
}

//export logrus_LevelHooks_keys
func logrus_LevelHooks_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_logrus_LevelHooks(handle)
	kys := make([]logrus.Level, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_logrus_Level(&kys)
}

// Converters for non-pointer handles for type: logrus.Logger
func ptrFromHandle_logrus_Logger(h CGoHandle) *logrus.Logger {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "logrus.Logger")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(logrus.Logger{})).(*logrus.Logger)
}
func handleFromPtr_logrus_Logger(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("logrus.Logger", p))
}

// Converters for non-pointer handles for type: io.PipeWriter
func ptrFromHandle_io_PipeWriter(h CGoHandle) *io.PipeWriter {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "io.PipeWriter")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(io.PipeWriter{})).(*io.PipeWriter)
}
func handleFromPtr_io_PipeWriter(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("io.PipeWriter", p))
}

// Converters for pointer handles for type: io.Reader
func ptrFromHandle_io_Reader(h CGoHandle) io.Reader {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "io.Reader")
	if p == nil {
		return nil
	}
	return p.(io.Reader)
}
func handleFromPtr_io_Reader(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("io.Reader", p))
}

// Converters for pointer handles for type: io.Writer
func ptrFromHandle_io_Writer(h CGoHandle) io.Writer {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "io.Writer")
	if p == nil {
		return nil
	}
	return p.(io.Writer)
}
func handleFromPtr_io_Writer(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("io.Writer", p))
}

// Converters for non-pointer handles for type: runtime.Frame
func ptrFromHandle_runtime_Frame(h CGoHandle) *runtime.Frame {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "runtime.Frame")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(runtime.Frame{})).(*runtime.Frame)
}
func handleFromPtr_runtime_Frame(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("runtime.Frame", p))
}

// Converters for non-pointer handles for type: runtime.Func
func ptrFromHandle_runtime_Func(h CGoHandle) *runtime.Func {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "runtime.Func")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(runtime.Func{})).(*runtime.Func)
}
func handleFromPtr_runtime_Func(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("runtime.Func", p))
}

// Converters for non-pointer handles for type: time.Location
func ptrFromHandle_time_Location(h CGoHandle) *time.Location {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "time.Location")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Location{})).(*time.Location)
}
func handleFromPtr_time_Location(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("time.Location", p))
}

// Converters for non-pointer handles for type: time.Time
func ptrFromHandle_time_Time(h CGoHandle) *time.Time {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "time.Time")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(time.Time{})).(*time.Time)
}
func handleFromPtr_time_Time(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("time.Time", p))
}

// ---- Package: go ---

// ---- Types ---

// Converters for implicit pointer handles for type: []bool
func ptrFromHandle_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func deptrFromHandle_Slice_bool(h CGoHandle) []bool {
	p := ptrFromHandle_Slice_bool(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bool", p))
}

// --- wrapping slice: []bool ---
//export Slice_bool_CTor
func Slice_bool_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bool(&[]bool{}))
}

//export Slice_bool_len
func Slice_bool_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bool(handle))
}

//export Slice_bool_elem
func Slice_bool_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_bool(handle)
	return boolGoToPy(s[_idx])
}

//export Slice_bool_subslice
func Slice_bool_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bool(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bool(&ss))
}

//export Slice_bool_set
func Slice_bool_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_bool(handle)
	s[_idx] = boolPyToGo(_vl)
}

//export Slice_bool_append
func Slice_bool_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_bool(handle)
	*s = append(*s, boolPyToGo(_vl))
}

// Converters for implicit pointer handles for type: []byte
func ptrFromHandle_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func deptrFromHandle_Slice_byte(h CGoHandle) []byte {
	p := ptrFromHandle_Slice_byte(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]byte", p))
}

// --- wrapping slice: []byte ---
//export Slice_byte_CTor
func Slice_byte_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_byte(&[]byte{}))
}

//export Slice_byte_len
func Slice_byte_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_byte(handle))
}

//export Slice_byte_elem
func Slice_byte_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_byte(handle)
	return C.char(s[_idx])
}

//export Slice_byte_subslice
func Slice_byte_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_byte(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_byte(&ss))
}

//export Slice_byte_set
func Slice_byte_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_byte(handle)
	s[_idx] = byte(_vl)
}

//export Slice_byte_append
func Slice_byte_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_byte(handle)
	*s = append(*s, byte(_vl))
}

// Converters for implicit pointer handles for type: []error
func ptrFromHandle_Slice_error(h CGoHandle) *[]error {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]error")
	if p == nil {
		return nil
	}
	return p.(*[]error)
}
func deptrFromHandle_Slice_error(h CGoHandle) []error {
	p := ptrFromHandle_Slice_error(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_error(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]error", p))
}

// --- wrapping slice: []error ---
//export Slice_error_CTor
func Slice_error_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_error(&[]error{}))
}

//export Slice_error_len
func Slice_error_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_error(handle))
}

//export Slice_error_elem
func Slice_error_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_error(handle)
	return errorGoToPy(s[_idx])
}

//export Slice_error_subslice
func Slice_error_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_error(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_error(&ss))
}

//export Slice_error_set
func Slice_error_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_error(handle)
	s[_idx] = errors.New(C.GoString(_vl))
}

//export Slice_error_append
func Slice_error_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_error(handle)
	*s = append(*s, errors.New(C.GoString(_vl)))
}

// Converters for implicit pointer handles for type: []float32
func ptrFromHandle_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func deptrFromHandle_Slice_float32(h CGoHandle) []float32 {
	p := ptrFromHandle_Slice_float32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float32", p))
}

// --- wrapping slice: []float32 ---
//export Slice_float32_CTor
func Slice_float32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float32(&[]float32{}))
}

//export Slice_float32_len
func Slice_float32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float32(handle))
}

//export Slice_float32_elem
func Slice_float32_elem(handle CGoHandle, _idx int) C.float {
	s := deptrFromHandle_Slice_float32(handle)
	return C.float(s[_idx])
}

//export Slice_float32_subslice
func Slice_float32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float32(&ss))
}

//export Slice_float32_set
func Slice_float32_set(handle CGoHandle, _idx int, _vl C.float) {
	s := deptrFromHandle_Slice_float32(handle)
	s[_idx] = float32(_vl)
}

//export Slice_float32_append
func Slice_float32_append(handle CGoHandle, _vl C.float) {
	s := ptrFromHandle_Slice_float32(handle)
	*s = append(*s, float32(_vl))
}

// Converters for implicit pointer handles for type: []float64
func ptrFromHandle_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func deptrFromHandle_Slice_float64(h CGoHandle) []float64 {
	p := ptrFromHandle_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float64", p))
}

// --- wrapping slice: []float64 ---
//export Slice_float64_CTor
func Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float64(&[]float64{}))
}

//export Slice_float64_len
func Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float64(handle))
}

//export Slice_float64_elem
func Slice_float64_elem(handle CGoHandle, _idx int) C.double {
	s := deptrFromHandle_Slice_float64(handle)
	return C.double(s[_idx])
}

//export Slice_float64_subslice
func Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float64(&ss))
}

//export Slice_float64_set
func Slice_float64_set(handle CGoHandle, _idx int, _vl C.double) {
	s := deptrFromHandle_Slice_float64(handle)
	s[_idx] = float64(_vl)
}

//export Slice_float64_append
func Slice_float64_append(handle CGoHandle, _vl C.double) {
	s := ptrFromHandle_Slice_float64(handle)
	*s = append(*s, float64(_vl))
}

// Converters for implicit pointer handles for type: []int
func ptrFromHandle_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func deptrFromHandle_Slice_int(h CGoHandle) []int {
	p := ptrFromHandle_Slice_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int", p))
}

// --- wrapping slice: []int ---
//export Slice_int_CTor
func Slice_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int(&[]int{}))
}

//export Slice_int_len
func Slice_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int(handle))
}

//export Slice_int_elem
func Slice_int_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int(handle)
	return C.longlong(s[_idx])
}

//export Slice_int_subslice
func Slice_int_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int(&ss))
}

//export Slice_int_set
func Slice_int_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int(handle)
	s[_idx] = int(_vl)
}

//export Slice_int_append
func Slice_int_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int(handle)
	*s = append(*s, int(_vl))
}

// Converters for implicit pointer handles for type: []int16
func ptrFromHandle_Slice_int16(h CGoHandle) *[]int16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int16")
	if p == nil {
		return nil
	}
	return p.(*[]int16)
}
func deptrFromHandle_Slice_int16(h CGoHandle) []int16 {
	p := ptrFromHandle_Slice_int16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int16", p))
}

// --- wrapping slice: []int16 ---
//export Slice_int16_CTor
func Slice_int16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int16(&[]int16{}))
}

//export Slice_int16_len
func Slice_int16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int16(handle))
}

//export Slice_int16_elem
func Slice_int16_elem(handle CGoHandle, _idx int) C.short {
	s := deptrFromHandle_Slice_int16(handle)
	return C.short(s[_idx])
}

//export Slice_int16_subslice
func Slice_int16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int16(&ss))
}

//export Slice_int16_set
func Slice_int16_set(handle CGoHandle, _idx int, _vl C.short) {
	s := deptrFromHandle_Slice_int16(handle)
	s[_idx] = int16(_vl)
}

//export Slice_int16_append
func Slice_int16_append(handle CGoHandle, _vl C.short) {
	s := ptrFromHandle_Slice_int16(handle)
	*s = append(*s, int16(_vl))
}

// Converters for implicit pointer handles for type: []int32
func ptrFromHandle_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func deptrFromHandle_Slice_int32(h CGoHandle) []int32 {
	p := ptrFromHandle_Slice_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int32", p))
}

// --- wrapping slice: []int32 ---
//export Slice_int32_CTor
func Slice_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int32(&[]int32{}))
}

//export Slice_int32_len
func Slice_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int32(handle))
}

//export Slice_int32_elem
func Slice_int32_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_int32(handle)
	return C.long(s[_idx])
}

//export Slice_int32_subslice
func Slice_int32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int32(&ss))
}

//export Slice_int32_set
func Slice_int32_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_int32(handle)
	s[_idx] = int32(_vl)
}

//export Slice_int32_append
func Slice_int32_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_int32(handle)
	*s = append(*s, int32(_vl))
}

// Converters for implicit pointer handles for type: []int64
func ptrFromHandle_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func deptrFromHandle_Slice_int64(h CGoHandle) []int64 {
	p := ptrFromHandle_Slice_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int64", p))
}

// --- wrapping slice: []int64 ---
//export Slice_int64_CTor
func Slice_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int64(&[]int64{}))
}

//export Slice_int64_len
func Slice_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int64(handle))
}

//export Slice_int64_elem
func Slice_int64_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int64(handle)
	return C.longlong(s[_idx])
}

//export Slice_int64_subslice
func Slice_int64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int64(&ss))
}

//export Slice_int64_set
func Slice_int64_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int64(handle)
	s[_idx] = int64(_vl)
}

//export Slice_int64_append
func Slice_int64_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int64(handle)
	*s = append(*s, int64(_vl))
}

// Converters for implicit pointer handles for type: []int8
func ptrFromHandle_Slice_int8(h CGoHandle) *[]int8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int8")
	if p == nil {
		return nil
	}
	return p.(*[]int8)
}
func deptrFromHandle_Slice_int8(h CGoHandle) []int8 {
	p := ptrFromHandle_Slice_int8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int8", p))
}

// --- wrapping slice: []int8 ---
//export Slice_int8_CTor
func Slice_int8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int8(&[]int8{}))
}

//export Slice_int8_len
func Slice_int8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int8(handle))
}

//export Slice_int8_elem
func Slice_int8_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_int8(handle)
	return C.char(s[_idx])
}

//export Slice_int8_subslice
func Slice_int8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int8(&ss))
}

//export Slice_int8_set
func Slice_int8_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_int8(handle)
	s[_idx] = int8(_vl)
}

//export Slice_int8_append
func Slice_int8_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_int8(handle)
	*s = append(*s, int8(_vl))
}

// Converters for implicit pointer handles for type: []rune
func ptrFromHandle_Slice_rune(h CGoHandle) *[]rune {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]rune")
	if p == nil {
		return nil
	}
	return p.(*[]rune)
}
func deptrFromHandle_Slice_rune(h CGoHandle) []rune {
	p := ptrFromHandle_Slice_rune(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_rune(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]rune", p))
}

// --- wrapping slice: []rune ---
//export Slice_rune_CTor
func Slice_rune_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_rune(&[]rune{}))
}

//export Slice_rune_len
func Slice_rune_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_rune(handle))
}

//export Slice_rune_elem
func Slice_rune_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_rune(handle)
	return C.long(s[_idx])
}

//export Slice_rune_subslice
func Slice_rune_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_rune(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_rune(&ss))
}

//export Slice_rune_set
func Slice_rune_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_rune(handle)
	s[_idx] = rune(_vl)
}

//export Slice_rune_append
func Slice_rune_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_rune(handle)
	*s = append(*s, rune(_vl))
}

// Converters for implicit pointer handles for type: []string
func ptrFromHandle_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func deptrFromHandle_Slice_string(h CGoHandle) []string {
	p := ptrFromHandle_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]string", p))
}

// --- wrapping slice: []string ---
//export Slice_string_CTor
func Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_string(&[]string{}))
}

//export Slice_string_len
func Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_string(handle))
}

//export Slice_string_elem
func Slice_string_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_string(handle)
	return C.CString(s[_idx])
}

//export Slice_string_subslice
func Slice_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_string(&ss))
}

//export Slice_string_set
func Slice_string_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_string(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_string_append
func Slice_string_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_string(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []uint
func ptrFromHandle_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func deptrFromHandle_Slice_uint(h CGoHandle) []uint {
	p := ptrFromHandle_Slice_uint(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint", p))
}

// --- wrapping slice: []uint ---
//export Slice_uint_CTor
func Slice_uint_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint(&[]uint{}))
}

//export Slice_uint_len
func Slice_uint_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint(handle))
}

//export Slice_uint_elem
func Slice_uint_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint_subslice
func Slice_uint_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint(&ss))
}

//export Slice_uint_set
func Slice_uint_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint(handle)
	s[_idx] = uint(_vl)
}

//export Slice_uint_append
func Slice_uint_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint(handle)
	*s = append(*s, uint(_vl))
}

// Converters for implicit pointer handles for type: []uint16
func ptrFromHandle_Slice_uint16(h CGoHandle) *[]uint16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint16")
	if p == nil {
		return nil
	}
	return p.(*[]uint16)
}
func deptrFromHandle_Slice_uint16(h CGoHandle) []uint16 {
	p := ptrFromHandle_Slice_uint16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint16", p))
}

// --- wrapping slice: []uint16 ---
//export Slice_uint16_CTor
func Slice_uint16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint16(&[]uint16{}))
}

//export Slice_uint16_len
func Slice_uint16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint16(handle))
}

//export Slice_uint16_elem
func Slice_uint16_elem(handle CGoHandle, _idx int) C.ushort {
	s := deptrFromHandle_Slice_uint16(handle)
	return C.ushort(s[_idx])
}

//export Slice_uint16_subslice
func Slice_uint16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint16(&ss))
}

//export Slice_uint16_set
func Slice_uint16_set(handle CGoHandle, _idx int, _vl C.ushort) {
	s := deptrFromHandle_Slice_uint16(handle)
	s[_idx] = uint16(_vl)
}

//export Slice_uint16_append
func Slice_uint16_append(handle CGoHandle, _vl C.ushort) {
	s := ptrFromHandle_Slice_uint16(handle)
	*s = append(*s, uint16(_vl))
}

// Converters for implicit pointer handles for type: []uint32
func ptrFromHandle_Slice_uint32(h CGoHandle) *[]uint32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint32")
	if p == nil {
		return nil
	}
	return p.(*[]uint32)
}
func deptrFromHandle_Slice_uint32(h CGoHandle) []uint32 {
	p := ptrFromHandle_Slice_uint32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint32", p))
}

// --- wrapping slice: []uint32 ---
//export Slice_uint32_CTor
func Slice_uint32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint32(&[]uint32{}))
}

//export Slice_uint32_len
func Slice_uint32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint32(handle))
}

//export Slice_uint32_elem
func Slice_uint32_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_uint32(handle)
	return C.ulong(s[_idx])
}

//export Slice_uint32_subslice
func Slice_uint32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint32(&ss))
}

//export Slice_uint32_set
func Slice_uint32_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_uint32(handle)
	s[_idx] = uint32(_vl)
}

//export Slice_uint32_append
func Slice_uint32_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_uint32(handle)
	*s = append(*s, uint32(_vl))
}

// Converters for implicit pointer handles for type: []uint64
func ptrFromHandle_Slice_uint64(h CGoHandle) *[]uint64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint64")
	if p == nil {
		return nil
	}
	return p.(*[]uint64)
}
func deptrFromHandle_Slice_uint64(h CGoHandle) []uint64 {
	p := ptrFromHandle_Slice_uint64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint64", p))
}

// --- wrapping slice: []uint64 ---
//export Slice_uint64_CTor
func Slice_uint64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint64(&[]uint64{}))
}

//export Slice_uint64_len
func Slice_uint64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint64(handle))
}

//export Slice_uint64_elem
func Slice_uint64_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint64(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint64_subslice
func Slice_uint64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint64(&ss))
}

//export Slice_uint64_set
func Slice_uint64_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint64(handle)
	s[_idx] = uint64(_vl)
}

//export Slice_uint64_append
func Slice_uint64_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint64(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for implicit pointer handles for type: []uint8
func ptrFromHandle_Slice_uint8(h CGoHandle) *[]uint8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint8")
	if p == nil {
		return nil
	}
	return p.(*[]uint8)
}
func deptrFromHandle_Slice_uint8(h CGoHandle) []uint8 {
	p := ptrFromHandle_Slice_uint8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint8", p))
}

// --- wrapping slice: []uint8 ---
//export Slice_uint8_CTor
func Slice_uint8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint8(&[]uint8{}))
}

//export Slice_uint8_len
func Slice_uint8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint8(handle))
}

//export Slice_uint8_elem
func Slice_uint8_elem(handle CGoHandle, _idx int) C.uchar {
	s := deptrFromHandle_Slice_uint8(handle)
	return C.uchar(s[_idx])
}

//export Slice_uint8_subslice
func Slice_uint8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint8(&ss))
}

//export Slice_uint8_set
func Slice_uint8_set(handle CGoHandle, _idx int, _vl C.uchar) {
	s := deptrFromHandle_Slice_uint8(handle)
	s[_idx] = uint8(_vl)
}

//export Slice_uint8_append
func Slice_uint8_append(handle CGoHandle, _vl C.uchar) {
	s := ptrFromHandle_Slice_uint8(handle)
	*s = append(*s, uint8(_vl))
}

// ---- Package: OPQBot ---

// ---- Types ---

// Converters for pointer handles for type: *OPQBot.AtMsg
func ptrFromHandle_Ptr_OPQBot_AtMsg(h CGoHandle) *OPQBot.AtMsg {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.AtMsg")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.AtMsg{})).(*OPQBot.AtMsg)
}
func handleFromPtr_Ptr_OPQBot_AtMsg(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.AtMsg", p))
}

// Converters for pointer handles for type: *OPQBot.BotManager
func ptrFromHandle_Ptr_OPQBot_BotManager(h CGoHandle) *OPQBot.BotManager {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.BotManager")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager)
}
func handleFromPtr_Ptr_OPQBot_BotManager(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.BotManager", p))
}

// Converters for pointer handles for type: *OPQBot.Context
func ptrFromHandle_Ptr_OPQBot_Context(h CGoHandle) *OPQBot.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.Context")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Context{})).(*OPQBot.Context)
}
func handleFromPtr_Ptr_OPQBot_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.Context", p))
}

// Converters for pointer handles for type: *OPQBot.Cookie
func ptrFromHandle_Ptr_OPQBot_Cookie(h CGoHandle) *OPQBot.Cookie {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.Cookie")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Cookie{})).(*OPQBot.Cookie)
}
func handleFromPtr_Ptr_OPQBot_Cookie(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.Cookie", p))
}

// Converters for pointer handles for type: *OPQBot.FriendFileResult
func ptrFromHandle_Ptr_OPQBot_FriendFileResult(h CGoHandle) *OPQBot.FriendFileResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.FriendFileResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.FriendFileResult{})).(*OPQBot.FriendFileResult)
}
func handleFromPtr_Ptr_OPQBot_FriendFileResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.FriendFileResult", p))
}

// Converters for pointer handles for type: *OPQBot.FriendList
func ptrFromHandle_Ptr_OPQBot_FriendList(h CGoHandle) *OPQBot.FriendList {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.FriendList")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.FriendList{})).(*OPQBot.FriendList)
}
func handleFromPtr_Ptr_OPQBot_FriendList(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.FriendList", p))
}

// Converters for pointer handles for type: *OPQBot.FriendMsgPack
func ptrFromHandle_Ptr_OPQBot_FriendMsgPack(h CGoHandle) *OPQBot.FriendMsgPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.FriendMsgPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.FriendMsgPack{})).(*OPQBot.FriendMsgPack)
}
func handleFromPtr_Ptr_OPQBot_FriendMsgPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.FriendMsgPack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupAdminPack
func ptrFromHandle_Ptr_OPQBot_GroupAdminPack(h CGoHandle) *OPQBot.GroupAdminPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupAdminPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupAdminPack{})).(*OPQBot.GroupAdminPack)
}
func handleFromPtr_Ptr_OPQBot_GroupAdminPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupAdminPack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupAdminSysNotifyPack
func ptrFromHandle_Ptr_OPQBot_GroupAdminSysNotifyPack(h CGoHandle) *OPQBot.GroupAdminSysNotifyPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupAdminSysNotifyPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupAdminSysNotifyPack{})).(*OPQBot.GroupAdminSysNotifyPack)
}
func handleFromPtr_Ptr_OPQBot_GroupAdminSysNotifyPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupAdminSysNotifyPack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupExitPack
func ptrFromHandle_Ptr_OPQBot_GroupExitPack(h CGoHandle) *OPQBot.GroupExitPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupExitPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupExitPack{})).(*OPQBot.GroupExitPack)
}
func handleFromPtr_Ptr_OPQBot_GroupExitPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupExitPack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupExitSuccessPack
func ptrFromHandle_Ptr_OPQBot_GroupExitSuccessPack(h CGoHandle) *OPQBot.GroupExitSuccessPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupExitSuccessPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupExitSuccessPack{})).(*OPQBot.GroupExitSuccessPack)
}
func handleFromPtr_Ptr_OPQBot_GroupExitSuccessPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupExitSuccessPack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupFileMsg
func ptrFromHandle_Ptr_OPQBot_GroupFileMsg(h CGoHandle) *OPQBot.GroupFileMsg {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupFileMsg")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupFileMsg{})).(*OPQBot.GroupFileMsg)
}
func handleFromPtr_Ptr_OPQBot_GroupFileMsg(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupFileMsg", p))
}

// Converters for pointer handles for type: *OPQBot.GroupFileResult
func ptrFromHandle_Ptr_OPQBot_GroupFileResult(h CGoHandle) *OPQBot.GroupFileResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupFileResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupFileResult{})).(*OPQBot.GroupFileResult)
}
func handleFromPtr_Ptr_OPQBot_GroupFileResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupFileResult", p))
}

// Converters for pointer handles for type: *OPQBot.GroupJoinPack
func ptrFromHandle_Ptr_OPQBot_GroupJoinPack(h CGoHandle) *OPQBot.GroupJoinPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupJoinPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupJoinPack{})).(*OPQBot.GroupJoinPack)
}
func handleFromPtr_Ptr_OPQBot_GroupJoinPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupJoinPack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupList
func ptrFromHandle_Ptr_OPQBot_GroupList(h CGoHandle) *OPQBot.GroupList {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupList")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupList{})).(*OPQBot.GroupList)
}
func handleFromPtr_Ptr_OPQBot_GroupList(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupList", p))
}

// Converters for pointer handles for type: *OPQBot.GroupMemberList
func ptrFromHandle_Ptr_OPQBot_GroupMemberList(h CGoHandle) *OPQBot.GroupMemberList {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupMemberList")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupMemberList{})).(*OPQBot.GroupMemberList)
}
func handleFromPtr_Ptr_OPQBot_GroupMemberList(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupMemberList", p))
}

// Converters for pointer handles for type: *OPQBot.GroupMsgPack
func ptrFromHandle_Ptr_OPQBot_GroupMsgPack(h CGoHandle) *OPQBot.GroupMsgPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupMsgPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupMsgPack{})).(*OPQBot.GroupMsgPack)
}
func handleFromPtr_Ptr_OPQBot_GroupMsgPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupMsgPack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupRevokePack
func ptrFromHandle_Ptr_OPQBot_GroupRevokePack(h CGoHandle) *OPQBot.GroupRevokePack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupRevokePack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupRevokePack{})).(*OPQBot.GroupRevokePack)
}
func handleFromPtr_Ptr_OPQBot_GroupRevokePack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupRevokePack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupShutPack
func ptrFromHandle_Ptr_OPQBot_GroupShutPack(h CGoHandle) *OPQBot.GroupShutPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupShutPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupShutPack{})).(*OPQBot.GroupShutPack)
}
func handleFromPtr_Ptr_OPQBot_GroupShutPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupShutPack", p))
}

// Converters for pointer handles for type: *OPQBot.GroupSystemNotifyPack
func ptrFromHandle_Ptr_OPQBot_GroupSystemNotifyPack(h CGoHandle) *OPQBot.GroupSystemNotifyPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.GroupSystemNotifyPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupSystemNotifyPack{})).(*OPQBot.GroupSystemNotifyPack)
}
func handleFromPtr_Ptr_OPQBot_GroupSystemNotifyPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.GroupSystemNotifyPack", p))
}

// Converters for pointer handles for type: *OPQBot.MyRecord
func ptrFromHandle_Ptr_OPQBot_MyRecord(h CGoHandle) *OPQBot.MyRecord {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.MyRecord")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.MyRecord{})).(*OPQBot.MyRecord)
}
func handleFromPtr_Ptr_OPQBot_MyRecord(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.MyRecord", p))
}

// Converters for pointer handles for type: *OPQBot.PicMsg
func ptrFromHandle_Ptr_OPQBot_PicMsg(h CGoHandle) *OPQBot.PicMsg {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.PicMsg")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.PicMsg{})).(*OPQBot.PicMsg)
}
func handleFromPtr_Ptr_OPQBot_PicMsg(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.PicMsg", p))
}

// Converters for pointer handles for type: *OPQBot.Reply
func ptrFromHandle_Ptr_OPQBot_Reply(h CGoHandle) *OPQBot.Reply {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.Reply")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Reply{})).(*OPQBot.Reply)
}
func handleFromPtr_Ptr_OPQBot_Reply(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.Reply", p))
}

// Converters for pointer handles for type: *OPQBot.Result
func ptrFromHandle_Ptr_OPQBot_Result(h CGoHandle) *OPQBot.Result {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.Result")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Result{})).(*OPQBot.Result)
}
func handleFromPtr_Ptr_OPQBot_Result(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.Result", p))
}

// Converters for pointer handles for type: *OPQBot.SendMsgPack
func ptrFromHandle_Ptr_OPQBot_SendMsgPack(h CGoHandle) *OPQBot.SendMsgPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendMsgPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendMsgPack{})).(*OPQBot.SendMsgPack)
}
func handleFromPtr_Ptr_OPQBot_SendMsgPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendMsgPack", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeForwordContent
func ptrFromHandle_Ptr_OPQBot_SendTypeForwordContent(h CGoHandle) *OPQBot.SendTypeForwordContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeForwordContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeForwordContent{})).(*OPQBot.SendTypeForwordContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypeForwordContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeForwordContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeForwordContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypeForwordContentPrivateChat(h CGoHandle) *OPQBot.SendTypeForwordContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeForwordContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeForwordContentPrivateChat{})).(*OPQBot.SendTypeForwordContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypeForwordContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeForwordContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeJsonContent
func ptrFromHandle_Ptr_OPQBot_SendTypeJsonContent(h CGoHandle) *OPQBot.SendTypeJsonContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeJsonContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeJsonContent{})).(*OPQBot.SendTypeJsonContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypeJsonContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeJsonContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeJsonContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypeJsonContentPrivateChat(h CGoHandle) *OPQBot.SendTypeJsonContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeJsonContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeJsonContentPrivateChat{})).(*OPQBot.SendTypeJsonContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypeJsonContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeJsonContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypePicMsgByBase64Content
func ptrFromHandle_Ptr_OPQBot_SendTypePicMsgByBase64Content(h CGoHandle) *OPQBot.SendTypePicMsgByBase64Content {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypePicMsgByBase64Content")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByBase64Content{})).(*OPQBot.SendTypePicMsgByBase64Content)
}
func handleFromPtr_Ptr_OPQBot_SendTypePicMsgByBase64Content(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypePicMsgByBase64Content", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypePicMsgByBase64ContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(h CGoHandle) *OPQBot.SendTypePicMsgByBase64ContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypePicMsgByBase64ContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByBase64ContentPrivateChat{})).(*OPQBot.SendTypePicMsgByBase64ContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypePicMsgByBase64ContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypePicMsgByLocalContent
func ptrFromHandle_Ptr_OPQBot_SendTypePicMsgByLocalContent(h CGoHandle) *OPQBot.SendTypePicMsgByLocalContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypePicMsgByLocalContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByLocalContent{})).(*OPQBot.SendTypePicMsgByLocalContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypePicMsgByLocalContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypePicMsgByLocalContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypePicMsgByLocalContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypePicMsgByLocalContentPrivateChat(h CGoHandle) *OPQBot.SendTypePicMsgByLocalContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypePicMsgByLocalContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByLocalContentPrivateChat{})).(*OPQBot.SendTypePicMsgByLocalContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypePicMsgByLocalContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypePicMsgByLocalContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypePicMsgByMd5Content
func ptrFromHandle_Ptr_OPQBot_SendTypePicMsgByMd5Content(h CGoHandle) *OPQBot.SendTypePicMsgByMd5Content {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypePicMsgByMd5Content")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByMd5Content{})).(*OPQBot.SendTypePicMsgByMd5Content)
}
func handleFromPtr_Ptr_OPQBot_SendTypePicMsgByMd5Content(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypePicMsgByMd5Content", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypePicMsgByMd5ContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(h CGoHandle) *OPQBot.SendTypePicMsgByMd5ContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypePicMsgByMd5ContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByMd5ContentPrivateChat{})).(*OPQBot.SendTypePicMsgByMd5ContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypePicMsgByMd5ContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypePicMsgByUrlContent
func ptrFromHandle_Ptr_OPQBot_SendTypePicMsgByUrlContent(h CGoHandle) *OPQBot.SendTypePicMsgByUrlContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypePicMsgByUrlContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByUrlContent{})).(*OPQBot.SendTypePicMsgByUrlContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypePicMsgByUrlContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypePicMsgByUrlContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypePicMsgByUrlContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypePicMsgByUrlContentPrivateChat(h CGoHandle) *OPQBot.SendTypePicMsgByUrlContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypePicMsgByUrlContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByUrlContentPrivateChat{})).(*OPQBot.SendTypePicMsgByUrlContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypePicMsgByUrlContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypePicMsgByUrlContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeReplyContent
func ptrFromHandle_Ptr_OPQBot_SendTypeReplyContent(h CGoHandle) *OPQBot.SendTypeReplyContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeReplyContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeReplyContent{})).(*OPQBot.SendTypeReplyContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypeReplyContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeReplyContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeReplyContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypeReplyContentPrivateChat(h CGoHandle) *OPQBot.SendTypeReplyContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeReplyContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeReplyContentPrivateChat{})).(*OPQBot.SendTypeReplyContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypeReplyContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeReplyContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeTextMsgContent
func ptrFromHandle_Ptr_OPQBot_SendTypeTextMsgContent(h CGoHandle) *OPQBot.SendTypeTextMsgContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeTextMsgContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeTextMsgContent{})).(*OPQBot.SendTypeTextMsgContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypeTextMsgContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeTextMsgContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeTextMsgContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypeTextMsgContentPrivateChat(h CGoHandle) *OPQBot.SendTypeTextMsgContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeTextMsgContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeTextMsgContentPrivateChat{})).(*OPQBot.SendTypeTextMsgContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypeTextMsgContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeTextMsgContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeVoiceByLocalContent
func ptrFromHandle_Ptr_OPQBot_SendTypeVoiceByLocalContent(h CGoHandle) *OPQBot.SendTypeVoiceByLocalContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeVoiceByLocalContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeVoiceByLocalContent{})).(*OPQBot.SendTypeVoiceByLocalContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypeVoiceByLocalContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeVoiceByLocalContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeVoiceByLocalContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypeVoiceByLocalContentPrivateChat(h CGoHandle) *OPQBot.SendTypeVoiceByLocalContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeVoiceByLocalContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeVoiceByLocalContentPrivateChat{})).(*OPQBot.SendTypeVoiceByLocalContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypeVoiceByLocalContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeVoiceByLocalContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeVoiceByUrlContent
func ptrFromHandle_Ptr_OPQBot_SendTypeVoiceByUrlContent(h CGoHandle) *OPQBot.SendTypeVoiceByUrlContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeVoiceByUrlContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeVoiceByUrlContent{})).(*OPQBot.SendTypeVoiceByUrlContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypeVoiceByUrlContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeVoiceByUrlContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeVoiceByUrlContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypeVoiceByUrlContentPrivateChat(h CGoHandle) *OPQBot.SendTypeVoiceByUrlContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeVoiceByUrlContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeVoiceByUrlContentPrivateChat{})).(*OPQBot.SendTypeVoiceByUrlContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypeVoiceByUrlContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeVoiceByUrlContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeXmlContent
func ptrFromHandle_Ptr_OPQBot_SendTypeXmlContent(h CGoHandle) *OPQBot.SendTypeXmlContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeXmlContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeXmlContent{})).(*OPQBot.SendTypeXmlContent)
}
func handleFromPtr_Ptr_OPQBot_SendTypeXmlContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeXmlContent", p))
}

// Converters for pointer handles for type: *OPQBot.SendTypeXmlContentPrivateChat
func ptrFromHandle_Ptr_OPQBot_SendTypeXmlContentPrivateChat(h CGoHandle) *OPQBot.SendTypeXmlContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.SendTypeXmlContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeXmlContentPrivateChat{})).(*OPQBot.SendTypeXmlContentPrivateChat)
}
func handleFromPtr_Ptr_OPQBot_SendTypeXmlContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.SendTypeXmlContentPrivateChat", p))
}

// Converters for pointer handles for type: *OPQBot.UserCardInfo
func ptrFromHandle_Ptr_OPQBot_UserCardInfo(h CGoHandle) *OPQBot.UserCardInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.UserCardInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.UserCardInfo{})).(*OPQBot.UserCardInfo)
}
func handleFromPtr_Ptr_OPQBot_UserCardInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.UserCardInfo", p))
}

// Converters for pointer handles for type: *OPQBot.UserInfo
func ptrFromHandle_Ptr_OPQBot_UserInfo(h CGoHandle) *OPQBot.UserInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.UserInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.UserInfo{})).(*OPQBot.UserInfo)
}
func handleFromPtr_Ptr_OPQBot_UserInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.UserInfo", p))
}

// Converters for pointer handles for type: *OPQBot.VideoMsg
func ptrFromHandle_Ptr_OPQBot_VideoMsg(h CGoHandle) *OPQBot.VideoMsg {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*OPQBot.VideoMsg")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.VideoMsg{})).(*OPQBot.VideoMsg)
}
func handleFromPtr_Ptr_OPQBot_VideoMsg(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*OPQBot.VideoMsg", p))
}

// Converters for implicit pointer handles for type: []logrus.Hook
func ptrFromHandle_Slice_logrus_Hook(h CGoHandle) *[]logrus.Hook {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]logrus.Hook")
	if p == nil {
		return nil
	}
	return p.(*[]logrus.Hook)
}
func deptrFromHandle_Slice_logrus_Hook(h CGoHandle) []logrus.Hook {
	p := ptrFromHandle_Slice_logrus_Hook(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_logrus_Hook(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]logrus.Hook", p))
}

// --- wrapping slice: []logrus.Hook ---
//export Slice_logrus_Hook_CTor
func Slice_logrus_Hook_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_logrus_Hook(&[]logrus.Hook{}))
}

//export Slice_logrus_Hook_len
func Slice_logrus_Hook_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_logrus_Hook(handle))
}

//export Slice_logrus_Hook_elem
func Slice_logrus_Hook_elem(handle CGoHandle, _idx int) CGoHandle {
	s := deptrFromHandle_Slice_logrus_Hook(handle)
	return handleFromPtr_logrus_Hook(s[_idx])
}

//export Slice_logrus_Hook_subslice
func Slice_logrus_Hook_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_logrus_Hook(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_logrus_Hook(&ss))
}

//export Slice_logrus_Hook_set
func Slice_logrus_Hook_set(handle CGoHandle, _idx int, _vl CGoHandle) {
	s := deptrFromHandle_Slice_logrus_Hook(handle)
	s[_idx] = ptrFromHandle_logrus_Hook(_vl)
}

//export Slice_logrus_Hook_append
func Slice_logrus_Hook_append(handle CGoHandle, _vl CGoHandle) {
	s := ptrFromHandle_Slice_logrus_Hook(handle)
	*s = append(*s, ptrFromHandle_logrus_Hook(_vl))
}

// Converters for implicit pointer handles for type: []logrus.Level
func ptrFromHandle_Slice_logrus_Level(h CGoHandle) *[]logrus.Level {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]logrus.Level")
	if p == nil {
		return nil
	}
	return p.(*[]logrus.Level)
}
func deptrFromHandle_Slice_logrus_Level(h CGoHandle) []logrus.Level {
	p := ptrFromHandle_Slice_logrus_Level(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_logrus_Level(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]logrus.Level", p))
}

// --- wrapping slice: []logrus.Level ---
//export Slice_logrus_Level_CTor
func Slice_logrus_Level_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_logrus_Level(&[]logrus.Level{}))
}

//export Slice_logrus_Level_len
func Slice_logrus_Level_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_logrus_Level(handle))
}

//export Slice_logrus_Level_elem
func Slice_logrus_Level_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_logrus_Level(handle)
	return C.ulong(uint32(s[_idx]))
}

//export Slice_logrus_Level_subslice
func Slice_logrus_Level_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_logrus_Level(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_logrus_Level(&ss))
}

//export Slice_logrus_Level_set
func Slice_logrus_Level_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_logrus_Level(handle)
	s[_idx] = logrus.Level(uint32(_vl))
}

//export Slice_logrus_Level_append
func Slice_logrus_Level_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_logrus_Level(handle)
	*s = append(*s, logrus.Level(uint32(_vl)))
}

// Converters for implicit pointer handles for type: []interface{}
func ptrFromHandle_Slice_interface_(h CGoHandle) *[]interface{} {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]interface{}")
	if p == nil {
		return nil
	}
	return p.(*[]interface{})
}
func deptrFromHandle_Slice_interface_(h CGoHandle) []interface{} {
	p := ptrFromHandle_Slice_interface_(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_interface_(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]interface{}", p))
}

// --- wrapping slice: []interface{} ---
//export Slice_interface__CTor
func Slice_interface__CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_interface_(&[]interface{}{}))
}

//export Slice_interface__len
func Slice_interface__len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_interface_(handle))
}

//export Slice_interface__elem
func Slice_interface__elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_interface_(handle)
	return C.CString(fmt.Sprintf("%s", (s[_idx])))
}

//export Slice_interface__subslice
func Slice_interface__subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_interface_(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_interface_(&ss))
}

//export Slice_interface__set
func Slice_interface__set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_interface_(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_interface__append
func Slice_interface__append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_interface_(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for non-pointer handles for type: OPQBot.AtMsg
func ptrFromHandle_OPQBot_AtMsg(h CGoHandle) *OPQBot.AtMsg {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.AtMsg")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.AtMsg{})).(*OPQBot.AtMsg)
}
func handleFromPtr_OPQBot_AtMsg(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.AtMsg", p))
}

// Converters for non-pointer handles for type: OPQBot.BotManager
func ptrFromHandle_OPQBot_BotManager(h CGoHandle) *OPQBot.BotManager {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.BotManager")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager)
}
func handleFromPtr_OPQBot_BotManager(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.BotManager", p))
}

// Converters for non-pointer handles for type: OPQBot.Context
func ptrFromHandle_OPQBot_Context(h CGoHandle) *OPQBot.Context {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.Context")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Context{})).(*OPQBot.Context)
}
func handleFromPtr_OPQBot_Context(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.Context", p))
}

// Converters for non-pointer handles for type: OPQBot.Cookie
func ptrFromHandle_OPQBot_Cookie(h CGoHandle) *OPQBot.Cookie {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.Cookie")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Cookie{})).(*OPQBot.Cookie)
}
func handleFromPtr_OPQBot_Cookie(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.Cookie", p))
}

// Converters for non-pointer handles for type: OPQBot.FriendFileResult
func ptrFromHandle_OPQBot_FriendFileResult(h CGoHandle) *OPQBot.FriendFileResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.FriendFileResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.FriendFileResult{})).(*OPQBot.FriendFileResult)
}
func handleFromPtr_OPQBot_FriendFileResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.FriendFileResult", p))
}

// Converters for non-pointer handles for type: OPQBot.FriendList
func ptrFromHandle_OPQBot_FriendList(h CGoHandle) *OPQBot.FriendList {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.FriendList")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.FriendList{})).(*OPQBot.FriendList)
}
func handleFromPtr_OPQBot_FriendList(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.FriendList", p))
}

// Converters for non-pointer handles for type: OPQBot.FriendMsgPack
func ptrFromHandle_OPQBot_FriendMsgPack(h CGoHandle) *OPQBot.FriendMsgPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.FriendMsgPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.FriendMsgPack{})).(*OPQBot.FriendMsgPack)
}
func handleFromPtr_OPQBot_FriendMsgPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.FriendMsgPack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupAdminPack
func ptrFromHandle_OPQBot_GroupAdminPack(h CGoHandle) *OPQBot.GroupAdminPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupAdminPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupAdminPack{})).(*OPQBot.GroupAdminPack)
}
func handleFromPtr_OPQBot_GroupAdminPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupAdminPack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupAdminSysNotifyPack
func ptrFromHandle_OPQBot_GroupAdminSysNotifyPack(h CGoHandle) *OPQBot.GroupAdminSysNotifyPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupAdminSysNotifyPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupAdminSysNotifyPack{})).(*OPQBot.GroupAdminSysNotifyPack)
}
func handleFromPtr_OPQBot_GroupAdminSysNotifyPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupAdminSysNotifyPack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupExitPack
func ptrFromHandle_OPQBot_GroupExitPack(h CGoHandle) *OPQBot.GroupExitPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupExitPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupExitPack{})).(*OPQBot.GroupExitPack)
}
func handleFromPtr_OPQBot_GroupExitPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupExitPack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupExitSuccessPack
func ptrFromHandle_OPQBot_GroupExitSuccessPack(h CGoHandle) *OPQBot.GroupExitSuccessPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupExitSuccessPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupExitSuccessPack{})).(*OPQBot.GroupExitSuccessPack)
}
func handleFromPtr_OPQBot_GroupExitSuccessPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupExitSuccessPack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupFileMsg
func ptrFromHandle_OPQBot_GroupFileMsg(h CGoHandle) *OPQBot.GroupFileMsg {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupFileMsg")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupFileMsg{})).(*OPQBot.GroupFileMsg)
}
func handleFromPtr_OPQBot_GroupFileMsg(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupFileMsg", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupFileResult
func ptrFromHandle_OPQBot_GroupFileResult(h CGoHandle) *OPQBot.GroupFileResult {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupFileResult")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupFileResult{})).(*OPQBot.GroupFileResult)
}
func handleFromPtr_OPQBot_GroupFileResult(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupFileResult", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupJoinPack
func ptrFromHandle_OPQBot_GroupJoinPack(h CGoHandle) *OPQBot.GroupJoinPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupJoinPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupJoinPack{})).(*OPQBot.GroupJoinPack)
}
func handleFromPtr_OPQBot_GroupJoinPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupJoinPack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupList
func ptrFromHandle_OPQBot_GroupList(h CGoHandle) *OPQBot.GroupList {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupList")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupList{})).(*OPQBot.GroupList)
}
func handleFromPtr_OPQBot_GroupList(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupList", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupMemberList
func ptrFromHandle_OPQBot_GroupMemberList(h CGoHandle) *OPQBot.GroupMemberList {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupMemberList")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupMemberList{})).(*OPQBot.GroupMemberList)
}
func handleFromPtr_OPQBot_GroupMemberList(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupMemberList", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupMsgPack
func ptrFromHandle_OPQBot_GroupMsgPack(h CGoHandle) *OPQBot.GroupMsgPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupMsgPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupMsgPack{})).(*OPQBot.GroupMsgPack)
}
func handleFromPtr_OPQBot_GroupMsgPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupMsgPack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupRevokePack
func ptrFromHandle_OPQBot_GroupRevokePack(h CGoHandle) *OPQBot.GroupRevokePack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupRevokePack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupRevokePack{})).(*OPQBot.GroupRevokePack)
}
func handleFromPtr_OPQBot_GroupRevokePack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupRevokePack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupShutPack
func ptrFromHandle_OPQBot_GroupShutPack(h CGoHandle) *OPQBot.GroupShutPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupShutPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupShutPack{})).(*OPQBot.GroupShutPack)
}
func handleFromPtr_OPQBot_GroupShutPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupShutPack", p))
}

// Converters for non-pointer handles for type: OPQBot.GroupSystemNotifyPack
func ptrFromHandle_OPQBot_GroupSystemNotifyPack(h CGoHandle) *OPQBot.GroupSystemNotifyPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.GroupSystemNotifyPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.GroupSystemNotifyPack{})).(*OPQBot.GroupSystemNotifyPack)
}
func handleFromPtr_OPQBot_GroupSystemNotifyPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.GroupSystemNotifyPack", p))
}

// Converters for non-pointer handles for type: OPQBot.MyRecord
func ptrFromHandle_OPQBot_MyRecord(h CGoHandle) *OPQBot.MyRecord {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.MyRecord")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.MyRecord{})).(*OPQBot.MyRecord)
}
func handleFromPtr_OPQBot_MyRecord(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.MyRecord", p))
}

// Converters for non-pointer handles for type: OPQBot.PicMsg
func ptrFromHandle_OPQBot_PicMsg(h CGoHandle) *OPQBot.PicMsg {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.PicMsg")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.PicMsg{})).(*OPQBot.PicMsg)
}
func handleFromPtr_OPQBot_PicMsg(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.PicMsg", p))
}

// Converters for non-pointer handles for type: OPQBot.Reply
func ptrFromHandle_OPQBot_Reply(h CGoHandle) *OPQBot.Reply {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.Reply")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Reply{})).(*OPQBot.Reply)
}
func handleFromPtr_OPQBot_Reply(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.Reply", p))
}

// Converters for non-pointer handles for type: OPQBot.Result
func ptrFromHandle_OPQBot_Result(h CGoHandle) *OPQBot.Result {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.Result")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.Result{})).(*OPQBot.Result)
}
func handleFromPtr_OPQBot_Result(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.Result", p))
}

// Converters for non-pointer handles for type: OPQBot.SendMsgPack
func ptrFromHandle_OPQBot_SendMsgPack(h CGoHandle) *OPQBot.SendMsgPack {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendMsgPack")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendMsgPack{})).(*OPQBot.SendMsgPack)
}
func handleFromPtr_OPQBot_SendMsgPack(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendMsgPack", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeForwordContent
func ptrFromHandle_OPQBot_SendTypeForwordContent(h CGoHandle) *OPQBot.SendTypeForwordContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeForwordContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeForwordContent{})).(*OPQBot.SendTypeForwordContent)
}
func handleFromPtr_OPQBot_SendTypeForwordContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeForwordContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeForwordContentPrivateChat
func ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(h CGoHandle) *OPQBot.SendTypeForwordContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeForwordContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeForwordContentPrivateChat{})).(*OPQBot.SendTypeForwordContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypeForwordContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeForwordContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeJsonContent
func ptrFromHandle_OPQBot_SendTypeJsonContent(h CGoHandle) *OPQBot.SendTypeJsonContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeJsonContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeJsonContent{})).(*OPQBot.SendTypeJsonContent)
}
func handleFromPtr_OPQBot_SendTypeJsonContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeJsonContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeJsonContentPrivateChat
func ptrFromHandle_OPQBot_SendTypeJsonContentPrivateChat(h CGoHandle) *OPQBot.SendTypeJsonContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeJsonContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeJsonContentPrivateChat{})).(*OPQBot.SendTypeJsonContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypeJsonContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeJsonContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypePicMsgByBase64Content
func ptrFromHandle_OPQBot_SendTypePicMsgByBase64Content(h CGoHandle) *OPQBot.SendTypePicMsgByBase64Content {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypePicMsgByBase64Content")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByBase64Content{})).(*OPQBot.SendTypePicMsgByBase64Content)
}
func handleFromPtr_OPQBot_SendTypePicMsgByBase64Content(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypePicMsgByBase64Content", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypePicMsgByBase64ContentPrivateChat
func ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(h CGoHandle) *OPQBot.SendTypePicMsgByBase64ContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypePicMsgByBase64ContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByBase64ContentPrivateChat{})).(*OPQBot.SendTypePicMsgByBase64ContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypePicMsgByBase64ContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypePicMsgByLocalContent
func ptrFromHandle_OPQBot_SendTypePicMsgByLocalContent(h CGoHandle) *OPQBot.SendTypePicMsgByLocalContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypePicMsgByLocalContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByLocalContent{})).(*OPQBot.SendTypePicMsgByLocalContent)
}
func handleFromPtr_OPQBot_SendTypePicMsgByLocalContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypePicMsgByLocalContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypePicMsgByLocalContentPrivateChat
func ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(h CGoHandle) *OPQBot.SendTypePicMsgByLocalContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypePicMsgByLocalContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByLocalContentPrivateChat{})).(*OPQBot.SendTypePicMsgByLocalContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypePicMsgByLocalContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypePicMsgByLocalContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypePicMsgByMd5Content
func ptrFromHandle_OPQBot_SendTypePicMsgByMd5Content(h CGoHandle) *OPQBot.SendTypePicMsgByMd5Content {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypePicMsgByMd5Content")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByMd5Content{})).(*OPQBot.SendTypePicMsgByMd5Content)
}
func handleFromPtr_OPQBot_SendTypePicMsgByMd5Content(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypePicMsgByMd5Content", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypePicMsgByMd5ContentPrivateChat
func ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(h CGoHandle) *OPQBot.SendTypePicMsgByMd5ContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypePicMsgByMd5ContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByMd5ContentPrivateChat{})).(*OPQBot.SendTypePicMsgByMd5ContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypePicMsgByMd5ContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypePicMsgByUrlContent
func ptrFromHandle_OPQBot_SendTypePicMsgByUrlContent(h CGoHandle) *OPQBot.SendTypePicMsgByUrlContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypePicMsgByUrlContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByUrlContent{})).(*OPQBot.SendTypePicMsgByUrlContent)
}
func handleFromPtr_OPQBot_SendTypePicMsgByUrlContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypePicMsgByUrlContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypePicMsgByUrlContentPrivateChat
func ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(h CGoHandle) *OPQBot.SendTypePicMsgByUrlContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypePicMsgByUrlContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypePicMsgByUrlContentPrivateChat{})).(*OPQBot.SendTypePicMsgByUrlContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypePicMsgByUrlContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypePicMsgByUrlContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeReplyContent
func ptrFromHandle_OPQBot_SendTypeReplyContent(h CGoHandle) *OPQBot.SendTypeReplyContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeReplyContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeReplyContent{})).(*OPQBot.SendTypeReplyContent)
}
func handleFromPtr_OPQBot_SendTypeReplyContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeReplyContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeReplyContentPrivateChat
func ptrFromHandle_OPQBot_SendTypeReplyContentPrivateChat(h CGoHandle) *OPQBot.SendTypeReplyContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeReplyContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeReplyContentPrivateChat{})).(*OPQBot.SendTypeReplyContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypeReplyContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeReplyContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeTextMsgContent
func ptrFromHandle_OPQBot_SendTypeTextMsgContent(h CGoHandle) *OPQBot.SendTypeTextMsgContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeTextMsgContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeTextMsgContent{})).(*OPQBot.SendTypeTextMsgContent)
}
func handleFromPtr_OPQBot_SendTypeTextMsgContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeTextMsgContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeTextMsgContentPrivateChat
func ptrFromHandle_OPQBot_SendTypeTextMsgContentPrivateChat(h CGoHandle) *OPQBot.SendTypeTextMsgContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeTextMsgContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeTextMsgContentPrivateChat{})).(*OPQBot.SendTypeTextMsgContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypeTextMsgContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeTextMsgContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeVoiceByLocalContent
func ptrFromHandle_OPQBot_SendTypeVoiceByLocalContent(h CGoHandle) *OPQBot.SendTypeVoiceByLocalContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeVoiceByLocalContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeVoiceByLocalContent{})).(*OPQBot.SendTypeVoiceByLocalContent)
}
func handleFromPtr_OPQBot_SendTypeVoiceByLocalContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeVoiceByLocalContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeVoiceByLocalContentPrivateChat
func ptrFromHandle_OPQBot_SendTypeVoiceByLocalContentPrivateChat(h CGoHandle) *OPQBot.SendTypeVoiceByLocalContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeVoiceByLocalContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeVoiceByLocalContentPrivateChat{})).(*OPQBot.SendTypeVoiceByLocalContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypeVoiceByLocalContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeVoiceByLocalContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeVoiceByUrlContent
func ptrFromHandle_OPQBot_SendTypeVoiceByUrlContent(h CGoHandle) *OPQBot.SendTypeVoiceByUrlContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeVoiceByUrlContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeVoiceByUrlContent{})).(*OPQBot.SendTypeVoiceByUrlContent)
}
func handleFromPtr_OPQBot_SendTypeVoiceByUrlContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeVoiceByUrlContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeVoiceByUrlContentPrivateChat
func ptrFromHandle_OPQBot_SendTypeVoiceByUrlContentPrivateChat(h CGoHandle) *OPQBot.SendTypeVoiceByUrlContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeVoiceByUrlContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeVoiceByUrlContentPrivateChat{})).(*OPQBot.SendTypeVoiceByUrlContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypeVoiceByUrlContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeVoiceByUrlContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeXmlContent
func ptrFromHandle_OPQBot_SendTypeXmlContent(h CGoHandle) *OPQBot.SendTypeXmlContent {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeXmlContent")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeXmlContent{})).(*OPQBot.SendTypeXmlContent)
}
func handleFromPtr_OPQBot_SendTypeXmlContent(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeXmlContent", p))
}

// Converters for non-pointer handles for type: OPQBot.SendTypeXmlContentPrivateChat
func ptrFromHandle_OPQBot_SendTypeXmlContentPrivateChat(h CGoHandle) *OPQBot.SendTypeXmlContentPrivateChat {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.SendTypeXmlContentPrivateChat")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.SendTypeXmlContentPrivateChat{})).(*OPQBot.SendTypeXmlContentPrivateChat)
}
func handleFromPtr_OPQBot_SendTypeXmlContentPrivateChat(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.SendTypeXmlContentPrivateChat", p))
}

// Converters for non-pointer handles for type: OPQBot.UserCardInfo
func ptrFromHandle_OPQBot_UserCardInfo(h CGoHandle) *OPQBot.UserCardInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.UserCardInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.UserCardInfo{})).(*OPQBot.UserCardInfo)
}
func handleFromPtr_OPQBot_UserCardInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.UserCardInfo", p))
}

// Converters for non-pointer handles for type: OPQBot.UserInfo
func ptrFromHandle_OPQBot_UserInfo(h CGoHandle) *OPQBot.UserInfo {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.UserInfo")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.UserInfo{})).(*OPQBot.UserInfo)
}
func handleFromPtr_OPQBot_UserInfo(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.UserInfo", p))
}

// Converters for non-pointer handles for type: OPQBot.VideoMsg
func ptrFromHandle_OPQBot_VideoMsg(h CGoHandle) *OPQBot.VideoMsg {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "OPQBot.VideoMsg")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(OPQBot.VideoMsg{})).(*OPQBot.VideoMsg)
}
func handleFromPtr_OPQBot_VideoMsg(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("OPQBot.VideoMsg", p))
}

// Converters for implicit pointer handles for type: map[string]string
func ptrFromHandle_Map_string_string(h CGoHandle) *map[string]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "map[string]string")
	if p == nil {
		return nil
	}
	return p.(*map[string]string)
}
func deptrFromHandle_Map_string_string(h CGoHandle) map[string]string {
	p := ptrFromHandle_Map_string_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Map_string_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("map[string]string", p))
}

// --- wrapping map: map[string]string ---
//export Map_string_string_CTor
func Map_string_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Map_string_string(&map[string]string{}))
}

//export Map_string_string_len
func Map_string_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Map_string_string(handle))
}

//export Map_string_string_elem
func Map_string_string_elem(handle CGoHandle, _ky *C.char) *C.char {
	s := deptrFromHandle_Map_string_string(handle)
	v, ok := s[C.GoString(_ky)]
	if !ok {
		C.PyErr_SetString(C.PyExc_KeyError, C.CString("key not in map"))
	}
	return C.CString(v)
}

//export Map_string_string_contains
func Map_string_string_contains(handle CGoHandle, _ky *C.char) C.char {
	s := deptrFromHandle_Map_string_string(handle)
	_, ok := s[C.GoString(_ky)]
	return boolGoToPy(ok)
}

//export Map_string_string_set
func Map_string_string_set(handle CGoHandle, _ky *C.char, _vl *C.char) {
	s := deptrFromHandle_Map_string_string(handle)
	s[C.GoString(_ky)] = C.GoString(_vl)
}

//export Map_string_string_delete
func Map_string_string_delete(handle CGoHandle, _ky *C.char) {
	s := deptrFromHandle_Map_string_string(handle)
	delete(s, C.GoString(_ky))
}

//export Map_string_string_keys
func Map_string_string_keys(handle CGoHandle) CGoHandle {
	s := deptrFromHandle_Map_string_string(handle)
	kys := make([]string, 0, len(s))
	for k := range s {
		kys = append(kys, k)
	}
	return handleFromPtr_Slice_string(&kys)
}

// ---- Global Variables: can only use functions to access ---
//export OPQBot_FaceMap
func OPQBot_FaceMap() CGoHandle {
	return handleFromPtr_Map_string_string(&OPQBot.FaceMap)
}

//export OPQBot_Set_FaceMap
func OPQBot_Set_FaceMap(val CGoHandle) {
	OPQBot.FaceMap = deptrFromHandle_Map_string_string(val)
}

// ---- Interfaces ---

// ---- Structs ---

// --- wrapping struct: OPQBot.SendTypeTextMsgContentPrivateChat ---
//export OPQBot_SendTypeTextMsgContentPrivateChat_CTor
func OPQBot_SendTypeTextMsgContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeTextMsgContentPrivateChat(&OPQBot.SendTypeTextMsgContentPrivateChat{}))
}

//export OPQBot_SendTypeTextMsgContentPrivateChat_Content_Get
func OPQBot_SendTypeTextMsgContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeTextMsgContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeTextMsgContentPrivateChat_Content_Set
func OPQBot_SendTypeTextMsgContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeTextMsgContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypeTextMsgContentPrivateChat_Group_Get
func OPQBot_SendTypeTextMsgContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeTextMsgContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypeTextMsgContentPrivateChat_Group_Set
func OPQBot_SendTypeTextMsgContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeTextMsgContentPrivateChat(handle)
	op.Group = int64(val)
}

// --- wrapping struct: OPQBot.Context ---
//export OPQBot_Context_CTor
func OPQBot_Context_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_Context(&OPQBot.Context{}))
}

//export OPQBot_Context_Ban_Get
func OPQBot_Context_Ban_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_Context(handle)
	return boolGoToPy(op.Ban)
}

//export OPQBot_Context_Ban_Set
func OPQBot_Context_Ban_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_Context(handle)
	op.Ban = boolPyToGo(val)
}

//export OPQBot_Context_NowIndex_Get
func OPQBot_Context_NowIndex_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_Context(handle)
	return C.longlong(op.NowIndex)
}

//export OPQBot_Context_NowIndex_Set
func OPQBot_Context_NowIndex_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_Context(handle)
	op.NowIndex = int(val)
}

//export OPQBot_Context_MaxIndex_Get
func OPQBot_Context_MaxIndex_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_Context(handle)
	return C.longlong(op.MaxIndex)
}

//export OPQBot_Context_MaxIndex_Set
func OPQBot_Context_MaxIndex_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_Context(handle)
	op.MaxIndex = int(val)
}

//export OPQBot_Context_Bot_Get
func OPQBot_Context_Bot_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_OPQBot_Context(handle)
	return handleFromPtr_Ptr_OPQBot_BotManager(op.Bot)
}

//export OPQBot_Context_Bot_Set
func OPQBot_Context_Bot_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_OPQBot_Context(handle)
	op.Bot = ptrFromHandle_Ptr_OPQBot_BotManager(val)
}

//export OPQBot_Context_Next
func OPQBot_Context_Next(_handle CGoHandle, currentQQ C.longlong, result *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.Context")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.Context{})).(*OPQBot.Context).Next(int64(currentQQ), C.GoString(result))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.Context{})).(*OPQBot.Context).Next(int64(currentQQ), C.GoString(result))
	}
}

// --- wrapping struct: OPQBot.GroupFileResult ---
//export OPQBot_GroupFileResult_CTor
func OPQBot_GroupFileResult_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupFileResult(&OPQBot.GroupFileResult{}))
}

//export OPQBot_GroupFileResult_Ret_Get
func OPQBot_GroupFileResult_Ret_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupFileResult(handle)
	return C.longlong(op.Ret)
}

//export OPQBot_GroupFileResult_Ret_Set
func OPQBot_GroupFileResult_Ret_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupFileResult(handle)
	op.Ret = int(val)
}

//export OPQBot_GroupFileResult_URL_Get
func OPQBot_GroupFileResult_URL_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupFileResult(handle)
	return C.CString(op.URL)
}

//export OPQBot_GroupFileResult_URL_Set
func OPQBot_GroupFileResult_URL_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupFileResult(handle)
	op.URL = C.GoString(val)
}

// --- wrapping struct: OPQBot.GroupJoinPack ---
//export OPQBot_GroupJoinPack_CTor
func OPQBot_GroupJoinPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupJoinPack(&OPQBot.GroupJoinPack{}))
}

// --- wrapping struct: OPQBot.SendTypePicMsgByLocalContentPrivateChat ---
//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_CTor
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypePicMsgByLocalContentPrivateChat(&OPQBot.SendTypePicMsgByLocalContentPrivateChat{}))
}

//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_Content_Get
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_Content_Set
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_Path_Get
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_Path_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(handle)
	return C.CString(op.Path)
}

//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_Path_Set
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_Path_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(handle)
	op.Path = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_Group_Get
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_Group_Set
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(handle)
	op.Group = int64(val)
}

//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_Flash_Get
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_Flash_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(handle)
	return boolGoToPy(op.Flash)
}

//export OPQBot_SendTypePicMsgByLocalContentPrivateChat_Flash_Set
func OPQBot_SendTypePicMsgByLocalContentPrivateChat_Flash_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContentPrivateChat(handle)
	op.Flash = boolPyToGo(val)
}

// --- wrapping struct: OPQBot.SendTypeVoiceByLocalContent ---
//export OPQBot_SendTypeVoiceByLocalContent_CTor
func OPQBot_SendTypeVoiceByLocalContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeVoiceByLocalContent(&OPQBot.SendTypeVoiceByLocalContent{}))
}

//export OPQBot_SendTypeVoiceByLocalContent_Path_Get
func OPQBot_SendTypeVoiceByLocalContent_Path_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByLocalContent(handle)
	return C.CString(op.Path)
}

//export OPQBot_SendTypeVoiceByLocalContent_Path_Set
func OPQBot_SendTypeVoiceByLocalContent_Path_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByLocalContent(handle)
	op.Path = C.GoString(val)
}

// --- wrapping struct: OPQBot.GroupExitPack ---
//export OPQBot_GroupExitPack_CTor
func OPQBot_GroupExitPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupExitPack(&OPQBot.GroupExitPack{}))
}

// --- wrapping struct: OPQBot.GroupExitSuccessPack ---
//export OPQBot_GroupExitSuccessPack_CTor
func OPQBot_GroupExitSuccessPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupExitSuccessPack(&OPQBot.GroupExitSuccessPack{}))
}

// --- wrapping struct: OPQBot.GroupList ---
//export OPQBot_GroupList_CTor
func OPQBot_GroupList_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupList(&OPQBot.GroupList{}))
}

//export OPQBot_GroupList_Count_Get
func OPQBot_GroupList_Count_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupList(handle)
	return C.longlong(op.Count)
}

//export OPQBot_GroupList_Count_Set
func OPQBot_GroupList_Count_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupList(handle)
	op.Count = int(val)
}

//export OPQBot_GroupList_NextToken_Get
func OPQBot_GroupList_NextToken_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupList(handle)
	return C.CString(op.NextToken)
}

//export OPQBot_GroupList_NextToken_Set
func OPQBot_GroupList_NextToken_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupList(handle)
	op.NextToken = C.GoString(val)
}

// --- wrapping struct: OPQBot.Result ---
//export OPQBot_Result_CTor
func OPQBot_Result_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_Result(&OPQBot.Result{}))
}

//export OPQBot_Result_Msg_Get
func OPQBot_Result_Msg_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Result(handle)
	return C.CString(op.Msg)
}

//export OPQBot_Result_Msg_Set
func OPQBot_Result_Msg_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Result(handle)
	op.Msg = C.GoString(val)
}

//export OPQBot_Result_Ret_Get
func OPQBot_Result_Ret_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_Result(handle)
	return C.longlong(op.Ret)
}

//export OPQBot_Result_Ret_Set
func OPQBot_Result_Ret_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_Result(handle)
	op.Ret = int(val)
}

// --- wrapping struct: OPQBot.FriendFileResult ---
//export OPQBot_FriendFileResult_CTor
func OPQBot_FriendFileResult_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_FriendFileResult(&OPQBot.FriendFileResult{}))
}

//export OPQBot_FriendFileResult_FileName_Get
func OPQBot_FriendFileResult_FileName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_FriendFileResult(handle)
	return C.CString(op.FileName)
}

//export OPQBot_FriendFileResult_FileName_Set
func OPQBot_FriendFileResult_FileName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_FriendFileResult(handle)
	op.FileName = C.GoString(val)
}

//export OPQBot_FriendFileResult_FileSize_Get
func OPQBot_FriendFileResult_FileSize_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendFileResult(handle)
	return C.longlong(op.FileSize)
}

//export OPQBot_FriendFileResult_FileSize_Set
func OPQBot_FriendFileResult_FileSize_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendFileResult(handle)
	op.FileSize = int(val)
}

//export OPQBot_FriendFileResult_FromUin_Get
func OPQBot_FriendFileResult_FromUin_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendFileResult(handle)
	return C.longlong(op.FromUin)
}

//export OPQBot_FriendFileResult_FromUin_Set
func OPQBot_FriendFileResult_FromUin_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendFileResult(handle)
	op.FromUin = int64(val)
}

//export OPQBot_FriendFileResult_URL_Get
func OPQBot_FriendFileResult_URL_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_FriendFileResult(handle)
	return C.CString(op.URL)
}

//export OPQBot_FriendFileResult_URL_Set
func OPQBot_FriendFileResult_URL_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_FriendFileResult(handle)
	op.URL = C.GoString(val)
}

// --- wrapping struct: OPQBot.GroupMemberList ---
//export OPQBot_GroupMemberList_CTor
func OPQBot_GroupMemberList_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupMemberList(&OPQBot.GroupMemberList{}))
}

//export OPQBot_GroupMemberList_Count_Get
func OPQBot_GroupMemberList_Count_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupMemberList(handle)
	return C.longlong(op.Count)
}

//export OPQBot_GroupMemberList_Count_Set
func OPQBot_GroupMemberList_Count_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupMemberList(handle)
	op.Count = int(val)
}

//export OPQBot_GroupMemberList_GroupUin_Get
func OPQBot_GroupMemberList_GroupUin_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupMemberList(handle)
	return C.longlong(op.GroupUin)
}

//export OPQBot_GroupMemberList_GroupUin_Set
func OPQBot_GroupMemberList_GroupUin_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupMemberList(handle)
	op.GroupUin = int64(val)
}

//export OPQBot_GroupMemberList_LastUin_Get
func OPQBot_GroupMemberList_LastUin_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupMemberList(handle)
	return C.longlong(op.LastUin)
}

//export OPQBot_GroupMemberList_LastUin_Set
func OPQBot_GroupMemberList_LastUin_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupMemberList(handle)
	op.LastUin = int64(val)
}

// --- wrapping struct: OPQBot.SendMsgPack ---
//export OPQBot_SendMsgPack_CTor
func OPQBot_SendMsgPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendMsgPack(&OPQBot.SendMsgPack{}))
}

//export OPQBot_SendMsgPack_SendToType_Get
func OPQBot_SendMsgPack_SendToType_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendMsgPack(handle)
	return C.longlong(op.SendToType)
}

//export OPQBot_SendMsgPack_SendToType_Set
func OPQBot_SendMsgPack_SendToType_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendMsgPack(handle)
	op.SendToType = int(val)
}

//export OPQBot_SendMsgPack_ToUserUid_Get
func OPQBot_SendMsgPack_ToUserUid_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendMsgPack(handle)
	return C.longlong(op.ToUserUid)
}

//export OPQBot_SendMsgPack_ToUserUid_Set
func OPQBot_SendMsgPack_ToUserUid_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendMsgPack(handle)
	op.ToUserUid = int64(val)
}

// --- wrapping struct: OPQBot.SendTypeReplyContent ---
//export OPQBot_SendTypeReplyContent_CTor
func OPQBot_SendTypeReplyContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeReplyContent(&OPQBot.SendTypeReplyContent{}))
}

//export OPQBot_SendTypeReplyContent_Content_Get
func OPQBot_SendTypeReplyContent_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeReplyContent(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeReplyContent_Content_Set
func OPQBot_SendTypeReplyContent_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeReplyContent(handle)
	op.Content = C.GoString(val)
}

// --- wrapping struct: OPQBot.GroupAdminPack ---
//export OPQBot_GroupAdminPack_CTor
func OPQBot_GroupAdminPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupAdminPack(&OPQBot.GroupAdminPack{}))
}

// --- wrapping struct: OPQBot.SendTypeJsonContent ---
//export OPQBot_SendTypeJsonContent_CTor
func OPQBot_SendTypeJsonContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeJsonContent(&OPQBot.SendTypeJsonContent{}))
}

//export OPQBot_SendTypeJsonContent_Content_Get
func OPQBot_SendTypeJsonContent_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeJsonContent(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeJsonContent_Content_Set
func OPQBot_SendTypeJsonContent_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeJsonContent(handle)
	op.Content = C.GoString(val)
}

// --- wrapping struct: OPQBot.SendTypeJsonContentPrivateChat ---
//export OPQBot_SendTypeJsonContentPrivateChat_CTor
func OPQBot_SendTypeJsonContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeJsonContentPrivateChat(&OPQBot.SendTypeJsonContentPrivateChat{}))
}

//export OPQBot_SendTypeJsonContentPrivateChat_Content_Get
func OPQBot_SendTypeJsonContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeJsonContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeJsonContentPrivateChat_Content_Set
func OPQBot_SendTypeJsonContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeJsonContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypeJsonContentPrivateChat_Group_Get
func OPQBot_SendTypeJsonContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeJsonContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypeJsonContentPrivateChat_Group_Set
func OPQBot_SendTypeJsonContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeJsonContentPrivateChat(handle)
	op.Group = int64(val)
}

// --- wrapping struct: OPQBot.SendTypePicMsgByUrlContent ---
//export OPQBot_SendTypePicMsgByUrlContent_CTor
func OPQBot_SendTypePicMsgByUrlContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypePicMsgByUrlContent(&OPQBot.SendTypePicMsgByUrlContent{}))
}

//export OPQBot_SendTypePicMsgByUrlContent_Content_Get
func OPQBot_SendTypePicMsgByUrlContent_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContent(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypePicMsgByUrlContent_Content_Set
func OPQBot_SendTypePicMsgByUrlContent_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContent(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByUrlContent_PicUrl_Get
func OPQBot_SendTypePicMsgByUrlContent_PicUrl_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContent(handle)
	return C.CString(op.PicUrl)
}

//export OPQBot_SendTypePicMsgByUrlContent_PicUrl_Set
func OPQBot_SendTypePicMsgByUrlContent_PicUrl_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContent(handle)
	op.PicUrl = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByUrlContent_Flash_Get
func OPQBot_SendTypePicMsgByUrlContent_Flash_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContent(handle)
	return boolGoToPy(op.Flash)
}

//export OPQBot_SendTypePicMsgByUrlContent_Flash_Set
func OPQBot_SendTypePicMsgByUrlContent_Flash_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContent(handle)
	op.Flash = boolPyToGo(val)
}

// --- wrapping struct: OPQBot.SendTypeTextMsgContent ---
//export OPQBot_SendTypeTextMsgContent_CTor
func OPQBot_SendTypeTextMsgContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeTextMsgContent(&OPQBot.SendTypeTextMsgContent{}))
}

//export OPQBot_SendTypeTextMsgContent_Content_Get
func OPQBot_SendTypeTextMsgContent_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeTextMsgContent(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeTextMsgContent_Content_Set
func OPQBot_SendTypeTextMsgContent_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeTextMsgContent(handle)
	op.Content = C.GoString(val)
}

// --- wrapping struct: OPQBot.SendTypeXmlContent ---
//export OPQBot_SendTypeXmlContent_CTor
func OPQBot_SendTypeXmlContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeXmlContent(&OPQBot.SendTypeXmlContent{}))
}

//export OPQBot_SendTypeXmlContent_Content_Get
func OPQBot_SendTypeXmlContent_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeXmlContent(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeXmlContent_Content_Set
func OPQBot_SendTypeXmlContent_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeXmlContent(handle)
	op.Content = C.GoString(val)
}

// --- wrapping struct: OPQBot.FriendList ---
//export OPQBot_FriendList_CTor
func OPQBot_FriendList_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_FriendList(&OPQBot.FriendList{}))
}

//export OPQBot_FriendList_FriendCount_Get
func OPQBot_FriendList_FriendCount_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendList(handle)
	return C.longlong(op.FriendCount)
}

//export OPQBot_FriendList_FriendCount_Set
func OPQBot_FriendList_FriendCount_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendList(handle)
	op.FriendCount = int(val)
}

//export OPQBot_FriendList_GetfriendCount_Get
func OPQBot_FriendList_GetfriendCount_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendList(handle)
	return C.longlong(op.GetfriendCount)
}

//export OPQBot_FriendList_GetfriendCount_Set
func OPQBot_FriendList_GetfriendCount_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendList(handle)
	op.GetfriendCount = int(val)
}

//export OPQBot_FriendList_StartIndex_Get
func OPQBot_FriendList_StartIndex_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendList(handle)
	return C.longlong(op.StartIndex)
}

//export OPQBot_FriendList_StartIndex_Set
func OPQBot_FriendList_StartIndex_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendList(handle)
	op.StartIndex = int(val)
}

//export OPQBot_FriendList_TotoalFriendCount_Get
func OPQBot_FriendList_TotoalFriendCount_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendList(handle)
	return C.longlong(op.TotoalFriendCount)
}

//export OPQBot_FriendList_TotoalFriendCount_Set
func OPQBot_FriendList_TotoalFriendCount_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendList(handle)
	op.TotoalFriendCount = int(val)
}

// --- wrapping struct: OPQBot.GroupRevokePack ---
//export OPQBot_GroupRevokePack_CTor
func OPQBot_GroupRevokePack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupRevokePack(&OPQBot.GroupRevokePack{}))
}

// --- wrapping struct: OPQBot.GroupSystemNotifyPack ---
//export OPQBot_GroupSystemNotifyPack_CTor
func OPQBot_GroupSystemNotifyPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupSystemNotifyPack(&OPQBot.GroupSystemNotifyPack{}))
}

// --- wrapping struct: OPQBot.SendTypePicMsgByBase64ContentPrivateChat ---
//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_CTor
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(&OPQBot.SendTypePicMsgByBase64ContentPrivateChat{}))
}

//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Content_Get
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Content_Set
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Base64_Get
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Base64_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(handle)
	return C.CString(op.Base64)
}

//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Base64_Set
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Base64_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(handle)
	op.Base64 = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Group_Get
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Group_Set
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(handle)
	op.Group = int64(val)
}

//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Flash_Get
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Flash_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(handle)
	return boolGoToPy(op.Flash)
}

//export OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Flash_Set
func OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Flash_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64ContentPrivateChat(handle)
	op.Flash = boolPyToGo(val)
}

// --- wrapping struct: OPQBot.UserInfo ---
//export OPQBot_UserInfo_CTor
func OPQBot_UserInfo_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_UserInfo(&OPQBot.UserInfo{}))
}

//export OPQBot_UserInfo_Code_Get
func OPQBot_UserInfo_Code_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserInfo(handle)
	return C.longlong(op.Code)
}

//export OPQBot_UserInfo_Code_Set
func OPQBot_UserInfo_Code_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserInfo(handle)
	op.Code = int(val)
}

//export OPQBot_UserInfo_Default_Get
func OPQBot_UserInfo_Default_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserInfo(handle)
	return C.longlong(op.Default)
}

//export OPQBot_UserInfo_Default_Set
func OPQBot_UserInfo_Default_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserInfo(handle)
	op.Default = int(val)
}

//export OPQBot_UserInfo_Message_Get
func OPQBot_UserInfo_Message_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_UserInfo(handle)
	return C.CString(op.Message)
}

//export OPQBot_UserInfo_Message_Set
func OPQBot_UserInfo_Message_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_UserInfo(handle)
	op.Message = C.GoString(val)
}

//export OPQBot_UserInfo_Subcode_Get
func OPQBot_UserInfo_Subcode_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserInfo(handle)
	return C.longlong(op.Subcode)
}

//export OPQBot_UserInfo_Subcode_Set
func OPQBot_UserInfo_Subcode_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserInfo(handle)
	op.Subcode = int(val)
}

// --- wrapping struct: OPQBot.VideoMsg ---
//export OPQBot_VideoMsg_CTor
func OPQBot_VideoMsg_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_VideoMsg(&OPQBot.VideoMsg{}))
}

//export OPQBot_VideoMsg_ForwordBuf_Get
func OPQBot_VideoMsg_ForwordBuf_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	return C.CString(op.ForwordBuf)
}

//export OPQBot_VideoMsg_ForwordBuf_Set
func OPQBot_VideoMsg_ForwordBuf_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	op.ForwordBuf = C.GoString(val)
}

//export OPQBot_VideoMsg_ForwordField_Get
func OPQBot_VideoMsg_ForwordField_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	return C.longlong(op.ForwordField)
}

//export OPQBot_VideoMsg_ForwordField_Set
func OPQBot_VideoMsg_ForwordField_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	op.ForwordField = int(val)
}

//export OPQBot_VideoMsg_VideoMd5_Get
func OPQBot_VideoMsg_VideoMd5_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	return C.CString(op.VideoMd5)
}

//export OPQBot_VideoMsg_VideoMd5_Set
func OPQBot_VideoMsg_VideoMd5_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	op.VideoMd5 = C.GoString(val)
}

//export OPQBot_VideoMsg_VideoSize_Get
func OPQBot_VideoMsg_VideoSize_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	return C.CString(op.VideoSize)
}

//export OPQBot_VideoMsg_VideoSize_Set
func OPQBot_VideoMsg_VideoSize_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	op.VideoSize = C.GoString(val)
}

//export OPQBot_VideoMsg_VideoUrl_Get
func OPQBot_VideoMsg_VideoUrl_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	return C.CString(op.VideoUrl)
}

//export OPQBot_VideoMsg_VideoUrl_Set
func OPQBot_VideoMsg_VideoUrl_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	op.VideoUrl = C.GoString(val)
}

//export OPQBot_VideoMsg_Tips_Get
func OPQBot_VideoMsg_Tips_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	return C.CString(op.Tips)
}

//export OPQBot_VideoMsg_Tips_Set
func OPQBot_VideoMsg_Tips_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_VideoMsg(handle)
	op.Tips = C.GoString(val)
}

// --- wrapping struct: OPQBot.SendTypePicMsgByMd5Content ---
//export OPQBot_SendTypePicMsgByMd5Content_CTor
func OPQBot_SendTypePicMsgByMd5Content_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypePicMsgByMd5Content(&OPQBot.SendTypePicMsgByMd5Content{}))
}

//export OPQBot_SendTypePicMsgByMd5Content_Content_Get
func OPQBot_SendTypePicMsgByMd5Content_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5Content(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypePicMsgByMd5Content_Content_Set
func OPQBot_SendTypePicMsgByMd5Content_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5Content(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByMd5Content_Md5_Get
func OPQBot_SendTypePicMsgByMd5Content_Md5_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5Content(handle)
	return C.CString(op.Md5)
}

//export OPQBot_SendTypePicMsgByMd5Content_Md5_Set
func OPQBot_SendTypePicMsgByMd5Content_Md5_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5Content(handle)
	op.Md5 = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByMd5Content_Flash_Get
func OPQBot_SendTypePicMsgByMd5Content_Flash_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5Content(handle)
	return boolGoToPy(op.Flash)
}

//export OPQBot_SendTypePicMsgByMd5Content_Flash_Set
func OPQBot_SendTypePicMsgByMd5Content_Flash_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5Content(handle)
	op.Flash = boolPyToGo(val)
}

// --- wrapping struct: OPQBot.SendTypeVoiceByUrlContent ---
//export OPQBot_SendTypeVoiceByUrlContent_CTor
func OPQBot_SendTypeVoiceByUrlContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeVoiceByUrlContent(&OPQBot.SendTypeVoiceByUrlContent{}))
}

//export OPQBot_SendTypeVoiceByUrlContent_VoiceUrl_Get
func OPQBot_SendTypeVoiceByUrlContent_VoiceUrl_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByUrlContent(handle)
	return C.CString(op.VoiceUrl)
}

//export OPQBot_SendTypeVoiceByUrlContent_VoiceUrl_Set
func OPQBot_SendTypeVoiceByUrlContent_VoiceUrl_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByUrlContent(handle)
	op.VoiceUrl = C.GoString(val)
}

// --- wrapping struct: OPQBot.SendTypeVoiceByUrlContentPrivateChat ---
//export OPQBot_SendTypeVoiceByUrlContentPrivateChat_CTor
func OPQBot_SendTypeVoiceByUrlContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeVoiceByUrlContentPrivateChat(&OPQBot.SendTypeVoiceByUrlContentPrivateChat{}))
}

//export OPQBot_SendTypeVoiceByUrlContentPrivateChat_VoiceUrl_Get
func OPQBot_SendTypeVoiceByUrlContentPrivateChat_VoiceUrl_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByUrlContentPrivateChat(handle)
	return C.CString(op.VoiceUrl)
}

//export OPQBot_SendTypeVoiceByUrlContentPrivateChat_VoiceUrl_Set
func OPQBot_SendTypeVoiceByUrlContentPrivateChat_VoiceUrl_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByUrlContentPrivateChat(handle)
	op.VoiceUrl = C.GoString(val)
}

//export OPQBot_SendTypeVoiceByUrlContentPrivateChat_Group_Get
func OPQBot_SendTypeVoiceByUrlContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByUrlContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypeVoiceByUrlContentPrivateChat_Group_Set
func OPQBot_SendTypeVoiceByUrlContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByUrlContentPrivateChat(handle)
	op.Group = int64(val)
}

// --- wrapping struct: OPQBot.SendTypeXmlContentPrivateChat ---
//export OPQBot_SendTypeXmlContentPrivateChat_CTor
func OPQBot_SendTypeXmlContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeXmlContentPrivateChat(&OPQBot.SendTypeXmlContentPrivateChat{}))
}

//export OPQBot_SendTypeXmlContentPrivateChat_Content_Get
func OPQBot_SendTypeXmlContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeXmlContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeXmlContentPrivateChat_Content_Set
func OPQBot_SendTypeXmlContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeXmlContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypeXmlContentPrivateChat_Group_Get
func OPQBot_SendTypeXmlContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeXmlContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypeXmlContentPrivateChat_Group_Set
func OPQBot_SendTypeXmlContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeXmlContentPrivateChat(handle)
	op.Group = int64(val)
}

// --- wrapping struct: OPQBot.GroupAdminSysNotifyPack ---
//export OPQBot_GroupAdminSysNotifyPack_CTor
func OPQBot_GroupAdminSysNotifyPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupAdminSysNotifyPack(&OPQBot.GroupAdminSysNotifyPack{}))
}

// --- wrapping struct: OPQBot.MyRecord ---
//export OPQBot_MyRecord_CTor
func OPQBot_MyRecord_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_MyRecord(&OPQBot.MyRecord{}))
}

//export OPQBot_MyRecord_FromGroupID_Get
func OPQBot_MyRecord_FromGroupID_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	return C.longlong(op.FromGroupID)
}

//export OPQBot_MyRecord_FromGroupID_Set
func OPQBot_MyRecord_FromGroupID_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	op.FromGroupID = int64(val)
}

//export OPQBot_MyRecord_MsgRandom_Get
func OPQBot_MyRecord_MsgRandom_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	return C.longlong(op.MsgRandom)
}

//export OPQBot_MyRecord_MsgRandom_Set
func OPQBot_MyRecord_MsgRandom_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	op.MsgRandom = int64(val)
}

//export OPQBot_MyRecord_MsgSeq_Get
func OPQBot_MyRecord_MsgSeq_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	return C.longlong(op.MsgSeq)
}

//export OPQBot_MyRecord_MsgSeq_Set
func OPQBot_MyRecord_MsgSeq_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	op.MsgSeq = int(val)
}

//export OPQBot_MyRecord_MsgTime_Get
func OPQBot_MyRecord_MsgTime_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	return C.longlong(op.MsgTime)
}

//export OPQBot_MyRecord_MsgTime_Set
func OPQBot_MyRecord_MsgTime_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	op.MsgTime = int(val)
}

//export OPQBot_MyRecord_MsgType_Get
func OPQBot_MyRecord_MsgType_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	return C.CString(op.MsgType)
}

//export OPQBot_MyRecord_MsgType_Set
func OPQBot_MyRecord_MsgType_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	op.MsgType = C.GoString(val)
}

//export OPQBot_MyRecord_Content_Get
func OPQBot_MyRecord_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	return C.CString(op.Content)
}

//export OPQBot_MyRecord_Content_Set
func OPQBot_MyRecord_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_MyRecord(handle)
	op.Content = C.GoString(val)
}

// --- wrapping struct: OPQBot.PicMsg ---
//export OPQBot_PicMsg_CTor
func OPQBot_PicMsg_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_PicMsg(&OPQBot.PicMsg{}))
}

//export OPQBot_PicMsg_Content_Get
func OPQBot_PicMsg_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_PicMsg(handle)
	return C.CString(op.Content)
}

//export OPQBot_PicMsg_Content_Set
func OPQBot_PicMsg_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_PicMsg(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_PicMsg_Tips_Get
func OPQBot_PicMsg_Tips_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_PicMsg(handle)
	return C.CString(op.Tips)
}

//export OPQBot_PicMsg_Tips_Set
func OPQBot_PicMsg_Tips_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_PicMsg(handle)
	op.Tips = C.GoString(val)
}

//export OPQBot_PicMsg_UserID_Get
func OPQBot_PicMsg_UserID_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_OPQBot_PicMsg(handle)
	return handleFromPtr_Slice_int64(&op.UserID)
}

//export OPQBot_PicMsg_UserID_Set
func OPQBot_PicMsg_UserID_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_OPQBot_PicMsg(handle)
	op.UserID = deptrFromHandle_Slice_int64(val)
}

// --- wrapping struct: OPQBot.SendTypeForwordContentPrivateChat ---
//export OPQBot_SendTypeForwordContentPrivateChat_CTor
func OPQBot_SendTypeForwordContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeForwordContentPrivateChat(&OPQBot.SendTypeForwordContentPrivateChat{}))
}

//export OPQBot_SendTypeForwordContentPrivateChat_ForwordBuf_Get
func OPQBot_SendTypeForwordContentPrivateChat_ForwordBuf_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(handle)
	return C.CString(op.ForwordBuf)
}

//export OPQBot_SendTypeForwordContentPrivateChat_ForwordBuf_Set
func OPQBot_SendTypeForwordContentPrivateChat_ForwordBuf_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(handle)
	op.ForwordBuf = C.GoString(val)
}

//export OPQBot_SendTypeForwordContentPrivateChat_Content_Get
func OPQBot_SendTypeForwordContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeForwordContentPrivateChat_Content_Set
func OPQBot_SendTypeForwordContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypeForwordContentPrivateChat_ForwordField_Get
func OPQBot_SendTypeForwordContentPrivateChat_ForwordField_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(handle)
	return C.longlong(op.ForwordField)
}

//export OPQBot_SendTypeForwordContentPrivateChat_ForwordField_Set
func OPQBot_SendTypeForwordContentPrivateChat_ForwordField_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(handle)
	op.ForwordField = int(val)
}

//export OPQBot_SendTypeForwordContentPrivateChat_Group_Get
func OPQBot_SendTypeForwordContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypeForwordContentPrivateChat_Group_Set
func OPQBot_SendTypeForwordContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeForwordContentPrivateChat(handle)
	op.Group = int64(val)
}

// --- wrapping struct: OPQBot.AtMsg ---
//export OPQBot_AtMsg_CTor
func OPQBot_AtMsg_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_AtMsg(&OPQBot.AtMsg{}))
}

//export OPQBot_AtMsg_Content_Get
func OPQBot_AtMsg_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_AtMsg(handle)
	return C.CString(op.Content)
}

//export OPQBot_AtMsg_Content_Set
func OPQBot_AtMsg_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_AtMsg(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_AtMsg_UserID_Get
func OPQBot_AtMsg_UserID_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_OPQBot_AtMsg(handle)
	return handleFromPtr_Slice_int64(&op.UserID)
}

//export OPQBot_AtMsg_UserID_Set
func OPQBot_AtMsg_UserID_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_OPQBot_AtMsg(handle)
	op.UserID = deptrFromHandle_Slice_int64(val)
}

//export OPQBot_AtMsg_Clean
func OPQBot_AtMsg_Clean(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.AtMsg")
	if __err != nil {
		return handleFromPtr_OPQBot_AtMsg(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(OPQBot.AtMsg{})).(*OPQBot.AtMsg).Clean()

	return handleFromPtr_OPQBot_AtMsg(&cret)
}

// --- wrapping struct: OPQBot.BotManager ---
//export OPQBot_BotManager_CTor
func OPQBot_BotManager_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_BotManager(&OPQBot.BotManager{}))
}

//export OPQBot_BotManager_QQ_Get
func OPQBot_BotManager_QQ_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	return C.longlong(op.QQ)
}

//export OPQBot_BotManager_QQ_Set
func OPQBot_BotManager_QQ_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	op.QQ = int64(val)
}

//export OPQBot_BotManager_Running_Get
func OPQBot_BotManager_Running_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	return boolGoToPy(op.Running)
}

//export OPQBot_BotManager_Running_Set
func OPQBot_BotManager_Running_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	op.Running = boolPyToGo(val)
}

//export OPQBot_BotManager_OPQUrl_Get
func OPQBot_BotManager_OPQUrl_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	return C.CString(op.OPQUrl)
}

//export OPQBot_BotManager_OPQUrl_Set
func OPQBot_BotManager_OPQUrl_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	op.OPQUrl = C.GoString(val)
}

//export OPQBot_BotManager_MaxRetryCount_Get
func OPQBot_BotManager_MaxRetryCount_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	return C.longlong(op.MaxRetryCount)
}

//export OPQBot_BotManager_MaxRetryCount_Set
func OPQBot_BotManager_MaxRetryCount_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	op.MaxRetryCount = int(val)
}

//export OPQBot_BotManager_Session_Get
func OPQBot_BotManager_Session_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	return handleFromPtr_Ptr_session_Manager(op.Session)
}

//export OPQBot_BotManager_Session_Set
func OPQBot_BotManager_Session_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_OPQBot_BotManager(handle)
	op.Session = ptrFromHandle_Ptr_session_Manager(val)
}

//export OPQBot_BotManager_SetMaxRetryCount
func OPQBot_BotManager_SetMaxRetryCount(_handle CGoHandle, maxRetryCount C.longlong, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SetMaxRetryCount(int(maxRetryCount))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SetMaxRetryCount(int(maxRetryCount))
	}
}

//export OPQBot_BotManager_Wait
func OPQBot_BotManager_Wait(_handle CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Wait()
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Wait()
	}
}

//export OPQBot_BotManager_SetSendDelayed
func OPQBot_BotManager_SetSendDelayed(_handle CGoHandle, Millisecond C.longlong, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SetSendDelayed(int(Millisecond))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SetSendDelayed(int(Millisecond))
	}
}

//export OPQBot_BotManager_Start
func OPQBot_BotManager_Start(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Start()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_Send
func OPQBot_BotManager_Send(_handle CGoHandle, sendMsgPack CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Send(*ptrFromHandle_OPQBot_SendMsgPack(sendMsgPack))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Send(*ptrFromHandle_OPQBot_SendMsgPack(sendMsgPack))
	}
}

//export OPQBot_BotManager_Stop
func OPQBot_BotManager_Stop(_handle CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Stop()
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Stop()
	}
}

//export OPQBot_BotManager_ReCallMsg
func OPQBot_BotManager_ReCallMsg(_handle CGoHandle, GroupID C.longlong, MsgRandom C.longlong, MsgSeq C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).ReCallMsg(int64(GroupID), int64(MsgRandom), int(MsgSeq))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_RefreshKey
func OPQBot_BotManager_RefreshKey(_handle CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).RefreshKey()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_Announce
func OPQBot_BotManager_Announce(_handle CGoHandle, title *C.char, text *C.char, pinned C.longlong, announceType C.longlong, groupID C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Announce(C.GoString(title), C.GoString(text), int(pinned), int(announceType), int64(groupID))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_UploadFileWithBase64
func OPQBot_BotManager_UploadFileWithBase64(_handle CGoHandle, FileName *C.char, FileBase64 *C.char, ToUserUid C.longlong, Notify C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).UploadFileWithBase64(C.GoString(FileName), C.GoString(FileBase64), int64(ToUserUid), boolPyToGo(Notify))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_UploadFileWithFileUrl
func OPQBot_BotManager_UploadFileWithFileUrl(_handle CGoHandle, FileName *C.char, FileUrl *C.char, ToUserUid C.longlong, Notify C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).UploadFileWithFileUrl(C.GoString(FileName), C.GoString(FileUrl), int64(ToUserUid), boolPyToGo(Notify))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_UploadFileWithFilePath
func OPQBot_BotManager_UploadFileWithFilePath(_handle CGoHandle, FilePath *C.char, ToUserUid C.longlong, Notify C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).UploadFileWithFilePath(C.GoString(FilePath), int64(ToUserUid), boolPyToGo(Notify))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_Chuo
func OPQBot_BotManager_Chuo(_handle CGoHandle, sendType C.longlong, groupID C.longlong, userId C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Chuo(int(sendType), int64(groupID), int64(userId))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_SetAdmin
func OPQBot_BotManager_SetAdmin(_handle CGoHandle, flag C.longlong, groupID C.longlong, userId C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SetAdmin(int(flag), int64(groupID), int64(userId))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_GetUserInfo
func OPQBot_BotManager_GetUserInfo(_handle CGoHandle, qq C.longlong) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return handleFromPtr_OPQBot_UserInfo(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).GetUserInfo(int64(qq))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_UserInfo(nil)
	}
	return handleFromPtr_OPQBot_UserInfo(&cret)
}

//export OPQBot_BotManager_GetUserCookie
func OPQBot_BotManager_GetUserCookie(_handle CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return handleFromPtr_OPQBot_Cookie(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).GetUserCookie()

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_Cookie(nil)
	}
	return handleFromPtr_OPQBot_Cookie(&cret)
}

//export OPQBot_BotManager_KickGroupMember
func OPQBot_BotManager_KickGroupMember(_handle CGoHandle, groupID C.longlong, userId C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).KickGroupMember(int64(groupID), int64(userId))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_GetGroupMemberList
func OPQBot_BotManager_GetGroupMemberList(_handle CGoHandle, groupID C.longlong, LastUin C.longlong) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return handleFromPtr_OPQBot_GroupMemberList(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).GetGroupMemberList(int64(groupID), int64(LastUin))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_GroupMemberList(nil)
	}
	return handleFromPtr_OPQBot_GroupMemberList(&cret)
}

//export OPQBot_BotManager_SetGroupNewNick
func OPQBot_BotManager_SetGroupNewNick(_handle CGoHandle, newNick *C.char, groupID C.longlong, userId C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SetGroupNewNick(C.GoString(newNick), int64(groupID), int64(userId))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_SetGroupUniqueTitle
func OPQBot_BotManager_SetGroupUniqueTitle(_handle CGoHandle, newNick *C.char, groupID C.longlong, userId C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SetGroupUniqueTitle(C.GoString(newNick), int64(groupID), int64(userId))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_GetFriendList
func OPQBot_BotManager_GetFriendList(_handle CGoHandle, startIndex C.longlong) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return handleFromPtr_OPQBot_FriendList(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).GetFriendList(int(startIndex))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_FriendList(nil)
	}
	return handleFromPtr_OPQBot_FriendList(&cret)
}

//export OPQBot_BotManager_GetGroupList
func OPQBot_BotManager_GetGroupList(_handle CGoHandle, nextToken *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return handleFromPtr_OPQBot_GroupList(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).GetGroupList(C.GoString(nextToken))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_GroupList(nil)
	}
	return handleFromPtr_OPQBot_GroupList(&cret)
}

//export OPQBot_BotManager_SetForbidden
func OPQBot_BotManager_SetForbidden(_handle CGoHandle, flag C.longlong, ShutTime C.longlong, groupID C.longlong, userId C.longlong) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SetForbidden(int(flag), int(ShutTime), int64(groupID), int64(userId))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_GetUserCardInfo
func OPQBot_BotManager_GetUserCardInfo(_handle CGoHandle, qq C.longlong) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return handleFromPtr_OPQBot_UserCardInfo(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).GetUserCardInfo(int64(qq))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_UserCardInfo(nil)
	}
	return handleFromPtr_OPQBot_UserCardInfo(&cret)
}

//export OPQBot_BotManager_OldSendVoice
func OPQBot_BotManager_OldSendVoice(_handle CGoHandle, userID C.longlong, sendToType C.longlong, data *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return errorGoToPy(nil)
	}
	__err = gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).OldSendVoice(int64(userID), int(sendToType), C.GoString(data))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		return estr
	}
	return C.CString("")
}

//export OPQBot_BotManager_Zan
func OPQBot_BotManager_Zan(_handle CGoHandle, qq C.longlong, num C.longlong) C.longlong {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return C.longlong(0)
	}
	return C.longlong(gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).Zan(int64(qq), int(num)))

}

//export OPQBot_BotManager_CallFunc
func OPQBot_BotManager_CallFunc(_handle CGoHandle, FuncName *C.char, funcStruct *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return handleFromPtr_Slice_byte(nil)
	}
	cret, __err := gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).CallFunc(C.GoString(FuncName), C.GoString(funcStruct))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_byte(nil)
	}
	return handleFromPtr_Slice_byte(&cret)
}

//export OPQBot_BotManager_SendFriendTextMsg
func OPQBot_BotManager_SendFriendTextMsg(_handle CGoHandle, FriendUin C.longlong, Content *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendFriendTextMsg(int64(FriendUin), C.GoString(Content))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendFriendTextMsg(int64(FriendUin), C.GoString(Content))
	}
}

//export OPQBot_BotManager_SendFriendPicMsg
func OPQBot_BotManager_SendFriendPicMsg(_handle CGoHandle, FriendUin C.longlong, Content *C.char, Pic CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendFriendPicMsg(int64(FriendUin), C.GoString(Content), deptrFromHandle_Slice_byte(Pic))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendFriendPicMsg(int64(FriendUin), C.GoString(Content), deptrFromHandle_Slice_byte(Pic))
	}
}

//export OPQBot_BotManager_SendGroupTextMsg
func OPQBot_BotManager_SendGroupTextMsg(_handle CGoHandle, GroupUin C.longlong, Content *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendGroupTextMsg(int64(GroupUin), C.GoString(Content))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendGroupTextMsg(int64(GroupUin), C.GoString(Content))
	}
}

//export OPQBot_BotManager_SendGroupPicMsg
func OPQBot_BotManager_SendGroupPicMsg(_handle CGoHandle, GroupUin C.longlong, Content *C.char, Pic CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendGroupPicMsg(int64(GroupUin), C.GoString(Content), deptrFromHandle_Slice_byte(Pic))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendGroupPicMsg(int64(GroupUin), C.GoString(Content), deptrFromHandle_Slice_byte(Pic))
	}
}

//export OPQBot_BotManager_SendGroupJsonMsg
func OPQBot_BotManager_SendGroupJsonMsg(_handle CGoHandle, GroupUin C.longlong, Content *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendGroupJsonMsg(int64(GroupUin), C.GoString(Content))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendGroupJsonMsg(int64(GroupUin), C.GoString(Content))
	}
}

//export OPQBot_BotManager_SendGroupXmlMsg
func OPQBot_BotManager_SendGroupXmlMsg(_handle CGoHandle, GroupUin C.longlong, Content *C.char, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*OPQBot.BotManager")
	if __err != nil {
		return
	}
	if boolPyToGo(goRun) {
		go gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendGroupXmlMsg(int64(GroupUin), C.GoString(Content))
	} else {
		gopyh.Embed(vifc, reflect.TypeOf(OPQBot.BotManager{})).(*OPQBot.BotManager).SendGroupXmlMsg(int64(GroupUin), C.GoString(Content))
	}
}

// --- wrapping struct: OPQBot.FriendMsgPack ---
//export OPQBot_FriendMsgPack_CTor
func OPQBot_FriendMsgPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_FriendMsgPack(&OPQBot.FriendMsgPack{}))
}

//export OPQBot_FriendMsgPack_Content_Get
func OPQBot_FriendMsgPack_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	return C.CString(op.Content)
}

//export OPQBot_FriendMsgPack_Content_Set
func OPQBot_FriendMsgPack_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_FriendMsgPack_FromUin_Get
func OPQBot_FriendMsgPack_FromUin_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	return C.longlong(op.FromUin)
}

//export OPQBot_FriendMsgPack_FromUin_Set
func OPQBot_FriendMsgPack_FromUin_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	op.FromUin = int64(val)
}

//export OPQBot_FriendMsgPack_MsgSeq_Get
func OPQBot_FriendMsgPack_MsgSeq_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	return C.longlong(op.MsgSeq)
}

//export OPQBot_FriendMsgPack_MsgSeq_Set
func OPQBot_FriendMsgPack_MsgSeq_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	op.MsgSeq = int(val)
}

//export OPQBot_FriendMsgPack_MsgType_Get
func OPQBot_FriendMsgPack_MsgType_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	return C.CString(op.MsgType)
}

//export OPQBot_FriendMsgPack_MsgType_Set
func OPQBot_FriendMsgPack_MsgType_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	op.MsgType = C.GoString(val)
}

//export OPQBot_FriendMsgPack_ToUin_Get
func OPQBot_FriendMsgPack_ToUin_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	return C.longlong(op.ToUin)
}

//export OPQBot_FriendMsgPack_ToUin_Set
func OPQBot_FriendMsgPack_ToUin_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_FriendMsgPack(handle)
	op.ToUin = int64(val)
}

// --- wrapping struct: OPQBot.Cookie ---
//export OPQBot_Cookie_CTor
func OPQBot_Cookie_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_Cookie(&OPQBot.Cookie{}))
}

//export OPQBot_Cookie_ClientKey_Get
func OPQBot_Cookie_ClientKey_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	return C.CString(op.ClientKey)
}

//export OPQBot_Cookie_ClientKey_Set
func OPQBot_Cookie_ClientKey_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	op.ClientKey = C.GoString(val)
}

//export OPQBot_Cookie_Cookies_Get
func OPQBot_Cookie_Cookies_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	return C.CString(op.Cookies)
}

//export OPQBot_Cookie_Cookies_Set
func OPQBot_Cookie_Cookies_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	op.Cookies = C.GoString(val)
}

//export OPQBot_Cookie_Gtk_Get
func OPQBot_Cookie_Gtk_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	return C.CString(op.Gtk)
}

//export OPQBot_Cookie_Gtk_Set
func OPQBot_Cookie_Gtk_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	op.Gtk = C.GoString(val)
}

//export OPQBot_Cookie_Gtk32_Get
func OPQBot_Cookie_Gtk32_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	return C.CString(op.Gtk32)
}

//export OPQBot_Cookie_Gtk32_Set
func OPQBot_Cookie_Gtk32_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	op.Gtk32 = C.GoString(val)
}

//export OPQBot_Cookie_Skey_Get
func OPQBot_Cookie_Skey_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	return C.CString(op.Skey)
}

//export OPQBot_Cookie_Skey_Set
func OPQBot_Cookie_Skey_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Cookie(handle)
	op.Skey = C.GoString(val)
}

// --- wrapping struct: OPQBot.SendTypePicMsgByBase64Content ---
//export OPQBot_SendTypePicMsgByBase64Content_CTor
func OPQBot_SendTypePicMsgByBase64Content_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypePicMsgByBase64Content(&OPQBot.SendTypePicMsgByBase64Content{}))
}

//export OPQBot_SendTypePicMsgByBase64Content_Content_Get
func OPQBot_SendTypePicMsgByBase64Content_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64Content(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypePicMsgByBase64Content_Content_Set
func OPQBot_SendTypePicMsgByBase64Content_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64Content(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByBase64Content_Base64_Get
func OPQBot_SendTypePicMsgByBase64Content_Base64_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64Content(handle)
	return C.CString(op.Base64)
}

//export OPQBot_SendTypePicMsgByBase64Content_Base64_Set
func OPQBot_SendTypePicMsgByBase64Content_Base64_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64Content(handle)
	op.Base64 = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByBase64Content_Flash_Get
func OPQBot_SendTypePicMsgByBase64Content_Flash_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64Content(handle)
	return boolGoToPy(op.Flash)
}

//export OPQBot_SendTypePicMsgByBase64Content_Flash_Set
func OPQBot_SendTypePicMsgByBase64Content_Flash_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByBase64Content(handle)
	op.Flash = boolPyToGo(val)
}

// --- wrapping struct: OPQBot.SendTypePicMsgByMd5ContentPrivateChat ---
//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_CTor
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(&OPQBot.SendTypePicMsgByMd5ContentPrivateChat{}))
}

//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Content_Get
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Content_Set
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Md5s_Get
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Md5s_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(handle)
	return handleFromPtr_Slice_string(&op.Md5s)
}

//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Md5s_Set
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Md5s_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(handle)
	op.Md5s = deptrFromHandle_Slice_string(val)
}

//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Group_Get
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Group_Set
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(handle)
	op.Group = int64(val)
}

//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Flash_Get
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Flash_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(handle)
	return boolGoToPy(op.Flash)
}

//export OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Flash_Set
func OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Flash_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByMd5ContentPrivateChat(handle)
	op.Flash = boolPyToGo(val)
}

// --- wrapping struct: OPQBot.SendTypePicMsgByUrlContentPrivateChat ---
//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_CTor
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypePicMsgByUrlContentPrivateChat(&OPQBot.SendTypePicMsgByUrlContentPrivateChat{}))
}

//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_Content_Get
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_Content_Set
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_PicUrl_Get
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_PicUrl_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(handle)
	return C.CString(op.PicUrl)
}

//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_PicUrl_Set
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_PicUrl_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(handle)
	op.PicUrl = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_Group_Get
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_Group_Set
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(handle)
	op.Group = int64(val)
}

//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_Flash_Get
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_Flash_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(handle)
	return boolGoToPy(op.Flash)
}

//export OPQBot_SendTypePicMsgByUrlContentPrivateChat_Flash_Set
func OPQBot_SendTypePicMsgByUrlContentPrivateChat_Flash_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByUrlContentPrivateChat(handle)
	op.Flash = boolPyToGo(val)
}

// --- wrapping struct: OPQBot.SendTypeForwordContent ---
//export OPQBot_SendTypeForwordContent_CTor
func OPQBot_SendTypeForwordContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeForwordContent(&OPQBot.SendTypeForwordContent{}))
}

//export OPQBot_SendTypeForwordContent_ForwordBuf_Get
func OPQBot_SendTypeForwordContent_ForwordBuf_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeForwordContent(handle)
	return C.CString(op.ForwordBuf)
}

//export OPQBot_SendTypeForwordContent_ForwordBuf_Set
func OPQBot_SendTypeForwordContent_ForwordBuf_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeForwordContent(handle)
	op.ForwordBuf = C.GoString(val)
}

//export OPQBot_SendTypeForwordContent_ForwordField_Get
func OPQBot_SendTypeForwordContent_ForwordField_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeForwordContent(handle)
	return C.longlong(op.ForwordField)
}

//export OPQBot_SendTypeForwordContent_ForwordField_Set
func OPQBot_SendTypeForwordContent_ForwordField_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeForwordContent(handle)
	op.ForwordField = int(val)
}

//export OPQBot_SendTypeForwordContent_Content_Get
func OPQBot_SendTypeForwordContent_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeForwordContent(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeForwordContent_Content_Set
func OPQBot_SendTypeForwordContent_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeForwordContent(handle)
	op.Content = C.GoString(val)
}

// --- wrapping struct: OPQBot.SendTypePicMsgByLocalContent ---
//export OPQBot_SendTypePicMsgByLocalContent_CTor
func OPQBot_SendTypePicMsgByLocalContent_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypePicMsgByLocalContent(&OPQBot.SendTypePicMsgByLocalContent{}))
}

//export OPQBot_SendTypePicMsgByLocalContent_Content_Get
func OPQBot_SendTypePicMsgByLocalContent_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContent(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypePicMsgByLocalContent_Content_Set
func OPQBot_SendTypePicMsgByLocalContent_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContent(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByLocalContent_Path_Get
func OPQBot_SendTypePicMsgByLocalContent_Path_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContent(handle)
	return C.CString(op.Path)
}

//export OPQBot_SendTypePicMsgByLocalContent_Path_Set
func OPQBot_SendTypePicMsgByLocalContent_Path_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContent(handle)
	op.Path = C.GoString(val)
}

//export OPQBot_SendTypePicMsgByLocalContent_Flash_Get
func OPQBot_SendTypePicMsgByLocalContent_Flash_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContent(handle)
	return boolGoToPy(op.Flash)
}

//export OPQBot_SendTypePicMsgByLocalContent_Flash_Set
func OPQBot_SendTypePicMsgByLocalContent_Flash_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_OPQBot_SendTypePicMsgByLocalContent(handle)
	op.Flash = boolPyToGo(val)
}

// --- wrapping struct: OPQBot.SendTypeReplyContentPrivateChat ---
//export OPQBot_SendTypeReplyContentPrivateChat_CTor
func OPQBot_SendTypeReplyContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeReplyContentPrivateChat(&OPQBot.SendTypeReplyContentPrivateChat{}))
}

//export OPQBot_SendTypeReplyContentPrivateChat_Content_Get
func OPQBot_SendTypeReplyContentPrivateChat_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeReplyContentPrivateChat(handle)
	return C.CString(op.Content)
}

//export OPQBot_SendTypeReplyContentPrivateChat_Content_Set
func OPQBot_SendTypeReplyContentPrivateChat_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeReplyContentPrivateChat(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_SendTypeReplyContentPrivateChat_Group_Get
func OPQBot_SendTypeReplyContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeReplyContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypeReplyContentPrivateChat_Group_Set
func OPQBot_SendTypeReplyContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeReplyContentPrivateChat(handle)
	op.Group = int64(val)
}

// --- wrapping struct: OPQBot.SendTypeVoiceByLocalContentPrivateChat ---
//export OPQBot_SendTypeVoiceByLocalContentPrivateChat_CTor
func OPQBot_SendTypeVoiceByLocalContentPrivateChat_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_SendTypeVoiceByLocalContentPrivateChat(&OPQBot.SendTypeVoiceByLocalContentPrivateChat{}))
}

//export OPQBot_SendTypeVoiceByLocalContentPrivateChat_Path_Get
func OPQBot_SendTypeVoiceByLocalContentPrivateChat_Path_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByLocalContentPrivateChat(handle)
	return C.CString(op.Path)
}

//export OPQBot_SendTypeVoiceByLocalContentPrivateChat_Path_Set
func OPQBot_SendTypeVoiceByLocalContentPrivateChat_Path_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByLocalContentPrivateChat(handle)
	op.Path = C.GoString(val)
}

//export OPQBot_SendTypeVoiceByLocalContentPrivateChat_Group_Get
func OPQBot_SendTypeVoiceByLocalContentPrivateChat_Group_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByLocalContentPrivateChat(handle)
	return C.longlong(op.Group)
}

//export OPQBot_SendTypeVoiceByLocalContentPrivateChat_Group_Set
func OPQBot_SendTypeVoiceByLocalContentPrivateChat_Group_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_SendTypeVoiceByLocalContentPrivateChat(handle)
	op.Group = int64(val)
}

// --- wrapping struct: OPQBot.GroupFileMsg ---
//export OPQBot_GroupFileMsg_CTor
func OPQBot_GroupFileMsg_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupFileMsg(&OPQBot.GroupFileMsg{}))
}

//export OPQBot_GroupFileMsg_FileID_Get
func OPQBot_GroupFileMsg_FileID_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupFileMsg(handle)
	return C.CString(op.FileID)
}

//export OPQBot_GroupFileMsg_FileID_Set
func OPQBot_GroupFileMsg_FileID_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupFileMsg(handle)
	op.FileID = C.GoString(val)
}

//export OPQBot_GroupFileMsg_FileName_Get
func OPQBot_GroupFileMsg_FileName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupFileMsg(handle)
	return C.CString(op.FileName)
}

//export OPQBot_GroupFileMsg_FileName_Set
func OPQBot_GroupFileMsg_FileName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupFileMsg(handle)
	op.FileName = C.GoString(val)
}

//export OPQBot_GroupFileMsg_FileSize_Get
func OPQBot_GroupFileMsg_FileSize_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupFileMsg(handle)
	return C.longlong(op.FileSize)
}

//export OPQBot_GroupFileMsg_FileSize_Set
func OPQBot_GroupFileMsg_FileSize_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupFileMsg(handle)
	op.FileSize = int(val)
}

//export OPQBot_GroupFileMsg_Tips_Get
func OPQBot_GroupFileMsg_Tips_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupFileMsg(handle)
	return C.CString(op.Tips)
}

//export OPQBot_GroupFileMsg_Tips_Set
func OPQBot_GroupFileMsg_Tips_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupFileMsg(handle)
	op.Tips = C.GoString(val)
}

// --- wrapping struct: OPQBot.GroupMsgPack ---
//export OPQBot_GroupMsgPack_CTor
func OPQBot_GroupMsgPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupMsgPack(&OPQBot.GroupMsgPack{}))
}

//export OPQBot_GroupMsgPack_Content_Get
func OPQBot_GroupMsgPack_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.CString(op.Content)
}

//export OPQBot_GroupMsgPack_Content_Set
func OPQBot_GroupMsgPack_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_GroupMsgPack_FromGroupID_Get
func OPQBot_GroupMsgPack_FromGroupID_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.longlong(op.FromGroupID)
}

//export OPQBot_GroupMsgPack_FromGroupID_Set
func OPQBot_GroupMsgPack_FromGroupID_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.FromGroupID = int64(val)
}

//export OPQBot_GroupMsgPack_FromGroupName_Get
func OPQBot_GroupMsgPack_FromGroupName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.CString(op.FromGroupName)
}

//export OPQBot_GroupMsgPack_FromGroupName_Set
func OPQBot_GroupMsgPack_FromGroupName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.FromGroupName = C.GoString(val)
}

//export OPQBot_GroupMsgPack_FromNickName_Get
func OPQBot_GroupMsgPack_FromNickName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.CString(op.FromNickName)
}

//export OPQBot_GroupMsgPack_FromNickName_Set
func OPQBot_GroupMsgPack_FromNickName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.FromNickName = C.GoString(val)
}

//export OPQBot_GroupMsgPack_FromUserID_Get
func OPQBot_GroupMsgPack_FromUserID_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.longlong(op.FromUserID)
}

//export OPQBot_GroupMsgPack_FromUserID_Set
func OPQBot_GroupMsgPack_FromUserID_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.FromUserID = int64(val)
}

//export OPQBot_GroupMsgPack_MsgRandom_Get
func OPQBot_GroupMsgPack_MsgRandom_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.longlong(op.MsgRandom)
}

//export OPQBot_GroupMsgPack_MsgRandom_Set
func OPQBot_GroupMsgPack_MsgRandom_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.MsgRandom = int64(val)
}

//export OPQBot_GroupMsgPack_MsgSeq_Get
func OPQBot_GroupMsgPack_MsgSeq_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.longlong(op.MsgSeq)
}

//export OPQBot_GroupMsgPack_MsgSeq_Set
func OPQBot_GroupMsgPack_MsgSeq_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.MsgSeq = int(val)
}

//export OPQBot_GroupMsgPack_MsgTime_Get
func OPQBot_GroupMsgPack_MsgTime_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.longlong(op.MsgTime)
}

//export OPQBot_GroupMsgPack_MsgTime_Set
func OPQBot_GroupMsgPack_MsgTime_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.MsgTime = int(val)
}

//export OPQBot_GroupMsgPack_MsgType_Get
func OPQBot_GroupMsgPack_MsgType_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	return C.CString(op.MsgType)
}

//export OPQBot_GroupMsgPack_MsgType_Set
func OPQBot_GroupMsgPack_MsgType_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_GroupMsgPack(handle)
	op.MsgType = C.GoString(val)
}

// --- wrapping struct: OPQBot.GroupShutPack ---
//export OPQBot_GroupShutPack_CTor
func OPQBot_GroupShutPack_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_GroupShutPack(&OPQBot.GroupShutPack{}))
}

// --- wrapping struct: OPQBot.Reply ---
//export OPQBot_Reply_CTor
func OPQBot_Reply_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_Reply(&OPQBot.Reply{}))
}

//export OPQBot_Reply_Content_Get
func OPQBot_Reply_Content_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Reply(handle)
	return C.CString(op.Content)
}

//export OPQBot_Reply_Content_Set
func OPQBot_Reply_Content_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Reply(handle)
	op.Content = C.GoString(val)
}

//export OPQBot_Reply_SrcContent_Get
func OPQBot_Reply_SrcContent_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Reply(handle)
	return C.CString(op.SrcContent)
}

//export OPQBot_Reply_SrcContent_Set
func OPQBot_Reply_SrcContent_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Reply(handle)
	op.SrcContent = C.GoString(val)
}

//export OPQBot_Reply_MsgSeq_Get
func OPQBot_Reply_MsgSeq_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_Reply(handle)
	return C.longlong(op.MsgSeq)
}

//export OPQBot_Reply_MsgSeq_Set
func OPQBot_Reply_MsgSeq_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_Reply(handle)
	op.MsgSeq = int(val)
}

//export OPQBot_Reply_Tips_Get
func OPQBot_Reply_Tips_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_Reply(handle)
	return C.CString(op.Tips)
}

//export OPQBot_Reply_Tips_Set
func OPQBot_Reply_Tips_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_Reply(handle)
	op.Tips = C.GoString(val)
}

//export OPQBot_Reply_UserID_Get
func OPQBot_Reply_UserID_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_OPQBot_Reply(handle)
	return handleFromPtr_Slice_int64(&op.UserID)
}

//export OPQBot_Reply_UserID_Set
func OPQBot_Reply_UserID_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_OPQBot_Reply(handle)
	op.UserID = deptrFromHandle_Slice_int64(val)
}

// --- wrapping struct: OPQBot.UserCardInfo ---
//export OPQBot_UserCardInfo_CTor
func OPQBot_UserCardInfo_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_OPQBot_UserCardInfo(&OPQBot.UserCardInfo{}))
}

//export OPQBot_UserCardInfo_Age_Get
func OPQBot_UserCardInfo_Age_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.longlong(op.Age)
}

//export OPQBot_UserCardInfo_Age_Set
func OPQBot_UserCardInfo_Age_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.Age = int(val)
}

//export OPQBot_UserCardInfo_City_Get
func OPQBot_UserCardInfo_City_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.CString(op.City)
}

//export OPQBot_UserCardInfo_City_Set
func OPQBot_UserCardInfo_City_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.City = C.GoString(val)
}

//export OPQBot_UserCardInfo_LikeNums_Get
func OPQBot_UserCardInfo_LikeNums_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.longlong(op.LikeNums)
}

//export OPQBot_UserCardInfo_LikeNums_Set
func OPQBot_UserCardInfo_LikeNums_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.LikeNums = int(val)
}

//export OPQBot_UserCardInfo_LoginDays_Get
func OPQBot_UserCardInfo_LoginDays_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.longlong(op.LoginDays)
}

//export OPQBot_UserCardInfo_LoginDays_Set
func OPQBot_UserCardInfo_LoginDays_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.LoginDays = int(val)
}

//export OPQBot_UserCardInfo_NickName_Get
func OPQBot_UserCardInfo_NickName_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.CString(op.NickName)
}

//export OPQBot_UserCardInfo_NickName_Set
func OPQBot_UserCardInfo_NickName_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.NickName = C.GoString(val)
}

//export OPQBot_UserCardInfo_Province_Get
func OPQBot_UserCardInfo_Province_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.CString(op.Province)
}

//export OPQBot_UserCardInfo_Province_Set
func OPQBot_UserCardInfo_Province_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.Province = C.GoString(val)
}

//export OPQBot_UserCardInfo_QQLevel_Get
func OPQBot_UserCardInfo_QQLevel_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.longlong(op.QQLevel)
}

//export OPQBot_UserCardInfo_QQLevel_Set
func OPQBot_UserCardInfo_QQLevel_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.QQLevel = int(val)
}

//export OPQBot_UserCardInfo_QQUin_Get
func OPQBot_UserCardInfo_QQUin_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.longlong(op.QQUin)
}

//export OPQBot_UserCardInfo_QQUin_Set
func OPQBot_UserCardInfo_QQUin_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.QQUin = int64(val)
}

//export OPQBot_UserCardInfo_Sex_Get
func OPQBot_UserCardInfo_Sex_Get(handle CGoHandle) C.longlong {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	return C.longlong(op.Sex)
}

//export OPQBot_UserCardInfo_Sex_Set
func OPQBot_UserCardInfo_Sex_Set(handle CGoHandle, val C.longlong) {
	op := ptrFromHandle_OPQBot_UserCardInfo(handle)
	op.Sex = int(val)
}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

//export OPQBot_ParserVideoMsg
func OPQBot_ParserVideoMsg(pack CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := OPQBot.ParserVideoMsg(*ptrFromHandle_OPQBot_GroupMsgPack(pack))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_VideoMsg(nil)
	}
	return handleFromPtr_OPQBot_VideoMsg(&cret)
}

//export OPQBot_ParserGroupPicMsg
func OPQBot_ParserGroupPicMsg(pack CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := OPQBot.ParserGroupPicMsg(*ptrFromHandle_OPQBot_GroupMsgPack(pack))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_PicMsg(nil)
	}
	return handleFromPtr_OPQBot_PicMsg(&cret)
}

//export OPQBot_ParserGroupAtMsg
func OPQBot_ParserGroupAtMsg(pack CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := OPQBot.ParserGroupAtMsg(*ptrFromHandle_OPQBot_GroupMsgPack(pack))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_AtMsg(nil)
	}
	return handleFromPtr_OPQBot_AtMsg(&cret)
}

//export OPQBot_NewBotManager
func OPQBot_NewBotManager(QQ C.longlong, OPQUrl *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return handleFromPtr_Ptr_OPQBot_BotManager(OPQBot.NewBotManager(int64(QQ), C.GoString(OPQUrl)))

}

//export OPQBot_ParserGroupFileMsg
func OPQBot_ParserGroupFileMsg(pack CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := OPQBot.ParserGroupFileMsg(*ptrFromHandle_OPQBot_GroupMsgPack(pack))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_GroupFileMsg(nil)
	}
	return handleFromPtr_OPQBot_GroupFileMsg(&cret)
}

//export OPQBot_ParserGroupReplyMsg
func OPQBot_ParserGroupReplyMsg(pack CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := OPQBot.ParserGroupReplyMsg(*ptrFromHandle_OPQBot_GroupMsgPack(pack))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_OPQBot_Reply(nil)
	}
	return handleFromPtr_OPQBot_Reply(&cret)
}

// ---- Functions ---

//export OPQBot_DecodeFaceFromSentences
func OPQBot_DecodeFaceFromSentences(encode *C.char, format *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.CString(OPQBot.DecodeFaceFromSentences(C.GoString(encode), C.GoString(format)))

}

//export OPQBot_MacroAt
func OPQBot_MacroAt(qqs CGoHandle) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.CString(OPQBot.MacroAt(deptrFromHandle_Slice_int64(qqs)))

}

//export OPQBot_VoiceSilkToMp3
func OPQBot_VoiceSilkToMp3(base64EncodedSilk *C.char) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := OPQBot.VoiceSilkToMp3(C.GoString(base64EncodedSilk))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return handleFromPtr_Slice_byte(nil)
	}
	return handleFromPtr_Slice_byte(&cret)
}

//export OPQBot_DecodeFace
func OPQBot_DecodeFace(encodeFace *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := OPQBot.DecodeFace(C.GoString(encodeFace))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}

//export OPQBot_MacroAtAll
func OPQBot_MacroAtAll() *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.CString(OPQBot.MacroAtAll())

}

//export OPQBot_MacroId
func OPQBot_MacroId() *C.char {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	return C.CString(OPQBot.MacroId())

}

//export OPQBot_SetLog
func OPQBot_SetLog(l CGoHandle, goRun C.char) {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	if boolPyToGo(goRun) {
		go OPQBot.SetLog(ptrFromHandle_Ptr_logrus_Entry(l))
	} else {
		OPQBot.SetLog(ptrFromHandle_Ptr_logrus_Entry(l))
	}
}

//export OPQBot_VoiceMp3ToSilk
func OPQBot_VoiceMp3ToSilk(mp3Path *C.char) *C.char {
	_saved_thread := C.PyEval_SaveThread()
	cret, __err := OPQBot.VoiceMp3ToSilk(C.GoString(mp3Path))

	C.PyEval_RestoreThread(_saved_thread)
	if __err != nil {
		estr := C.CString(__err.Error())
		C.PyErr_SetString(C.PyExc_RuntimeError, estr)
		C.free(unsafe.Pointer(estr))
		return C.CString("")
	}
	return C.CString(cret)
}
