
# python wrapper for package github.com/mcoo/OPQBot within overall package OPQBot
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=bindings -vm=python3 github.com/mcoo/OPQBot

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _OPQBot
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from OPQBot import OPQBot
# and then refer to everything using OPQBot. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []logrus.Hook
class Slice_logrus_Hook(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.Slice_logrus_Hook_CTor()
			_OPQBot.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_logrus_Hook.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		s = 'OPQBot.Slice_logrus_Hook len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'OPQBot.Slice_logrus_Hook([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _OPQBot.Slice_logrus_Hook_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _OPQBot.Slice_logrus_Hook_len(self.handle)
				return Slice_logrus_Hook(handle=_OPQBot.Slice_logrus_Hook_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return go.logrus_Hook(handle=_OPQBot.Slice_logrus_Hook_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_OPQBot.Slice_logrus_Hook_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_logrus_Hook.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _OPQBot.Slice_logrus_Hook_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_OPQBot.Slice_logrus_Hook_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []logrus.Level
class Slice_logrus_Level(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.Slice_logrus_Level_CTor()
			_OPQBot.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_logrus_Level.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		s = 'OPQBot.Slice_logrus_Level len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'OPQBot.Slice_logrus_Level([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _OPQBot.Slice_logrus_Level_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _OPQBot.Slice_logrus_Level_len(self.handle)
				return Slice_logrus_Level(handle=_OPQBot.Slice_logrus_Level_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _OPQBot.Slice_logrus_Level_elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_OPQBot.Slice_logrus_Level_set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_logrus_Level.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _OPQBot.Slice_logrus_Level_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_OPQBot.Slice_logrus_Level_append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for slice []interface{}
class Slice_interface_(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.Slice_interface__CTor()
			_OPQBot.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_interface_.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		s = 'OPQBot.Slice_interface_ len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'OPQBot.Slice_interface_([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _OPQBot.Slice_interface__len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _OPQBot.Slice_interface__len(self.handle)
				return Slice_interface_(handle=_OPQBot.Slice_interface__subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return _OPQBot.Slice_interface__elem(self.handle, key)
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_OPQBot.Slice_interface__set(self.handle, idx, value)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_interface_.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _OPQBot.Slice_interface__elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_OPQBot.Slice_interface__append(self.handle, value)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]

# Python type for map map[string]string
class Map_string_string(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.Map_string_string_CTor()
			_OPQBot.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('Map_string_string.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_OPQBot.Map_string_string_set(self.handle, k, v)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		s = 'OPQBot.Map_string_string len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'OPQBot.Map_string_string({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _OPQBot.Map_string_string_len(self.handle)
	def __getitem__(self, key):
		return _OPQBot.Map_string_string_elem(self.handle, key)
	def __setitem__(self, key, value):
		_OPQBot.Map_string_string_set(self.handle, key, value)
	def __delitem__(self, key):
		return _OPQBot.Map_string_string_delete(self.handle, key)
	def keys(self):
		return go.Slice_string(handle=_OPQBot.Map_string_string_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _OPQBot.Map_string_string_contains(self.handle, key)


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
EventNameOnBotEvent = "OnFriendMsgs"
EventNameOnConnected = "connection"
EventNameOnDisconnected = "disconnection"
EventNameOnFriendMessage = "OnFriendMsgs"
EventNameOnGroupAdmin = "ON_EVENT_GROUP_ADMIN"
EventNameOnGroupAdminSysNotify = "ON_EVENT_GROUP_ADMINSYSNOTIFY"
EventNameOnGroupExit = "ON_EVENT_GROUP_EXIT"
EventNameOnGroupExitSuccess = "ON_EVENT_GROUP_EXIT_SUCC"
EventNameOnGroupJoin = "ON_EVENT_GROUP_JOIN"
EventNameOnGroupMessage = "OnGroupMsgs"
EventNameOnGroupRevoke = "ON_EVENT_GROUP_REVOKE"
EventNameOnGroupShut = "ON_EVENT_GROUP_SHUT"
EventNameOnGroupSystemNotify = "ON_EVENT_GROUP_SYSTEMNOTIFY"
EventNameOnOther = "other"
Face_K歌 = "[表情140]"
Face_NO = "[表情123]"
Face_OK = "[表情124]"
Face_doge = "[表情179]"
Face_不开心 = "[表情194]"
Face_乒乓 = "[表情115]"
Face_佛系 = "[表情220]"
Face_便便 = "[表情59]"
Face_偷笑 = "[表情20]"
Face_傲慢 = "[表情23]"
Face_再见 = "[表情39]"
Face_冷汗 = "[表情96]"
Face_冷漠 = "[表情197]"
Face_凋谢 = "[表情64]"
Face_刀 = "[表情56]"
Face_加油必胜 = "[表情245]"
Face_加油抱抱 = "[表情246]"
Face_勾引 = "[表情119]"
Face_卖萌 = "[表情175]"
Face_双喜 = "[表情136]"
Face_发呆 = "[表情3]"
Face_发怒 = "[表情11]"
Face_发抖 = "[表情41]"
Face_口罩护体 = "[表情247]"
Face_可怜 = "[表情111]"
Face_可爱 = "[表情21]"
Face_右哼哼 = "[表情103]"
Face_右太极 = "[表情134]"
Face_吃 = "[表情204]"
Face_吐 = "[表情19]"
Face_吓 = "[表情110]"
Face_呃 = "[表情198]"
Face_呲牙 = "[表情13]"
Face_咒骂 = "[表情31]"
Face_咖啡 = "[表情60]"
Face_哈欠 = "[表情104]"
Face_啤酒 = "[表情113]"
Face_啵啵 = "[表情214]"
Face_喝奶 = "[表情148]"
Face_喝彩 = "[表情144]"
Face_喷血 = "[表情177]"
Face_嗨皮牛耶 = "[表情137]"
Face_嘘 = "[表情33]"
Face_回头 = "[表情127]"
Face_困 = "[表情25]"
Face_坏笑 = "[表情101]"
Face_大哭 = "[表情9]"
Face_大笑 = "[表情193]"
Face_太阳 = "[表情74]"
Face_奋斗 = "[表情30]"
Face_好棒 = "[表情199]"
Face_委屈 = "[表情106]"
Face_害怕 = "[表情206]"
Face_害羞 = "[表情6]"
Face_小样儿 = "[表情208]"
Face_小纠结 = "[表情176]"
Face_尴尬 = "[表情10]"
Face_左亲亲 = "[表情109]"
Face_左哼哼 = "[表情102]"
Face_左太极 = "[表情133]"
Face_差劲 = "[表情121]"
Face_幽灵 = "[表情187]"
Face_得意 = "[表情4]"
Face_微笑 = "[表情14]"
Face_心碎 = "[表情67]"
Face_快哭了 = "[表情107]"
Face_怄火 = "[表情86]"
Face_悠闲 = "[表情29]"
Face_惊喜 = "[表情180]"
Face_惊恐 = "[表情26]"
Face_惊讶 = "[表情0]"
Face_憨笑 = "[表情28]"
Face_我不看 = "[表情211]"
Face_我最美 = "[表情183]"
Face_手枪 = "[表情169]"
Face_托脸 = "[表情203]"
Face_托腮 = "[表情212]"
Face_扯一扯 = "[表情217]"
Face_抓狂 = "[表情18]"
Face_折磨 = "[表情35]"
Face_抠鼻 = "[表情98]"
Face_抱拳 = "[表情118]"
Face_拍头 = "[表情216]"
Face_拜托 = "[表情200]"
Face_拥抱 = "[表情49]"
Face_拳头 = "[表情120]"
Face_挥手 = "[表情129]"
Face_握手 = "[表情78]"
Face_撇嘴 = "[表情1]"
Face_擦汗 = "[表情97]"
Face_敲打 = "[表情38]"
Face_斜眼笑 = "[表情178]"
Face_无奈 = "[表情174]"
Face_无聊 = "[表情202]"
Face_晕 = "[表情34]"
Face_月亮 = "[表情75]"
Face_棒棒糖 = "[表情147]"
Face_河蟹 = "[表情184]"
Face_泪奔 = "[表情173]"
Face_流汗 = "[表情27]"
Face_流泪 = "[表情5]"
Face_激动 = "[表情130]"
Face_灯笼 = "[表情138]"
Face_炸弹 = "[表情55]"
Face_点赞 = "[表情201]"
Face_爆筋 = "[表情146]"
Face_爱你 = "[表情122]"
Face_爱心 = "[表情66]"
Face_爱情 = "[表情42]"
Face_猪头 = "[表情46]"
Face_献吻 = "[表情132]"
Face_玫瑰 = "[表情63]"
Face_瓢虫 = "[表情117]"
Face_疑问 = "[表情32]"
Face_白眼 = "[表情22]"
Face_眨眼睛 = "[表情172]"
Face_睡 = "[表情8]"
Face_磕头 = "[表情126]"
Face_示爱 = "[表情116]"
Face_礼物 = "[表情69]"
Face_祈祷 = "[表情145]"
Face_笑哭 = "[表情182]"
Face_篮球 = "[表情114]"
Face_糊脸 = "[表情215]"
Face_糗大了 = "[表情100]"
Face_红包 = "[表情192]"
Face_羊驼 = "[表情185]"
Face_胜利 = "[表情79]"
Face_舔一舔 = "[表情218]"
Face_色 = "[表情2]"
Face_花痴 = "[表情207]"
Face_茶 = "[表情171]"
Face_药 = "[表情168]"
Face_菊花 = "[表情190]"
Face_菜刀 = "[表情112]"
Face_蛋 = "[表情188]"
Face_蛋糕 = "[表情53]"
Face_街舞 = "[表情131]"
Face_衰 = "[表情36]"
Face_西瓜 = "[表情89]"
Face_调皮 = "[表情12]"
Face_赞 = "[表情76]"
Face_足球 = "[表情57]"
Face_跳绳 = "[表情128]"
Face_跳跳 = "[表情43]"
Face_踩 = "[表情77]"
Face_蹭一蹭 = "[表情219]"
Face_转圈 = "[表情125]"
Face_送花 = "[表情205]"
Face_鄙视 = "[表情105]"
Face_酷 = "[表情16]"
Face_钞票 = "[表情158]"
Face_闪电 = "[表情54]"
Face_闭嘴 = "[表情7]"
Face_阴险 = "[表情108]"
Face_难过 = "[表情15]"
Face_顶呱呱 = "[表情221]"
Face_飙泪 = "[表情210]"
Face_飞吻 = "[表情82]"
Face_飞机 = "[表情151]"
Face_饥饿 = "[表情24]"
Face_饭 = "[表情61]"
Face_骚扰 = "[表情181]"
Face_骷髅 = "[表情37]"
Face_鼓掌 = "[表情99]"
SendToTypeFriend = 1
SendToTypeGroup = 2
SendToTypePrivateChat = 3


# ---- Global Variables: can only use functions to access ---
def FaceMap():
	"""
	FaceMap Gets Go Variable: OPQBot.FaceMap
	
	"""
	return Map_string_string(handle=_OPQBot.OPQBot_FaceMap())

def Set_FaceMap(value):
	"""
	Set_FaceMap Sets Go Variable: OPQBot.FaceMap
	
	"""
	if isinstance(value, go.GoClass):
		_OPQBot.OPQBot_Set_FaceMap(value.handle)
	else:
		_OPQBot.OPQBot_Set_FaceMap(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct OPQBot.SendTypeTextMsgContentPrivateChat
class SendTypeTextMsgContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeTextMsgContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Group = args[1]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeTextMsgContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeTextMsgContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeTextMsgContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeTextMsgContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeTextMsgContentPrivateChat_Content_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypeTextMsgContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeTextMsgContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeTextMsgContentPrivateChat_Group_Set(self.handle, value)

# Python type for struct OPQBot.Context
class Context(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_Context_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Ban = args[0]
			if "Ban" in kwargs:
				self.Ban = kwargs["Ban"]
			if  1 < len(args):
				self.NowIndex = args[1]
			if "NowIndex" in kwargs:
				self.NowIndex = kwargs["NowIndex"]
			if  2 < len(args):
				self.MaxIndex = args[2]
			if "MaxIndex" in kwargs:
				self.MaxIndex = kwargs["MaxIndex"]
			if  4 < len(args):
				self.Bot = args[4]
			if "Bot" in kwargs:
				self.Bot = kwargs["Bot"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.Context{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.Context ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Ban(self):
		return _OPQBot.OPQBot_Context_Ban_Get(self.handle)
	@Ban.setter
	def Ban(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Context_Ban_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Context_Ban_Set(self.handle, value)
	@property
	def NowIndex(self):
		return _OPQBot.OPQBot_Context_NowIndex_Get(self.handle)
	@NowIndex.setter
	def NowIndex(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Context_NowIndex_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Context_NowIndex_Set(self.handle, value)
	@property
	def MaxIndex(self):
		return _OPQBot.OPQBot_Context_MaxIndex_Get(self.handle)
	@MaxIndex.setter
	def MaxIndex(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Context_MaxIndex_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Context_MaxIndex_Set(self.handle, value)
	@property
	def Bot(self):
		return BotManager(handle=_OPQBot.OPQBot_Context_Bot_Get(self.handle))
	@Bot.setter
	def Bot(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Context_Bot_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def Next(self, currentQQ, result, goRun=False):
		"""Next(long currentQQ, str result) """
		_OPQBot.OPQBot_Context_Next(self.handle, currentQQ, result, goRun)

# Python type for struct OPQBot.GroupFileResult
class GroupFileResult(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupFileResult_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Ret = args[0]
			if "Ret" in kwargs:
				self.Ret = kwargs["Ret"]
			if  1 < len(args):
				self.URL = args[1]
			if "URL" in kwargs:
				self.URL = kwargs["URL"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupFileResult{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupFileResult ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Ret(self):
		return _OPQBot.OPQBot_GroupFileResult_Ret_Get(self.handle)
	@Ret.setter
	def Ret(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupFileResult_Ret_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupFileResult_Ret_Set(self.handle, value)
	@property
	def URL(self):
		return _OPQBot.OPQBot_GroupFileResult_URL_Get(self.handle)
	@URL.setter
	def URL(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupFileResult_URL_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupFileResult_URL_Set(self.handle, value)

# Python type for struct OPQBot.GroupJoinPack
class GroupJoinPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupJoinPack_CTor()
			_OPQBot.IncRef(self.handle)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupJoinPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupJoinPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct OPQBot.SendTypePicMsgByLocalContentPrivateChat
class SendTypePicMsgByLocalContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Path = args[1]
			if "Path" in kwargs:
				self.Path = kwargs["Path"]
			if  2 < len(args):
				self.Group = args[2]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
			if  3 < len(args):
				self.Flash = args[3]
			if "Flash" in kwargs:
				self.Flash = kwargs["Flash"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByLocalContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByLocalContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Content_Set(self.handle, value)
	@property
	def Path(self):
		return _OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Path_Get(self.handle)
	@Path.setter
	def Path(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Path_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Path_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Group_Set(self.handle, value)
	@property
	def Flash(self):
		return _OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Flash_Get(self.handle)
	@Flash.setter
	def Flash(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Flash_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByLocalContentPrivateChat_Flash_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeVoiceByLocalContent
class SendTypeVoiceByLocalContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeVoiceByLocalContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Path = args[0]
			if "Path" in kwargs:
				self.Path = kwargs["Path"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeVoiceByLocalContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeVoiceByLocalContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Path(self):
		return _OPQBot.OPQBot_SendTypeVoiceByLocalContent_Path_Get(self.handle)
	@Path.setter
	def Path(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeVoiceByLocalContent_Path_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeVoiceByLocalContent_Path_Set(self.handle, value)

# Python type for struct OPQBot.GroupExitPack
class GroupExitPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupExitPack_CTor()
			_OPQBot.IncRef(self.handle)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupExitPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupExitPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct OPQBot.GroupExitSuccessPack
class GroupExitSuccessPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupExitSuccessPack_CTor()
			_OPQBot.IncRef(self.handle)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupExitSuccessPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupExitSuccessPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct OPQBot.GroupList
class GroupList(go.GoClass):
	"""GroupList 获取群列表表单\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupList_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Count = args[0]
			if "Count" in kwargs:
				self.Count = kwargs["Count"]
			if  1 < len(args):
				self.NextToken = args[1]
			if "NextToken" in kwargs:
				self.NextToken = kwargs["NextToken"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupList{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupList ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Count(self):
		return _OPQBot.OPQBot_GroupList_Count_Get(self.handle)
	@Count.setter
	def Count(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupList_Count_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupList_Count_Set(self.handle, value)
	@property
	def NextToken(self):
		return _OPQBot.OPQBot_GroupList_NextToken_Get(self.handle)
	@NextToken.setter
	def NextToken(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupList_NextToken_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupList_NextToken_Set(self.handle, value)

# Python type for struct OPQBot.Result
class Result(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_Result_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Msg = args[0]
			if "Msg" in kwargs:
				self.Msg = kwargs["Msg"]
			if  1 < len(args):
				self.Ret = args[1]
			if "Ret" in kwargs:
				self.Ret = kwargs["Ret"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.Result{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.Result ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Msg(self):
		return _OPQBot.OPQBot_Result_Msg_Get(self.handle)
	@Msg.setter
	def Msg(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Result_Msg_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Result_Msg_Set(self.handle, value)
	@property
	def Ret(self):
		return _OPQBot.OPQBot_Result_Ret_Get(self.handle)
	@Ret.setter
	def Ret(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Result_Ret_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Result_Ret_Set(self.handle, value)

# Python type for struct OPQBot.FriendFileResult
class FriendFileResult(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_FriendFileResult_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.FileName = args[0]
			if "FileName" in kwargs:
				self.FileName = kwargs["FileName"]
			if  1 < len(args):
				self.FileSize = args[1]
			if "FileSize" in kwargs:
				self.FileSize = kwargs["FileSize"]
			if  2 < len(args):
				self.FromUin = args[2]
			if "FromUin" in kwargs:
				self.FromUin = kwargs["FromUin"]
			if  3 < len(args):
				self.URL = args[3]
			if "URL" in kwargs:
				self.URL = kwargs["URL"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.FriendFileResult{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.FriendFileResult ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def FileName(self):
		return _OPQBot.OPQBot_FriendFileResult_FileName_Get(self.handle)
	@FileName.setter
	def FileName(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendFileResult_FileName_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendFileResult_FileName_Set(self.handle, value)
	@property
	def FileSize(self):
		return _OPQBot.OPQBot_FriendFileResult_FileSize_Get(self.handle)
	@FileSize.setter
	def FileSize(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendFileResult_FileSize_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendFileResult_FileSize_Set(self.handle, value)
	@property
	def FromUin(self):
		return _OPQBot.OPQBot_FriendFileResult_FromUin_Get(self.handle)
	@FromUin.setter
	def FromUin(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendFileResult_FromUin_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendFileResult_FromUin_Set(self.handle, value)
	@property
	def URL(self):
		return _OPQBot.OPQBot_FriendFileResult_URL_Get(self.handle)
	@URL.setter
	def URL(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendFileResult_URL_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendFileResult_URL_Set(self.handle, value)

# Python type for struct OPQBot.GroupMemberList
class GroupMemberList(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupMemberList_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Count = args[0]
			if "Count" in kwargs:
				self.Count = kwargs["Count"]
			if  1 < len(args):
				self.GroupUin = args[1]
			if "GroupUin" in kwargs:
				self.GroupUin = kwargs["GroupUin"]
			if  2 < len(args):
				self.LastUin = args[2]
			if "LastUin" in kwargs:
				self.LastUin = kwargs["LastUin"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupMemberList{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupMemberList ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Count(self):
		return _OPQBot.OPQBot_GroupMemberList_Count_Get(self.handle)
	@Count.setter
	def Count(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMemberList_Count_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMemberList_Count_Set(self.handle, value)
	@property
	def GroupUin(self):
		return _OPQBot.OPQBot_GroupMemberList_GroupUin_Get(self.handle)
	@GroupUin.setter
	def GroupUin(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMemberList_GroupUin_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMemberList_GroupUin_Set(self.handle, value)
	@property
	def LastUin(self):
		return _OPQBot.OPQBot_GroupMemberList_LastUin_Get(self.handle)
	@LastUin.setter
	def LastUin(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMemberList_LastUin_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMemberList_LastUin_Set(self.handle, value)

# Python type for struct OPQBot.SendMsgPack
class SendMsgPack(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendMsgPack_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.SendToType = args[0]
			if "SendToType" in kwargs:
				self.SendToType = kwargs["SendToType"]
			if  1 < len(args):
				self.ToUserUid = args[1]
			if "ToUserUid" in kwargs:
				self.ToUserUid = kwargs["ToUserUid"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendMsgPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendMsgPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def SendToType(self):
		return _OPQBot.OPQBot_SendMsgPack_SendToType_Get(self.handle)
	@SendToType.setter
	def SendToType(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendMsgPack_SendToType_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendMsgPack_SendToType_Set(self.handle, value)
	@property
	def ToUserUid(self):
		return _OPQBot.OPQBot_SendMsgPack_ToUserUid_Get(self.handle)
	@ToUserUid.setter
	def ToUserUid(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendMsgPack_ToUserUid_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendMsgPack_ToUserUid_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeReplyContent
class SendTypeReplyContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeReplyContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  1 < len(args):
				self.Content = args[1]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeReplyContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeReplyContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeReplyContent_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeReplyContent_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeReplyContent_Content_Set(self.handle, value)

# Python type for struct OPQBot.GroupAdminPack
class GroupAdminPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupAdminPack_CTor()
			_OPQBot.IncRef(self.handle)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupAdminPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupAdminPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct OPQBot.SendTypeJsonContent
class SendTypeJsonContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeJsonContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeJsonContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeJsonContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeJsonContent_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeJsonContent_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeJsonContent_Content_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeJsonContentPrivateChat
class SendTypeJsonContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeJsonContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Group = args[1]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeJsonContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeJsonContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeJsonContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeJsonContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeJsonContentPrivateChat_Content_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypeJsonContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeJsonContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeJsonContentPrivateChat_Group_Set(self.handle, value)

# Python type for struct OPQBot.SendTypePicMsgByUrlContent
class SendTypePicMsgByUrlContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypePicMsgByUrlContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.PicUrl = args[1]
			if "PicUrl" in kwargs:
				self.PicUrl = kwargs["PicUrl"]
			if  2 < len(args):
				self.Flash = args[2]
			if "Flash" in kwargs:
				self.Flash = kwargs["Flash"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByUrlContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByUrlContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypePicMsgByUrlContent_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByUrlContent_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByUrlContent_Content_Set(self.handle, value)
	@property
	def PicUrl(self):
		return _OPQBot.OPQBot_SendTypePicMsgByUrlContent_PicUrl_Get(self.handle)
	@PicUrl.setter
	def PicUrl(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByUrlContent_PicUrl_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByUrlContent_PicUrl_Set(self.handle, value)
	@property
	def Flash(self):
		return _OPQBot.OPQBot_SendTypePicMsgByUrlContent_Flash_Get(self.handle)
	@Flash.setter
	def Flash(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByUrlContent_Flash_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByUrlContent_Flash_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeTextMsgContent
class SendTypeTextMsgContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeTextMsgContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeTextMsgContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeTextMsgContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeTextMsgContent_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeTextMsgContent_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeTextMsgContent_Content_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeXmlContent
class SendTypeXmlContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeXmlContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeXmlContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeXmlContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeXmlContent_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeXmlContent_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeXmlContent_Content_Set(self.handle, value)

# Python type for struct OPQBot.FriendList
class FriendList(go.GoClass):
	"""FriendList 获取好友列表表单\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_FriendList_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.FriendCount = args[0]
			if "FriendCount" in kwargs:
				self.FriendCount = kwargs["FriendCount"]
			if  2 < len(args):
				self.GetfriendCount = args[2]
			if "GetfriendCount" in kwargs:
				self.GetfriendCount = kwargs["GetfriendCount"]
			if  3 < len(args):
				self.StartIndex = args[3]
			if "StartIndex" in kwargs:
				self.StartIndex = kwargs["StartIndex"]
			if  4 < len(args):
				self.TotoalFriendCount = args[4]
			if "TotoalFriendCount" in kwargs:
				self.TotoalFriendCount = kwargs["TotoalFriendCount"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.FriendList{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.FriendList ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def FriendCount(self):
		return _OPQBot.OPQBot_FriendList_FriendCount_Get(self.handle)
	@FriendCount.setter
	def FriendCount(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendList_FriendCount_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendList_FriendCount_Set(self.handle, value)
	@property
	def GetfriendCount(self):
		return _OPQBot.OPQBot_FriendList_GetfriendCount_Get(self.handle)
	@GetfriendCount.setter
	def GetfriendCount(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendList_GetfriendCount_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendList_GetfriendCount_Set(self.handle, value)
	@property
	def StartIndex(self):
		return _OPQBot.OPQBot_FriendList_StartIndex_Get(self.handle)
	@StartIndex.setter
	def StartIndex(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendList_StartIndex_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendList_StartIndex_Set(self.handle, value)
	@property
	def TotoalFriendCount(self):
		return _OPQBot.OPQBot_FriendList_TotoalFriendCount_Get(self.handle)
	@TotoalFriendCount.setter
	def TotoalFriendCount(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendList_TotoalFriendCount_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendList_TotoalFriendCount_Set(self.handle, value)

# Python type for struct OPQBot.GroupRevokePack
class GroupRevokePack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupRevokePack_CTor()
			_OPQBot.IncRef(self.handle)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupRevokePack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupRevokePack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct OPQBot.GroupSystemNotifyPack
class GroupSystemNotifyPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupSystemNotifyPack_CTor()
			_OPQBot.IncRef(self.handle)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupSystemNotifyPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupSystemNotifyPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct OPQBot.SendTypePicMsgByBase64ContentPrivateChat
class SendTypePicMsgByBase64ContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Base64 = args[1]
			if "Base64" in kwargs:
				self.Base64 = kwargs["Base64"]
			if  2 < len(args):
				self.Group = args[2]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
			if  3 < len(args):
				self.Flash = args[3]
			if "Flash" in kwargs:
				self.Flash = kwargs["Flash"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByBase64ContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByBase64ContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Content_Set(self.handle, value)
	@property
	def Base64(self):
		return _OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Base64_Get(self.handle)
	@Base64.setter
	def Base64(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Base64_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Base64_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Group_Set(self.handle, value)
	@property
	def Flash(self):
		return _OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Flash_Get(self.handle)
	@Flash.setter
	def Flash(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Flash_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByBase64ContentPrivateChat_Flash_Set(self.handle, value)

# Python type for struct OPQBot.UserInfo
class UserInfo(go.GoClass):
	"""UserInfo 用户信息表单\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_UserInfo_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Code = args[0]
			if "Code" in kwargs:
				self.Code = kwargs["Code"]
			if  2 < len(args):
				self.Default = args[2]
			if "Default" in kwargs:
				self.Default = kwargs["Default"]
			if  3 < len(args):
				self.Message = args[3]
			if "Message" in kwargs:
				self.Message = kwargs["Message"]
			if  4 < len(args):
				self.Subcode = args[4]
			if "Subcode" in kwargs:
				self.Subcode = kwargs["Subcode"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.UserInfo{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.UserInfo ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Code(self):
		return _OPQBot.OPQBot_UserInfo_Code_Get(self.handle)
	@Code.setter
	def Code(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserInfo_Code_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserInfo_Code_Set(self.handle, value)
	@property
	def Default(self):
		return _OPQBot.OPQBot_UserInfo_Default_Get(self.handle)
	@Default.setter
	def Default(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserInfo_Default_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserInfo_Default_Set(self.handle, value)
	@property
	def Message(self):
		return _OPQBot.OPQBot_UserInfo_Message_Get(self.handle)
	@Message.setter
	def Message(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserInfo_Message_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserInfo_Message_Set(self.handle, value)
	@property
	def Subcode(self):
		return _OPQBot.OPQBot_UserInfo_Subcode_Get(self.handle)
	@Subcode.setter
	def Subcode(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserInfo_Subcode_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserInfo_Subcode_Set(self.handle, value)

# Python type for struct OPQBot.VideoMsg
class VideoMsg(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_VideoMsg_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.ForwordBuf = args[0]
			if "ForwordBuf" in kwargs:
				self.ForwordBuf = kwargs["ForwordBuf"]
			if  1 < len(args):
				self.ForwordField = args[1]
			if "ForwordField" in kwargs:
				self.ForwordField = kwargs["ForwordField"]
			if  2 < len(args):
				self.VideoMd5 = args[2]
			if "VideoMd5" in kwargs:
				self.VideoMd5 = kwargs["VideoMd5"]
			if  3 < len(args):
				self.VideoSize = args[3]
			if "VideoSize" in kwargs:
				self.VideoSize = kwargs["VideoSize"]
			if  4 < len(args):
				self.VideoUrl = args[4]
			if "VideoUrl" in kwargs:
				self.VideoUrl = kwargs["VideoUrl"]
			if  5 < len(args):
				self.Tips = args[5]
			if "Tips" in kwargs:
				self.Tips = kwargs["Tips"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.VideoMsg{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.VideoMsg ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ForwordBuf(self):
		return _OPQBot.OPQBot_VideoMsg_ForwordBuf_Get(self.handle)
	@ForwordBuf.setter
	def ForwordBuf(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_VideoMsg_ForwordBuf_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_VideoMsg_ForwordBuf_Set(self.handle, value)
	@property
	def ForwordField(self):
		return _OPQBot.OPQBot_VideoMsg_ForwordField_Get(self.handle)
	@ForwordField.setter
	def ForwordField(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_VideoMsg_ForwordField_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_VideoMsg_ForwordField_Set(self.handle, value)
	@property
	def VideoMd5(self):
		return _OPQBot.OPQBot_VideoMsg_VideoMd5_Get(self.handle)
	@VideoMd5.setter
	def VideoMd5(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_VideoMsg_VideoMd5_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_VideoMsg_VideoMd5_Set(self.handle, value)
	@property
	def VideoSize(self):
		return _OPQBot.OPQBot_VideoMsg_VideoSize_Get(self.handle)
	@VideoSize.setter
	def VideoSize(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_VideoMsg_VideoSize_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_VideoMsg_VideoSize_Set(self.handle, value)
	@property
	def VideoUrl(self):
		return _OPQBot.OPQBot_VideoMsg_VideoUrl_Get(self.handle)
	@VideoUrl.setter
	def VideoUrl(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_VideoMsg_VideoUrl_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_VideoMsg_VideoUrl_Set(self.handle, value)
	@property
	def Tips(self):
		return _OPQBot.OPQBot_VideoMsg_Tips_Get(self.handle)
	@Tips.setter
	def Tips(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_VideoMsg_Tips_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_VideoMsg_Tips_Set(self.handle, value)

# Python type for struct OPQBot.SendTypePicMsgByMd5Content
class SendTypePicMsgByMd5Content(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypePicMsgByMd5Content_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Md5 = args[1]
			if "Md5" in kwargs:
				self.Md5 = kwargs["Md5"]
			if  2 < len(args):
				self.Flash = args[2]
			if "Flash" in kwargs:
				self.Flash = kwargs["Flash"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByMd5Content{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByMd5Content ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypePicMsgByMd5Content_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByMd5Content_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByMd5Content_Content_Set(self.handle, value)
	@property
	def Md5(self):
		return _OPQBot.OPQBot_SendTypePicMsgByMd5Content_Md5_Get(self.handle)
	@Md5.setter
	def Md5(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByMd5Content_Md5_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByMd5Content_Md5_Set(self.handle, value)
	@property
	def Flash(self):
		return _OPQBot.OPQBot_SendTypePicMsgByMd5Content_Flash_Get(self.handle)
	@Flash.setter
	def Flash(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByMd5Content_Flash_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByMd5Content_Flash_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeVoiceByUrlContent
class SendTypeVoiceByUrlContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeVoiceByUrlContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.VoiceUrl = args[0]
			if "VoiceUrl" in kwargs:
				self.VoiceUrl = kwargs["VoiceUrl"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeVoiceByUrlContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeVoiceByUrlContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def VoiceUrl(self):
		return _OPQBot.OPQBot_SendTypeVoiceByUrlContent_VoiceUrl_Get(self.handle)
	@VoiceUrl.setter
	def VoiceUrl(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeVoiceByUrlContent_VoiceUrl_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeVoiceByUrlContent_VoiceUrl_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeVoiceByUrlContentPrivateChat
class SendTypeVoiceByUrlContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeVoiceByUrlContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.VoiceUrl = args[0]
			if "VoiceUrl" in kwargs:
				self.VoiceUrl = kwargs["VoiceUrl"]
			if  1 < len(args):
				self.Group = args[1]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeVoiceByUrlContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeVoiceByUrlContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def VoiceUrl(self):
		return _OPQBot.OPQBot_SendTypeVoiceByUrlContentPrivateChat_VoiceUrl_Get(self.handle)
	@VoiceUrl.setter
	def VoiceUrl(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeVoiceByUrlContentPrivateChat_VoiceUrl_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeVoiceByUrlContentPrivateChat_VoiceUrl_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypeVoiceByUrlContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeVoiceByUrlContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeVoiceByUrlContentPrivateChat_Group_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeXmlContentPrivateChat
class SendTypeXmlContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeXmlContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Group = args[1]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeXmlContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeXmlContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeXmlContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeXmlContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeXmlContentPrivateChat_Content_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypeXmlContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeXmlContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeXmlContentPrivateChat_Group_Set(self.handle, value)

# Python type for struct OPQBot.GroupAdminSysNotifyPack
class GroupAdminSysNotifyPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupAdminSysNotifyPack_CTor()
			_OPQBot.IncRef(self.handle)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupAdminSysNotifyPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupAdminSysNotifyPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct OPQBot.MyRecord
class MyRecord(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_MyRecord_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.FromGroupID = args[0]
			if "FromGroupID" in kwargs:
				self.FromGroupID = kwargs["FromGroupID"]
			if  1 < len(args):
				self.MsgRandom = args[1]
			if "MsgRandom" in kwargs:
				self.MsgRandom = kwargs["MsgRandom"]
			if  2 < len(args):
				self.MsgSeq = args[2]
			if "MsgSeq" in kwargs:
				self.MsgSeq = kwargs["MsgSeq"]
			if  3 < len(args):
				self.MsgTime = args[3]
			if "MsgTime" in kwargs:
				self.MsgTime = kwargs["MsgTime"]
			if  4 < len(args):
				self.MsgType = args[4]
			if "MsgType" in kwargs:
				self.MsgType = kwargs["MsgType"]
			if  5 < len(args):
				self.Content = args[5]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.MyRecord{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.MyRecord ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def FromGroupID(self):
		return _OPQBot.OPQBot_MyRecord_FromGroupID_Get(self.handle)
	@FromGroupID.setter
	def FromGroupID(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_MyRecord_FromGroupID_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_MyRecord_FromGroupID_Set(self.handle, value)
	@property
	def MsgRandom(self):
		return _OPQBot.OPQBot_MyRecord_MsgRandom_Get(self.handle)
	@MsgRandom.setter
	def MsgRandom(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_MyRecord_MsgRandom_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_MyRecord_MsgRandom_Set(self.handle, value)
	@property
	def MsgSeq(self):
		return _OPQBot.OPQBot_MyRecord_MsgSeq_Get(self.handle)
	@MsgSeq.setter
	def MsgSeq(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_MyRecord_MsgSeq_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_MyRecord_MsgSeq_Set(self.handle, value)
	@property
	def MsgTime(self):
		return _OPQBot.OPQBot_MyRecord_MsgTime_Get(self.handle)
	@MsgTime.setter
	def MsgTime(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_MyRecord_MsgTime_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_MyRecord_MsgTime_Set(self.handle, value)
	@property
	def MsgType(self):
		return _OPQBot.OPQBot_MyRecord_MsgType_Get(self.handle)
	@MsgType.setter
	def MsgType(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_MyRecord_MsgType_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_MyRecord_MsgType_Set(self.handle, value)
	@property
	def Content(self):
		return _OPQBot.OPQBot_MyRecord_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_MyRecord_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_MyRecord_Content_Set(self.handle, value)

# Python type for struct OPQBot.PicMsg
class PicMsg(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_PicMsg_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  2 < len(args):
				self.Tips = args[2]
			if "Tips" in kwargs:
				self.Tips = kwargs["Tips"]
			if  4 < len(args):
				self.UserID = args[4]
			if "UserID" in kwargs:
				self.UserID = kwargs["UserID"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.PicMsg{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.PicMsg ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_PicMsg_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_PicMsg_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_PicMsg_Content_Set(self.handle, value)
	@property
	def Tips(self):
		return _OPQBot.OPQBot_PicMsg_Tips_Get(self.handle)
	@Tips.setter
	def Tips(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_PicMsg_Tips_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_PicMsg_Tips_Set(self.handle, value)
	@property
	def UserID(self):
		return go.Slice_int64(handle=_OPQBot.OPQBot_PicMsg_UserID_Get(self.handle))
	@UserID.setter
	def UserID(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_PicMsg_UserID_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct OPQBot.SendTypeForwordContentPrivateChat
class SendTypeForwordContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeForwordContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.ForwordBuf = args[0]
			if "ForwordBuf" in kwargs:
				self.ForwordBuf = kwargs["ForwordBuf"]
			if  1 < len(args):
				self.Content = args[1]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  2 < len(args):
				self.ForwordField = args[2]
			if "ForwordField" in kwargs:
				self.ForwordField = kwargs["ForwordField"]
			if  3 < len(args):
				self.Group = args[3]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeForwordContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeForwordContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ForwordBuf(self):
		return _OPQBot.OPQBot_SendTypeForwordContentPrivateChat_ForwordBuf_Get(self.handle)
	@ForwordBuf.setter
	def ForwordBuf(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeForwordContentPrivateChat_ForwordBuf_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeForwordContentPrivateChat_ForwordBuf_Set(self.handle, value)
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeForwordContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeForwordContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeForwordContentPrivateChat_Content_Set(self.handle, value)
	@property
	def ForwordField(self):
		return _OPQBot.OPQBot_SendTypeForwordContentPrivateChat_ForwordField_Get(self.handle)
	@ForwordField.setter
	def ForwordField(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeForwordContentPrivateChat_ForwordField_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeForwordContentPrivateChat_ForwordField_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypeForwordContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeForwordContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeForwordContentPrivateChat_Group_Set(self.handle, value)

# Python type for struct OPQBot.AtMsg
class AtMsg(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_AtMsg_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  2 < len(args):
				self.UserID = args[2]
			if "UserID" in kwargs:
				self.UserID = kwargs["UserID"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.AtMsg{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.AtMsg ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_AtMsg_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_AtMsg_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_AtMsg_Content_Set(self.handle, value)
	@property
	def UserID(self):
		return go.Slice_int64(handle=_OPQBot.OPQBot_AtMsg_UserID_Get(self.handle))
	@UserID.setter
	def UserID(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_AtMsg_UserID_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def Clean(self):
		"""Clean() object"""
		return AtMsg(handle=_OPQBot.OPQBot_AtMsg_Clean(self.handle))

# Python type for struct OPQBot.BotManager
class BotManager(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_BotManager_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.QQ = args[0]
			if "QQ" in kwargs:
				self.QQ = kwargs["QQ"]
			if  2 < len(args):
				self.Running = args[2]
			if "Running" in kwargs:
				self.Running = kwargs["Running"]
			if  3 < len(args):
				self.OPQUrl = args[3]
			if "OPQUrl" in kwargs:
				self.OPQUrl = kwargs["OPQUrl"]
			if  4 < len(args):
				self.MaxRetryCount = args[4]
			if "MaxRetryCount" in kwargs:
				self.MaxRetryCount = kwargs["MaxRetryCount"]
			if  14 < len(args):
				self.Session = args[14]
			if "Session" in kwargs:
				self.Session = kwargs["Session"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.BotManager{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.BotManager ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def QQ(self):
		return _OPQBot.OPQBot_BotManager_QQ_Get(self.handle)
	@QQ.setter
	def QQ(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_BotManager_QQ_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_BotManager_QQ_Set(self.handle, value)
	@property
	def Running(self):
		return _OPQBot.OPQBot_BotManager_Running_Get(self.handle)
	@Running.setter
	def Running(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_BotManager_Running_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_BotManager_Running_Set(self.handle, value)
	@property
	def OPQUrl(self):
		return _OPQBot.OPQBot_BotManager_OPQUrl_Get(self.handle)
	@OPQUrl.setter
	def OPQUrl(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_BotManager_OPQUrl_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_BotManager_OPQUrl_Set(self.handle, value)
	@property
	def MaxRetryCount(self):
		return _OPQBot.OPQBot_BotManager_MaxRetryCount_Get(self.handle)
	@MaxRetryCount.setter
	def MaxRetryCount(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_BotManager_MaxRetryCount_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_BotManager_MaxRetryCount_Set(self.handle, value)
	@property
	def Session(self):
		return go.Ptr_session_Manager(handle=_OPQBot.OPQBot_BotManager_Session_Get(self.handle))
	@Session.setter
	def Session(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_BotManager_Session_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def SetMaxRetryCount(self, maxRetryCount, goRun=False):
		"""SetMaxRetryCount(int maxRetryCount) """
		_OPQBot.OPQBot_BotManager_SetMaxRetryCount(self.handle, maxRetryCount, goRun)
	def Wait(self, goRun=False):
		"""Wait() """
		_OPQBot.OPQBot_BotManager_Wait(self.handle, goRun)
	def SetSendDelayed(self, Millisecond, goRun=False):
		"""SetSendDelayed(int Millisecond) 
		
		SetSendDelayed 设置发送消息的时延 单位毫秒 默认1000
		"""
		_OPQBot.OPQBot_BotManager_SetSendDelayed(self.handle, Millisecond, goRun)
	def Start(self):
		"""Start() str
		
		Start 开始连接
		"""
		return _OPQBot.OPQBot_BotManager_Start(self.handle)
	def Send(self, sendMsgPack, goRun=False):
		"""Send(object sendMsgPack) 
		
		Send 发送消息函数
		"""
		_OPQBot.OPQBot_BotManager_Send(self.handle, sendMsgPack.handle, goRun)
	def Stop(self, goRun=False):
		"""Stop() 
		
		Stop 停止
		"""
		_OPQBot.OPQBot_BotManager_Stop(self.handle, goRun)
	def ReCallMsg(self, GroupID, MsgRandom, MsgSeq):
		"""ReCallMsg(long GroupID, long MsgRandom, int MsgSeq) str
		
		ReCallMsg 撤回消息
		"""
		return _OPQBot.OPQBot_BotManager_ReCallMsg(self.handle, GroupID, MsgRandom, MsgSeq)
	def RefreshKey(self):
		"""RefreshKey() str
		
		RefreshKey 刷新Key
		"""
		return _OPQBot.OPQBot_BotManager_RefreshKey(self.handle)
	def Announce(self, title, text, pinned, announceType, groupID):
		"""Announce(str title, str text, int pinned, int announceType, long groupID) str
		
		Announce 发公告 Pinned 1为置顶,0为普通公告 announceType 发布类型(10为使用弹窗公告,20为发送给新成员,其他暂未知)
		"""
		return _OPQBot.OPQBot_BotManager_Announce(self.handle, title, text, pinned, announceType, groupID)
	def UploadFileWithBase64(self, FileName, FileBase64, ToUserUid, Notify):
		"""UploadFileWithBase64(str FileName, str FileBase64, long ToUserUid, bool Notify) str
		
		UploadFileWithBase64 上传群文件
		"""
		return _OPQBot.OPQBot_BotManager_UploadFileWithBase64(self.handle, FileName, FileBase64, ToUserUid, Notify)
	def UploadFileWithFileUrl(self, FileName, FileUrl, ToUserUid, Notify):
		"""UploadFileWithFileUrl(str FileName, str FileUrl, long ToUserUid, bool Notify) str
		
		UploadFileWithFileUrl 上传群文件
		"""
		return _OPQBot.OPQBot_BotManager_UploadFileWithFileUrl(self.handle, FileName, FileUrl, ToUserUid, Notify)
	def UploadFileWithFilePath(self, FilePath, ToUserUid, Notify):
		"""UploadFileWithFilePath(str FilePath, long ToUserUid, bool Notify) str
		
		UploadFileWithFilePath 上传群文件
		"""
		return _OPQBot.OPQBot_BotManager_UploadFileWithFilePath(self.handle, FilePath, ToUserUid, Notify)
	def Chuo(self, sendType, groupID, userId):
		"""Chuo(int sendType, long groupID, long userId) str
		
		Chuo 戳戳 sendType  0戳好友 1戳群友 sendType=0 时可以不填此字段 sendType=1 时不能为空
		"""
		return _OPQBot.OPQBot_BotManager_Chuo(self.handle, sendType, groupID, userId)
	def SetAdmin(self, flag, groupID, userId):
		"""SetAdmin(int flag, long groupID, long userId) str
		
		SetAdmin 设置管理员 flag 1为设置管理员 2为取消管理员
		"""
		return _OPQBot.OPQBot_BotManager_SetAdmin(self.handle, flag, groupID, userId)
	def GetUserInfo(self, qq):
		"""GetUserInfo(long qq) object, str
		
		GetUserInfo 获取用户信息
		"""
		return UserInfo(handle=_OPQBot.OPQBot_BotManager_GetUserInfo(self.handle, qq))
	def GetUserCookie(self):
		"""GetUserCookie() object, str
		
		GetUserCookie 获取QQ相关ck
		"""
		return Cookie(handle=_OPQBot.OPQBot_BotManager_GetUserCookie(self.handle))
	def KickGroupMember(self, groupID, userId):
		"""KickGroupMember(long groupID, long userId) str
		
		KickGroupMember 踢出群成员
		"""
		return _OPQBot.OPQBot_BotManager_KickGroupMember(self.handle, groupID, userId)
	def GetGroupMemberList(self, groupID, LastUin):
		"""GetGroupMemberList(long groupID, long LastUin) object, str
		
		GetGroupMemberList 获取群成员列表
		"""
		return GroupMemberList(handle=_OPQBot.OPQBot_BotManager_GetGroupMemberList(self.handle, groupID, LastUin))
	def SetGroupNewNick(self, newNick, groupID, userId):
		"""SetGroupNewNick(str newNick, long groupID, long userId) str
		
		SetGroupNewNick 设置群名片
		"""
		return _OPQBot.OPQBot_BotManager_SetGroupNewNick(self.handle, newNick, groupID, userId)
	def SetGroupUniqueTitle(self, newNick, groupID, userId):
		"""SetGroupUniqueTitle(str newNick, long groupID, long userId) str
		
		SetGroupUniqueTitle 设置群头衔
		"""
		return _OPQBot.OPQBot_BotManager_SetGroupUniqueTitle(self.handle, newNick, groupID, userId)
	def GetFriendList(self, startIndex):
		"""GetFriendList(int startIndex) object, str
		
		GetFriendList 获取好友列表
		"""
		return FriendList(handle=_OPQBot.OPQBot_BotManager_GetFriendList(self.handle, startIndex))
	def GetGroupList(self, nextToken):
		"""GetGroupList(str nextToken) object, str
		
		GetGroupList 获取群列表
		"""
		return GroupList(handle=_OPQBot.OPQBot_BotManager_GetGroupList(self.handle, nextToken))
	def SetForbidden(self, flag, ShutTime, groupID, userId):
		"""SetForbidden(int flag, int ShutTime, long groupID, long userId) str
		
		SetForbidden 设置禁言 flag 0为设置全体禁言 1为设置某人禁言 ShutTime 0为取消禁言 >0为禁言分钟数 全体禁言>0为开启禁言
		"""
		return _OPQBot.OPQBot_BotManager_SetForbidden(self.handle, flag, ShutTime, groupID, userId)
	def GetUserCardInfo(self, qq):
		"""GetUserCardInfo(long qq) object, str
		
		GetUserCardInfo 获取用户信息
		"""
		return UserCardInfo(handle=_OPQBot.OPQBot_BotManager_GetUserCardInfo(self.handle, qq))
	def OldSendVoice(self, userID, sendToType, data):
		"""OldSendVoice(long userID, int sendToType, str data) str
		
		OldSendVoice 发送语音 旧版 将被移出
		"""
		return _OPQBot.OPQBot_BotManager_OldSendVoice(self.handle, userID, sendToType, data)
	def Zan(self, qq, num):
		"""Zan(long qq, int num) int
		
		Zan QQ赞 次数
		"""
		return _OPQBot.OPQBot_BotManager_Zan(self.handle, qq, num)
	def CallFunc(self, FuncName, funcStruct):
		"""CallFunc(str FuncName, str funcStruct) []int, str"""
		return go.Slice_byte(handle=_OPQBot.OPQBot_BotManager_CallFunc(self.handle, FuncName, funcStruct))
	def SendFriendTextMsg(self, FriendUin, Content, goRun=False):
		"""SendFriendTextMsg(long FriendUin, str Content) 
		
		SendFriendTextMsg 发送文字信息给好友
		"""
		_OPQBot.OPQBot_BotManager_SendFriendTextMsg(self.handle, FriendUin, Content, goRun)
	def SendFriendPicMsg(self, FriendUin, Content, Pic, goRun=False):
		"""SendFriendPicMsg(long FriendUin, str Content, []int Pic) 
		
		SendFriendPicMsg 发送图片信息给好友
		"""
		_OPQBot.OPQBot_BotManager_SendFriendPicMsg(self.handle, FriendUin, Content, Pic.handle, goRun)
	def SendGroupTextMsg(self, GroupUin, Content, goRun=False):
		"""SendGroupTextMsg(long GroupUin, str Content) 
		
		SendGroupTextMsg 发送文字信息给群
		"""
		_OPQBot.OPQBot_BotManager_SendGroupTextMsg(self.handle, GroupUin, Content, goRun)
	def SendGroupPicMsg(self, GroupUin, Content, Pic, goRun=False):
		"""SendGroupPicMsg(long GroupUin, str Content, []int Pic) 
		
		SendGroupPicMsg 发送图片信息给群
		"""
		_OPQBot.OPQBot_BotManager_SendGroupPicMsg(self.handle, GroupUin, Content, Pic.handle, goRun)
	def SendGroupJsonMsg(self, GroupUin, Content, goRun=False):
		"""SendGroupJsonMsg(long GroupUin, str Content) 
		
		SendGroupJsonMsg 发送JSON信息给群
		"""
		_OPQBot.OPQBot_BotManager_SendGroupJsonMsg(self.handle, GroupUin, Content, goRun)
	def SendGroupXmlMsg(self, GroupUin, Content, goRun=False):
		"""SendGroupXmlMsg(long GroupUin, str Content) 
		
		SendGroupXmlMsg 发送Xml信息给群
		"""
		_OPQBot.OPQBot_BotManager_SendGroupXmlMsg(self.handle, GroupUin, Content, goRun)

# Python type for struct OPQBot.FriendMsgPack
class FriendMsgPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_FriendMsgPack_CTor()
			_OPQBot.IncRef(self.handle)
			if  1 < len(args):
				self.Content = args[1]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  2 < len(args):
				self.FromUin = args[2]
			if "FromUin" in kwargs:
				self.FromUin = kwargs["FromUin"]
			if  3 < len(args):
				self.MsgSeq = args[3]
			if "MsgSeq" in kwargs:
				self.MsgSeq = kwargs["MsgSeq"]
			if  4 < len(args):
				self.MsgType = args[4]
			if "MsgType" in kwargs:
				self.MsgType = kwargs["MsgType"]
			if  6 < len(args):
				self.ToUin = args[6]
			if "ToUin" in kwargs:
				self.ToUin = kwargs["ToUin"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.FriendMsgPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.FriendMsgPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_FriendMsgPack_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendMsgPack_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendMsgPack_Content_Set(self.handle, value)
	@property
	def FromUin(self):
		return _OPQBot.OPQBot_FriendMsgPack_FromUin_Get(self.handle)
	@FromUin.setter
	def FromUin(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendMsgPack_FromUin_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendMsgPack_FromUin_Set(self.handle, value)
	@property
	def MsgSeq(self):
		return _OPQBot.OPQBot_FriendMsgPack_MsgSeq_Get(self.handle)
	@MsgSeq.setter
	def MsgSeq(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendMsgPack_MsgSeq_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendMsgPack_MsgSeq_Set(self.handle, value)
	@property
	def MsgType(self):
		return _OPQBot.OPQBot_FriendMsgPack_MsgType_Get(self.handle)
	@MsgType.setter
	def MsgType(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendMsgPack_MsgType_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendMsgPack_MsgType_Set(self.handle, value)
	@property
	def ToUin(self):
		return _OPQBot.OPQBot_FriendMsgPack_ToUin_Get(self.handle)
	@ToUin.setter
	def ToUin(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_FriendMsgPack_ToUin_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_FriendMsgPack_ToUin_Set(self.handle, value)

# Python type for struct OPQBot.Cookie
class Cookie(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_Cookie_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.ClientKey = args[0]
			if "ClientKey" in kwargs:
				self.ClientKey = kwargs["ClientKey"]
			if  1 < len(args):
				self.Cookies = args[1]
			if "Cookies" in kwargs:
				self.Cookies = kwargs["Cookies"]
			if  2 < len(args):
				self.Gtk = args[2]
			if "Gtk" in kwargs:
				self.Gtk = kwargs["Gtk"]
			if  3 < len(args):
				self.Gtk32 = args[3]
			if "Gtk32" in kwargs:
				self.Gtk32 = kwargs["Gtk32"]
			if  5 < len(args):
				self.Skey = args[5]
			if "Skey" in kwargs:
				self.Skey = kwargs["Skey"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.Cookie{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.Cookie ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ClientKey(self):
		return _OPQBot.OPQBot_Cookie_ClientKey_Get(self.handle)
	@ClientKey.setter
	def ClientKey(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Cookie_ClientKey_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Cookie_ClientKey_Set(self.handle, value)
	@property
	def Cookies(self):
		return _OPQBot.OPQBot_Cookie_Cookies_Get(self.handle)
	@Cookies.setter
	def Cookies(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Cookie_Cookies_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Cookie_Cookies_Set(self.handle, value)
	@property
	def Gtk(self):
		return _OPQBot.OPQBot_Cookie_Gtk_Get(self.handle)
	@Gtk.setter
	def Gtk(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Cookie_Gtk_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Cookie_Gtk_Set(self.handle, value)
	@property
	def Gtk32(self):
		return _OPQBot.OPQBot_Cookie_Gtk32_Get(self.handle)
	@Gtk32.setter
	def Gtk32(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Cookie_Gtk32_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Cookie_Gtk32_Set(self.handle, value)
	@property
	def Skey(self):
		return _OPQBot.OPQBot_Cookie_Skey_Get(self.handle)
	@Skey.setter
	def Skey(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Cookie_Skey_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Cookie_Skey_Set(self.handle, value)

# Python type for struct OPQBot.SendTypePicMsgByBase64Content
class SendTypePicMsgByBase64Content(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypePicMsgByBase64Content_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Base64 = args[1]
			if "Base64" in kwargs:
				self.Base64 = kwargs["Base64"]
			if  2 < len(args):
				self.Flash = args[2]
			if "Flash" in kwargs:
				self.Flash = kwargs["Flash"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByBase64Content{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByBase64Content ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypePicMsgByBase64Content_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByBase64Content_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByBase64Content_Content_Set(self.handle, value)
	@property
	def Base64(self):
		return _OPQBot.OPQBot_SendTypePicMsgByBase64Content_Base64_Get(self.handle)
	@Base64.setter
	def Base64(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByBase64Content_Base64_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByBase64Content_Base64_Set(self.handle, value)
	@property
	def Flash(self):
		return _OPQBot.OPQBot_SendTypePicMsgByBase64Content_Flash_Get(self.handle)
	@Flash.setter
	def Flash(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByBase64Content_Flash_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByBase64Content_Flash_Set(self.handle, value)

# Python type for struct OPQBot.SendTypePicMsgByMd5ContentPrivateChat
class SendTypePicMsgByMd5ContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Md5s = args[1]
			if "Md5s" in kwargs:
				self.Md5s = kwargs["Md5s"]
			if  2 < len(args):
				self.Group = args[2]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
			if  3 < len(args):
				self.Flash = args[3]
			if "Flash" in kwargs:
				self.Flash = kwargs["Flash"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByMd5ContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByMd5ContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Content_Set(self.handle, value)
	@property
	def Md5s(self):
		return go.Slice_string(handle=_OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Md5s_Get(self.handle))
	@Md5s.setter
	def Md5s(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Md5s_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Group_Set(self.handle, value)
	@property
	def Flash(self):
		return _OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Flash_Get(self.handle)
	@Flash.setter
	def Flash(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Flash_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByMd5ContentPrivateChat_Flash_Set(self.handle, value)

# Python type for struct OPQBot.SendTypePicMsgByUrlContentPrivateChat
class SendTypePicMsgByUrlContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.PicUrl = args[1]
			if "PicUrl" in kwargs:
				self.PicUrl = kwargs["PicUrl"]
			if  2 < len(args):
				self.Group = args[2]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
			if  3 < len(args):
				self.Flash = args[3]
			if "Flash" in kwargs:
				self.Flash = kwargs["Flash"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByUrlContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByUrlContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Content_Set(self.handle, value)
	@property
	def PicUrl(self):
		return _OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_PicUrl_Get(self.handle)
	@PicUrl.setter
	def PicUrl(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_PicUrl_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_PicUrl_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Group_Set(self.handle, value)
	@property
	def Flash(self):
		return _OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Flash_Get(self.handle)
	@Flash.setter
	def Flash(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Flash_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByUrlContentPrivateChat_Flash_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeForwordContent
class SendTypeForwordContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeForwordContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.ForwordBuf = args[0]
			if "ForwordBuf" in kwargs:
				self.ForwordBuf = kwargs["ForwordBuf"]
			if  1 < len(args):
				self.ForwordField = args[1]
			if "ForwordField" in kwargs:
				self.ForwordField = kwargs["ForwordField"]
			if  2 < len(args):
				self.Content = args[2]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeForwordContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeForwordContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ForwordBuf(self):
		return _OPQBot.OPQBot_SendTypeForwordContent_ForwordBuf_Get(self.handle)
	@ForwordBuf.setter
	def ForwordBuf(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeForwordContent_ForwordBuf_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeForwordContent_ForwordBuf_Set(self.handle, value)
	@property
	def ForwordField(self):
		return _OPQBot.OPQBot_SendTypeForwordContent_ForwordField_Get(self.handle)
	@ForwordField.setter
	def ForwordField(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeForwordContent_ForwordField_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeForwordContent_ForwordField_Set(self.handle, value)
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeForwordContent_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeForwordContent_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeForwordContent_Content_Set(self.handle, value)

# Python type for struct OPQBot.SendTypePicMsgByLocalContent
class SendTypePicMsgByLocalContent(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypePicMsgByLocalContent_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.Path = args[1]
			if "Path" in kwargs:
				self.Path = kwargs["Path"]
			if  2 < len(args):
				self.Flash = args[2]
			if "Flash" in kwargs:
				self.Flash = kwargs["Flash"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByLocalContent{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypePicMsgByLocalContent ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypePicMsgByLocalContent_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByLocalContent_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByLocalContent_Content_Set(self.handle, value)
	@property
	def Path(self):
		return _OPQBot.OPQBot_SendTypePicMsgByLocalContent_Path_Get(self.handle)
	@Path.setter
	def Path(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByLocalContent_Path_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByLocalContent_Path_Set(self.handle, value)
	@property
	def Flash(self):
		return _OPQBot.OPQBot_SendTypePicMsgByLocalContent_Flash_Get(self.handle)
	@Flash.setter
	def Flash(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypePicMsgByLocalContent_Flash_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypePicMsgByLocalContent_Flash_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeReplyContentPrivateChat
class SendTypeReplyContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeReplyContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  1 < len(args):
				self.Content = args[1]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  2 < len(args):
				self.Group = args[2]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeReplyContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeReplyContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_SendTypeReplyContentPrivateChat_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeReplyContentPrivateChat_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeReplyContentPrivateChat_Content_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypeReplyContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeReplyContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeReplyContentPrivateChat_Group_Set(self.handle, value)

# Python type for struct OPQBot.SendTypeVoiceByLocalContentPrivateChat
class SendTypeVoiceByLocalContentPrivateChat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_SendTypeVoiceByLocalContentPrivateChat_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Path = args[0]
			if "Path" in kwargs:
				self.Path = kwargs["Path"]
			if  1 < len(args):
				self.Group = args[1]
			if "Group" in kwargs:
				self.Group = kwargs["Group"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeVoiceByLocalContentPrivateChat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.SendTypeVoiceByLocalContentPrivateChat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Path(self):
		return _OPQBot.OPQBot_SendTypeVoiceByLocalContentPrivateChat_Path_Get(self.handle)
	@Path.setter
	def Path(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeVoiceByLocalContentPrivateChat_Path_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeVoiceByLocalContentPrivateChat_Path_Set(self.handle, value)
	@property
	def Group(self):
		return _OPQBot.OPQBot_SendTypeVoiceByLocalContentPrivateChat_Group_Get(self.handle)
	@Group.setter
	def Group(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_SendTypeVoiceByLocalContentPrivateChat_Group_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_SendTypeVoiceByLocalContentPrivateChat_Group_Set(self.handle, value)

# Python type for struct OPQBot.GroupFileMsg
class GroupFileMsg(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupFileMsg_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.FileID = args[0]
			if "FileID" in kwargs:
				self.FileID = kwargs["FileID"]
			if  1 < len(args):
				self.FileName = args[1]
			if "FileName" in kwargs:
				self.FileName = kwargs["FileName"]
			if  2 < len(args):
				self.FileSize = args[2]
			if "FileSize" in kwargs:
				self.FileSize = kwargs["FileSize"]
			if  3 < len(args):
				self.Tips = args[3]
			if "Tips" in kwargs:
				self.Tips = kwargs["Tips"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupFileMsg{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupFileMsg ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def FileID(self):
		return _OPQBot.OPQBot_GroupFileMsg_FileID_Get(self.handle)
	@FileID.setter
	def FileID(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupFileMsg_FileID_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupFileMsg_FileID_Set(self.handle, value)
	@property
	def FileName(self):
		return _OPQBot.OPQBot_GroupFileMsg_FileName_Get(self.handle)
	@FileName.setter
	def FileName(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupFileMsg_FileName_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupFileMsg_FileName_Set(self.handle, value)
	@property
	def FileSize(self):
		return _OPQBot.OPQBot_GroupFileMsg_FileSize_Get(self.handle)
	@FileSize.setter
	def FileSize(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupFileMsg_FileSize_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupFileMsg_FileSize_Set(self.handle, value)
	@property
	def Tips(self):
		return _OPQBot.OPQBot_GroupFileMsg_Tips_Get(self.handle)
	@Tips.setter
	def Tips(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupFileMsg_Tips_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupFileMsg_Tips_Set(self.handle, value)

# Python type for struct OPQBot.GroupMsgPack
class GroupMsgPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupMsgPack_CTor()
			_OPQBot.IncRef(self.handle)
			if  1 < len(args):
				self.Content = args[1]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  2 < len(args):
				self.FromGroupID = args[2]
			if "FromGroupID" in kwargs:
				self.FromGroupID = kwargs["FromGroupID"]
			if  3 < len(args):
				self.FromGroupName = args[3]
			if "FromGroupName" in kwargs:
				self.FromGroupName = kwargs["FromGroupName"]
			if  4 < len(args):
				self.FromNickName = args[4]
			if "FromNickName" in kwargs:
				self.FromNickName = kwargs["FromNickName"]
			if  5 < len(args):
				self.FromUserID = args[5]
			if "FromUserID" in kwargs:
				self.FromUserID = kwargs["FromUserID"]
			if  6 < len(args):
				self.MsgRandom = args[6]
			if "MsgRandom" in kwargs:
				self.MsgRandom = kwargs["MsgRandom"]
			if  7 < len(args):
				self.MsgSeq = args[7]
			if "MsgSeq" in kwargs:
				self.MsgSeq = kwargs["MsgSeq"]
			if  8 < len(args):
				self.MsgTime = args[8]
			if "MsgTime" in kwargs:
				self.MsgTime = kwargs["MsgTime"]
			if  9 < len(args):
				self.MsgType = args[9]
			if "MsgType" in kwargs:
				self.MsgType = kwargs["MsgType"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupMsgPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupMsgPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_GroupMsgPack_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_Content_Set(self.handle, value)
	@property
	def FromGroupID(self):
		return _OPQBot.OPQBot_GroupMsgPack_FromGroupID_Get(self.handle)
	@FromGroupID.setter
	def FromGroupID(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_FromGroupID_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_FromGroupID_Set(self.handle, value)
	@property
	def FromGroupName(self):
		return _OPQBot.OPQBot_GroupMsgPack_FromGroupName_Get(self.handle)
	@FromGroupName.setter
	def FromGroupName(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_FromGroupName_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_FromGroupName_Set(self.handle, value)
	@property
	def FromNickName(self):
		return _OPQBot.OPQBot_GroupMsgPack_FromNickName_Get(self.handle)
	@FromNickName.setter
	def FromNickName(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_FromNickName_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_FromNickName_Set(self.handle, value)
	@property
	def FromUserID(self):
		return _OPQBot.OPQBot_GroupMsgPack_FromUserID_Get(self.handle)
	@FromUserID.setter
	def FromUserID(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_FromUserID_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_FromUserID_Set(self.handle, value)
	@property
	def MsgRandom(self):
		return _OPQBot.OPQBot_GroupMsgPack_MsgRandom_Get(self.handle)
	@MsgRandom.setter
	def MsgRandom(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_MsgRandom_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_MsgRandom_Set(self.handle, value)
	@property
	def MsgSeq(self):
		return _OPQBot.OPQBot_GroupMsgPack_MsgSeq_Get(self.handle)
	@MsgSeq.setter
	def MsgSeq(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_MsgSeq_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_MsgSeq_Set(self.handle, value)
	@property
	def MsgTime(self):
		return _OPQBot.OPQBot_GroupMsgPack_MsgTime_Get(self.handle)
	@MsgTime.setter
	def MsgTime(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_MsgTime_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_MsgTime_Set(self.handle, value)
	@property
	def MsgType(self):
		return _OPQBot.OPQBot_GroupMsgPack_MsgType_Get(self.handle)
	@MsgType.setter
	def MsgType(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_GroupMsgPack_MsgType_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_GroupMsgPack_MsgType_Set(self.handle, value)

# Python type for struct OPQBot.GroupShutPack
class GroupShutPack(Context):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_GroupShutPack_CTor()
			_OPQBot.IncRef(self.handle)
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupShutPack{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.GroupShutPack ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct OPQBot.Reply
class Reply(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_Reply_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Content = args[0]
			if "Content" in kwargs:
				self.Content = kwargs["Content"]
			if  1 < len(args):
				self.SrcContent = args[1]
			if "SrcContent" in kwargs:
				self.SrcContent = kwargs["SrcContent"]
			if  2 < len(args):
				self.MsgSeq = args[2]
			if "MsgSeq" in kwargs:
				self.MsgSeq = kwargs["MsgSeq"]
			if  3 < len(args):
				self.Tips = args[3]
			if "Tips" in kwargs:
				self.Tips = kwargs["Tips"]
			if  4 < len(args):
				self.UserID = args[4]
			if "UserID" in kwargs:
				self.UserID = kwargs["UserID"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.Reply{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.Reply ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Content(self):
		return _OPQBot.OPQBot_Reply_Content_Get(self.handle)
	@Content.setter
	def Content(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Reply_Content_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Reply_Content_Set(self.handle, value)
	@property
	def SrcContent(self):
		return _OPQBot.OPQBot_Reply_SrcContent_Get(self.handle)
	@SrcContent.setter
	def SrcContent(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Reply_SrcContent_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Reply_SrcContent_Set(self.handle, value)
	@property
	def MsgSeq(self):
		return _OPQBot.OPQBot_Reply_MsgSeq_Get(self.handle)
	@MsgSeq.setter
	def MsgSeq(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Reply_MsgSeq_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Reply_MsgSeq_Set(self.handle, value)
	@property
	def Tips(self):
		return _OPQBot.OPQBot_Reply_Tips_Get(self.handle)
	@Tips.setter
	def Tips(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Reply_Tips_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_Reply_Tips_Set(self.handle, value)
	@property
	def UserID(self):
		return go.Slice_int64(handle=_OPQBot.OPQBot_Reply_UserID_Get(self.handle))
	@UserID.setter
	def UserID(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_Reply_UserID_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct OPQBot.UserCardInfo
class UserCardInfo(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_OPQBot.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_OPQBot.IncRef(self.handle)
		else:
			self.handle = _OPQBot.OPQBot_UserCardInfo_CTor()
			_OPQBot.IncRef(self.handle)
			if  0 < len(args):
				self.Age = args[0]
			if "Age" in kwargs:
				self.Age = kwargs["Age"]
			if  1 < len(args):
				self.City = args[1]
			if "City" in kwargs:
				self.City = kwargs["City"]
			if  2 < len(args):
				self.LikeNums = args[2]
			if "LikeNums" in kwargs:
				self.LikeNums = kwargs["LikeNums"]
			if  3 < len(args):
				self.LoginDays = args[3]
			if "LoginDays" in kwargs:
				self.LoginDays = kwargs["LoginDays"]
			if  4 < len(args):
				self.NickName = args[4]
			if "NickName" in kwargs:
				self.NickName = kwargs["NickName"]
			if  5 < len(args):
				self.Province = args[5]
			if "Province" in kwargs:
				self.Province = kwargs["Province"]
			if  6 < len(args):
				self.QQLevel = args[6]
			if "QQLevel" in kwargs:
				self.QQLevel = kwargs["QQLevel"]
			if  7 < len(args):
				self.QQUin = args[7]
			if "QQUin" in kwargs:
				self.QQUin = kwargs["QQUin"]
			if  8 < len(args):
				self.Sex = args[8]
			if "Sex" in kwargs:
				self.Sex = kwargs["Sex"]
	def __del__(self):
		_OPQBot.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.UserCardInfo{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'OPQBot.UserCardInfo ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Age(self):
		return _OPQBot.OPQBot_UserCardInfo_Age_Get(self.handle)
	@Age.setter
	def Age(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_Age_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_Age_Set(self.handle, value)
	@property
	def City(self):
		return _OPQBot.OPQBot_UserCardInfo_City_Get(self.handle)
	@City.setter
	def City(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_City_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_City_Set(self.handle, value)
	@property
	def LikeNums(self):
		return _OPQBot.OPQBot_UserCardInfo_LikeNums_Get(self.handle)
	@LikeNums.setter
	def LikeNums(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_LikeNums_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_LikeNums_Set(self.handle, value)
	@property
	def LoginDays(self):
		return _OPQBot.OPQBot_UserCardInfo_LoginDays_Get(self.handle)
	@LoginDays.setter
	def LoginDays(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_LoginDays_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_LoginDays_Set(self.handle, value)
	@property
	def NickName(self):
		return _OPQBot.OPQBot_UserCardInfo_NickName_Get(self.handle)
	@NickName.setter
	def NickName(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_NickName_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_NickName_Set(self.handle, value)
	@property
	def Province(self):
		return _OPQBot.OPQBot_UserCardInfo_Province_Get(self.handle)
	@Province.setter
	def Province(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_Province_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_Province_Set(self.handle, value)
	@property
	def QQLevel(self):
		return _OPQBot.OPQBot_UserCardInfo_QQLevel_Get(self.handle)
	@QQLevel.setter
	def QQLevel(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_QQLevel_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_QQLevel_Set(self.handle, value)
	@property
	def QQUin(self):
		return _OPQBot.OPQBot_UserCardInfo_QQUin_Get(self.handle)
	@QQUin.setter
	def QQUin(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_QQUin_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_QQUin_Set(self.handle, value)
	@property
	def Sex(self):
		return _OPQBot.OPQBot_UserCardInfo_Sex_Get(self.handle)
	@Sex.setter
	def Sex(self, value):
		if isinstance(value, go.GoClass):
			_OPQBot.OPQBot_UserCardInfo_Sex_Set(self.handle, value.handle)
		else:
			_OPQBot.OPQBot_UserCardInfo_Sex_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def ParserVideoMsg(pack):
	"""ParserVideoMsg(object pack) object a, str e"""
	return VideoMsg(handle=_OPQBot.OPQBot_ParserVideoMsg(pack.handle))
def ParserGroupPicMsg(pack):
	"""ParserGroupPicMsg(object pack) object a, str e"""
	return PicMsg(handle=_OPQBot.OPQBot_ParserGroupPicMsg(pack.handle))
def ParserGroupAtMsg(pack):
	"""ParserGroupAtMsg(object pack) object a, str e"""
	return AtMsg(handle=_OPQBot.OPQBot_ParserGroupAtMsg(pack.handle))
def NewBotManager(QQ, OPQUrl):
	"""NewBotManager(long QQ, str OPQUrl) object"""
	return BotManager(handle=_OPQBot.OPQBot_NewBotManager(QQ, OPQUrl))
def ParserGroupFileMsg(pack):
	"""ParserGroupFileMsg(object pack) object a, str e"""
	return GroupFileMsg(handle=_OPQBot.OPQBot_ParserGroupFileMsg(pack.handle))
def ParserGroupReplyMsg(pack):
	"""ParserGroupReplyMsg(object pack) object a, str e"""
	return Reply(handle=_OPQBot.OPQBot_ParserGroupReplyMsg(pack.handle))


# ---- Functions ---
def DecodeFaceFromSentences(encode, format):
	"""DecodeFaceFromSentences(str encode, str format) str"""
	return _OPQBot.OPQBot_DecodeFaceFromSentences(encode, format)
def MacroAt(qqs):
	"""MacroAt([]long qqs) str
	
	MacroAt At宏
	"""
	return _OPQBot.OPQBot_MacroAt(qqs.handle)
def VoiceSilkToMp3(base64EncodedSilk):
	"""VoiceSilkToMp3(str base64EncodedSilk) []int, str
	
	VoiceSilkToMp3 Silk转Mp3 silk->mp3 Output: []byte
	"""
	return go.Slice_byte(handle=_OPQBot.OPQBot_VoiceSilkToMp3(base64EncodedSilk))
def DecodeFace(encodeFace):
	"""DecodeFace(str encodeFace) str, str"""
	return _OPQBot.OPQBot_DecodeFace(encodeFace)
def MacroAtAll():
	"""MacroAtAll() str"""
	return _OPQBot.OPQBot_MacroAtAll()
def MacroId():
	"""MacroId() str"""
	return _OPQBot.OPQBot_MacroId()
def SetLog(l, goRun=False):
	"""SetLog(object l) """
	_OPQBot.OPQBot_SetLog(l.handle, goRun)
def VoiceMp3ToSilk(mp3Path):
	"""VoiceMp3ToSilk(str mp3Path) str, str
	
	VoiceMp3ToSilk Mp3转Silk mp3->silk Output: base64 String
	"""
	return _OPQBot.OPQBot_VoiceMp3ToSilk(mp3Path)


