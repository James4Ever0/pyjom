cut_spans = [(0, 1), (1, 2), (2, 9), (9, 100), (100, 101), (101, 102)]
# cut_spans=[(0, 2.43475), (2.43475, 4.3458125), (4.3458125, 7.543145833333333), (7.543145833333333, 10.7313125), (10.7313125, 13.928645833333333), (13.928645833333333, 16.492041666666665), (16.492041666666665, 22.216020833333335), (22.216020833333335, 25.4225625), (25.4225625, 30.530958333333334), (30.530958333333334, 33.709916666666665), (33.709916666666665, 36.907270833333335), (36.907270833333335, 39.46145833333333), (39.46145833333333, 42.649625), (42.649625, 46.499291666666664), (46.499291666666664, 49.0443125), (49.0443125, 52.54485416666667), (52.54485416666667, 55.10825), (55.10825, 57.65325), (57.65325, 61.806125), (61.806125, 64.99429166666667), (64.99429166666667, 67.55766666666666), (67.55766666666666, 70.1026875), (70.1026875, 73.28164583333333), (73.28164583333333, 76.16660416666667), (76.16660416666667, 79.99791666666667), (79.99791666666667, 82.23054166666667), (82.23054166666667, 85.1063125), (85.1063125, 87.97289583333334), (87.97289583333334, 91.1610625), (91.1610625, 93.09047916666667), (93.09047916666667, 96.26945833333333), (96.26945833333333, 100.42233333333333), (100.42233333333333, 102.97652083333334), (102.97652083333334, 106.80783333333333), (106.80783333333333, 111.27308333333333), (111.27308333333333, 117.33702083333333), (117.33702083333333, 119.57883333333334), (119.57883333333334, 123.0701875), (123.0701875, 127.250625), (127.250625, 129.7864375), (129.7864375, 134.57327083333334), (134.57327083333334, 137.7614375), (137.7614375, 140.95877083333335), (140.95877083333335, 146.06716666666668), (146.06716666666668, 150.5324375), (150.5324375, 153.72058333333334), (153.72058333333334, 157.55189583333333), (157.55189583333333, 160.74922916666668), (160.74922916666668, 163.3034375), (163.3034375, 164.25895833333334), (164.25895833333334, 164.89291666666668), (164.89291666666668, 171.576)]
from test_commons import *
from pyjom.lyrictoolbox import remergeDemandedCutSpans


def test_cut_spans_valid(list_of_spans, min_span=1.5, max_span=10, no_range_test=False):
    start = list_of_spans[0][0]
    init_end = list_of_spans[0][1]
    minit_duration = list_of_spans[0][1] - start
    if not no_range_test:
        assert start < list_of_spans[0][1]
        assert minit_duration >= min_span and minit_duration <= max_span
    # end = list_of_spans[-1][1]
    for i, span in enumerate(list_of_spans[1:]):
        mstart, mend = span
        try:
            assert mstart == init_end
        except:
            print(mstart, mend, init_end, i + 1)
            print(list_of_spans[max(0, i - 2) : min(len(list_of_spans), i + 2)])
            breakpoint()
        assert mstart < mend
        duration = mend - mstart
        if not no_range_test:
            assert duration >= min_span and duration <= max_span
        init_end = mend


test_cut_spans_valid(cut_spans, no_range_test=True)
new_spans = remergeDemandedCutSpans(cut_spans)
print("new spans?", new_spans)
test_cut_spans_valid(new_spans)
assert cut_spans[0][0] == new_spans[0][0]
assert cut_spans[-1][1] == new_spans[-1][1]
