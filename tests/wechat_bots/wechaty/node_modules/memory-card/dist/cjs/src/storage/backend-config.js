"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BACKEND_FACTORY_DICT = void 0;
const file_js_1 = require("./file.js");
const nop_js_1 = require("./nop.js");
async function obsLoader() {
    try {
        const m = await Promise.resolve().then(() => __importStar(require('./obs.js')));
        return m.default;
    }
    catch (e) {
        console.error(e);
        throw new Error('Load OBS Storage failed: have you installed the "esdk-obs-nodejs" NPM module?');
    }
}
async function s3Loader() {
    try {
        const m = await Promise.resolve().then(() => __importStar(require('./s3.js')));
        return m.default;
    }
    catch (e) {
        console.error(e);
        throw new Error('Load S3 Storage failed: have you installed the "aws-sdk" NPM module?');
    }
}
async function etcdLoader() {
    try {
        const m = await Promise.resolve().then(() => __importStar(require('./etcd.js')));
        return m.default;
    }
    catch (e) {
        console.error(e);
        throw new Error('Load Etcd Storage failed: have you installed the "etcd3" NPM module?');
    }
}
exports.BACKEND_FACTORY_DICT = {
    etcd: etcdLoader,
    file: async () => Promise.resolve(file_js_1.StorageFile),
    nop: async () => Promise.resolve(nop_js_1.StorageNop),
    obs: obsLoader,
    s3: s3Loader,
};
//# sourceMappingURL=backend-config.js.map