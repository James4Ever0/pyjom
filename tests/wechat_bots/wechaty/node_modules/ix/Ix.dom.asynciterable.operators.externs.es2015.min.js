
// @ts-nocheck
/**
 * @fileoverview Closure Compiler externs for Ix
 * @externs
 * @suppress {duplicate,checkTypes}
 */
/** @type {symbol} */
Symbol.iterator;
/** @type {symbol} */
Symbol.observable;
/** @type {symbol} */
Symbol.asyncIterator;

var BatchAsyncIterable = function() {};
var batch = function() {};
var BufferAsyncIterable = function() {};
var buffer = function() {};
var bufferCountOrTime = function() {};
var CatchWithAsyncIterable = function() {};
var catchError = function() {};
var combineLatestWith = function() {};
var ConcatAllAsyncIterable = function() {};
var concatAll = function() {};
var concatWith = function() {};
var DebounceAsyncIterable = function() {};
var debounce = function() {};
var DefaultIfEmptyAsyncIterable = function() {};
var defaultIfEmpty = function() {};
var DelayEachAsyncIterable = function() {};
var delayEach = function() {};
var DelayAsyncIterable = function() {};
var delay = function() {};
var DistinctAsyncIterable = function() {};
var distinct = function() {};
var DistinctUntilChangedAsyncIterable = function() {};
var distinctUntilChanged = function() {};
var doWhile = function() {};
var EndWithAsyncIterable = function() {};
var endWith = function() {};
var ExceptAsyncIterable = function() {};
var except = function() {};
var ExpandAsyncIterable = function() {};
var expand = function() {};
var FilterAsyncIterable = function() {};
var filter = function() {};
var FinallyAsyncIterable = function() {};
var finalize = function() {};
var FlatMapAsyncIterable = function() {};
var flatMap = function() {};
var FlattenAsyncIterable = function() {};
/** @type {?} */
FlattenAsyncIterable.prototype._flatten;
var flat = function() {};
var GroupedAsyncIterable = function() {};
var GroupByAsyncIterable = function() {};
var groupBy = function() {};
var GroupJoinAsyncIterable = function() {};
var groupJoin = function() {};
var IgnoreElementsAsyncIterable = function() {};
var ignoreElements = function() {};
var JoinAsyncIterable = function() {};
var innerJoin = function() {};
var IntersectAsyncIterable = function() {};
var intersect = function() {};
var MapAsyncIterable = function() {};
var map = function() {};
var MemoizeAsyncBuffer = function() {};
/** @type {?} */
MemoizeAsyncBuffer.prototype._getIterable;
var memoize = function() {};
var mergeAll = function() {};
var mergeWith = function() {};
var OrderedAsyncIterableBaseX = function() {};
/** @type {?} */
OrderedAsyncIterableBaseX.prototype.thenBy;
/** @type {?} */
OrderedAsyncIterableBaseX.prototype.thenByDescending;
var OrderedAsyncIterableX = function() {};
/** @type {?} */
OrderedAsyncIterableX.prototype._getSorter;
var orderBy = function() {};
var orderByDescending = function() {};
var thenBy = function() {};
var thenByDescending = function() {};
var PairwiseAsyncIterable = function() {};
var pairwise = function() {};
var pluck = function() {};
var publish = function() {};
var raceWith = function() {};
var RepeatAsyncIterable = function() {};
var repeat = function() {};
var retry = function() {};
var ReverseAsyncIterable = function() {};
var reverse = function() {};
var ScanRightAsyncIterable = function() {};
var scanRight = function() {};
var ScanAsyncIterable = function() {};
var scan = function() {};
var share = function() {};
var SkipLastAsyncIterable = function() {};
var skipLast = function() {};
var SkipAsyncIterable = function() {};
var skip = function() {};
var SkipUntilAsyncIterable = function() {};
var skipUntil = function() {};
var SkipWhileAsyncIterable = function() {};
var skipWhile = function() {};
var SliceAsyncIterable = function() {};
var slice = function() {};
var StartWithAsyncIterable = function() {};
var startWith = function() {};
var TakeLastAsyncIterable = function() {};
var takeLast = function() {};
var TakeAsyncIterable = function() {};
var take = function() {};
var TakeUntilAsyncIterable = function() {};
var takeUntil = function() {};
var TakeWhileAsyncIterable = function() {};
var takeWhile = function() {};
var TapAsyncIterable = function() {};
var tap = function() {};
var ThrottleAsyncIterable = function() {};
var throttle = function() {};
var TimeIntervalAsyncIterable = function() {};
var timeInterval = function() {};
var TimeoutError = function() {};
var TimeoutAsyncIterable = function() {};
var timeout = function() {};
var TimestampAsyncIterable = function() {};
var timestamp = function() {};
var toDOMStream = function() {};
var UnionAsyncIterable = function() {};
var union = function() {};
var WithAbortAsyncIterable = function() {};
/** @type {?} */
WithAbortAsyncIterable.prototype.withAbort;
var withAbort = function() {};
var wrapWithAbort = function() {};
var WithLatestFromAsyncIterable = function() {};
var withLatestFrom = function() {};
var zipWith = function() {};