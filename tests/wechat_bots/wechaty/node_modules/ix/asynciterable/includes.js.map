{"version":3,"sources":["asynciterable/includes.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAC5C,qDAAsD;AACtD,8CAA+C;AAE/C;;;;;;;;;GASG;AACI,KAAK,UAAU,QAAQ,CAC5B,MAAwB,EACxB,WAAc,EACd,SAAS,GAAG,CAAC,EACb,MAAoB;IAEpB,2BAAc,CAAC,MAAM,CAAC,CAAC;IACvB,IAAI,OAAO,GAAG,SAAS,CAAC;IACxB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;QACrB,OAAO,GAAG,CAAC,CAAC;KACb;IACD,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,yBAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACtD,IAAI,CAAC,EAAE,GAAG,OAAO,IAAI,mBAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE;YAChD,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAlBD,4BAkBC","file":"includes.js","sourcesContent":["import { comparer } from '../util/comparer';\nimport { wrapWithAbort } from './operators/withabort';\nimport { throwIfAborted } from '../aborterror';\n\n/**\n *  Determines whether an async-itreable includes a certain value among its entries, returning true or false as appropriate.\n *\n * @template T The type of elements in the source sequence.\n * @param {AsyncIterable<T>} source The source sequence to search for the item.\n * @param {T} valueToFind The value to search for.\n * @param {number} [fromIndex=0] The position in this async-iterable at which to begin searching for valueToFind.\n * @param {AbortSignal} [signal] An optional abort signal to cancel the operation at any time.\n * @returns {Promise<boolean>} Returns a promise containing true if the value valueToFind is found within the async-iterable.\n */\nexport async function includes<T>(\n  source: AsyncIterable<T>,\n  valueToFind: T,\n  fromIndex = 0,\n  signal?: AbortSignal\n): Promise<boolean> {\n  throwIfAborted(signal);\n  let fromIdx = fromIndex;\n  let i = 0;\n  if (Math.abs(fromIdx)) {\n    fromIdx = 0;\n  }\n  for await (const item of wrapWithAbort(source, signal)) {\n    if (i++ > fromIdx && comparer(item, valueToFind)) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}