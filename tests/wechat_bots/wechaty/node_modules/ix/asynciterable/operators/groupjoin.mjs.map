{"version":3,"sources":["asynciterable/operators/groupjoin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAC7C,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAE/C,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,sBAAsD,SAAQ,cAAuB;IACxF,MAAM,CAAwB;IAC9B,MAAM,CAAwB;IAC9B,cAAc,CAAgE;IAC9E,cAAc,CAAgE;IAC9E,eAAe,CAIS;IAEhC,YACE,KAA4B,EAC5B,KAA4B,EAC5B,aAA4E,EAC5E,aAA4E,EAC5E,cAI+B;QAE/B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QAChD,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,MAAM,GAAG,GAAG,MAAM,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QACrF,IAAI,KAAK,EAAE,MAAM,YAAY,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YACnE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACjE,MAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAmB,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YACxF,MAAM,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;SAC7E;IACH,CAAC;CACF;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,UAAU,SAAS,CACvB,KAA4B,EAC5B,aAA4E,EAC5E,aAA4E,EAC5E,cAI+B;IAE/B,OAAO,SAAS,yBAAyB,CAAC,KAA4B;QACpE,OAAO,IAAI,sBAAsB,CAC/B,KAAK,EACL,KAAK,EACL,aAAa,EACb,aAAa,EACb,cAAc,CACf,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","file":"groupjoin.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { createGrouping } from './_grouping';\nimport { empty } from '../empty';\nimport { from } from '../from';\nimport { identity } from '../../util/identity';\nimport { OperatorAsyncFunction } from '../../interfaces';\nimport { wrapWithAbort } from './withabort';\nimport { throwIfAborted } from '../../aborterror';\n\nexport class GroupJoinAsyncIterable<TOuter, TInner, TKey, TResult> extends AsyncIterableX<TResult> {\n  private _outer: AsyncIterable<TOuter>;\n  private _inner: AsyncIterable<TInner>;\n  private _outerSelector: (value: TOuter, signal?: AbortSignal) => TKey | Promise<TKey>;\n  private _innerSelector: (value: TInner, signal?: AbortSignal) => TKey | Promise<TKey>;\n  private _resultSelector: (\n    outer: TOuter,\n    inner: AsyncIterable<TInner>,\n    signal?: AbortSignal\n  ) => TResult | Promise<TResult>;\n\n  constructor(\n    outer: AsyncIterable<TOuter>,\n    inner: AsyncIterable<TInner>,\n    outerSelector: (value: TOuter, signal?: AbortSignal) => TKey | Promise<TKey>,\n    innerSelector: (value: TInner, signal?: AbortSignal) => TKey | Promise<TKey>,\n    resultSelector: (\n      outer: TOuter,\n      inner: AsyncIterable<TInner>,\n      signal?: AbortSignal\n    ) => TResult | Promise<TResult>\n  ) {\n    super();\n    this._outer = outer;\n    this._inner = inner;\n    this._outerSelector = outerSelector;\n    this._innerSelector = innerSelector;\n    this._resultSelector = resultSelector;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n    const map = await createGrouping(this._inner, this._innerSelector, identity, signal);\n    for await (const outerElement of wrapWithAbort(this._outer, signal)) {\n      const outerKey = await this._outerSelector(outerElement, signal);\n      const innerElements = map.has(outerKey) ? <Iterable<TInner>>map.get(outerKey) : empty();\n      yield await this._resultSelector(outerElement, from(innerElements), signal);\n    }\n  }\n}\n\n/**\n * Correlates the elements of two async-iterable sequences based on equality of keys and groups the results.\n *\n * @template TOuter The type of the elements of the first async-iterable sequence.\n * @template TInner The type of the elements of the second async-iterable sequence.\n * @template TKey The type of the keys returned by the key selector functions.\n * @template TResult The type of the result elements.\n * @param {AsyncIterable<TInner>} inner The async-enumerable sequence to join to the first sequence.\n * @param {((value: TOuter, signal?: AbortSignal) => TKey | Promise<TKey>)} outerSelector A function to extract the join key from each\n * element of the first sequence.\n * @param {((value: TInner, signal?: AbortSignal) => TKey | Promise<TKey>)} innerSelector A function to extract the join key from each\n * element of the second sequence.\n * @param {((\n *     outer: TOuter,\n *     inner: AsyncIterable<TInner>,\n *     signal?: AbortSignal\n *   ) => TResult | Promise<TResult>)} resultSelector A function to create a result element from an element from the first sequence and a\n * collection of matching elements from the second sequence.\n * @returns {OperatorAsyncFunction<TOuter, TResult>} An operator that returns an async-iterable sequence that contains the result elements\n * that are obtained by performing a grouped join on two sequences.\n */\nexport function groupJoin<TOuter, TInner, TKey, TResult>(\n  inner: AsyncIterable<TInner>,\n  outerSelector: (value: TOuter, signal?: AbortSignal) => TKey | Promise<TKey>,\n  innerSelector: (value: TInner, signal?: AbortSignal) => TKey | Promise<TKey>,\n  resultSelector: (\n    outer: TOuter,\n    inner: AsyncIterable<TInner>,\n    signal?: AbortSignal\n  ) => TResult | Promise<TResult>\n): OperatorAsyncFunction<TOuter, TResult> {\n  return function groupJoinOperatorFunction(outer: AsyncIterable<TOuter>): AsyncIterableX<TResult> {\n    return new GroupJoinAsyncIterable<TOuter, TInner, TKey, TResult>(\n      outer,\n      inner,\n      outerSelector,\n      innerSelector,\n      resultSelector\n    );\n  };\n}\n"]}