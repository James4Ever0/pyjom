{"version":3,"sources":["asynciterable/operators/retry.ts"],"names":[],"mappings":";;;AACA,4DAAyD;AACzD,8CAAsD;AAGtD;;;;;;;GAOG;AACH,SAAgB,KAAK,CAAU,KAAK,GAAG,CAAC,CAAC;IACvC,OAAO,SAAS,qBAAqB,CAAC,MAA8B;QAClE,OAAO,IAAI,kCAAqB,CAAU,yBAAW,CAAyB,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;IAChG,CAAC,CAAC;AACJ,CAAC;AAJD,sBAIC","file":"retry.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { repeatValue } from '../../iterable/repeatvalue';\nimport { CatchAllAsyncIterable } from '../catcherror';\nimport { MonoTypeOperatorAsyncFunction } from '../../interfaces';\n\n/**\n * Retries the async-iterable instance the number of given times. If not supplied, it will try infinitely.\n *\n * @template TSource The type of the elements in the source sequence.\n * @param {number} [count=-1] An optional number of times to retry, otherwise is set to infinite retries\n * @returns {MonoTypeOperatorAsyncFunction<TSource>} An async-iterable sequence producing the elements of the\n * given sequence repeatedly until it terminates successfully.\n */\nexport function retry<TSource>(count = -1): MonoTypeOperatorAsyncFunction<TSource> {\n  return function retryOperatorFunction(source: AsyncIterable<TSource>): AsyncIterableX<TSource> {\n    return new CatchAllAsyncIterable<TSource>(repeatValue<AsyncIterable<TSource>>(source, count));\n  };\n}\n"]}