{"version":3,"sources":["asynciterable/operators/concatwith.ts"],"names":[],"mappings":";;;AACA,sCAAgD;AAiGhD;;;;;;;GAOG;AACH,SAAgB,UAAU,CAAI,GAAG,IAAwB;IACvD,OAAO,SAAS,0BAA0B,CAAC,MAAwB;QACjE,OAAO,IAAI,4BAAmB,CAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;AACJ,CAAC;AAJD,gCAIC","file":"concatwith.js","sourcesContent":["import { OperatorAsyncFunction } from '../../interfaces';\nimport { ConcatAsyncIterable } from '../concat';\n\n/**\n * Concatenates the second async-iterable sequence to the first async-iterable sequence upon successful termination of the first.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @param {AsyncIterable<T>} v1 First async-iterable source.\n * @param {AsyncIterable<T2>} v2 Second async-iterable source.\n * @returns {(OperatorAsyncFunction<T, T | T2>)} An async-iterable sequence that contains the elements of the first sequence,\n * followed by those of the second the sequence.\n */\nexport function concatWith<T, T2>(v2: AsyncIterable<T2>): OperatorAsyncFunction<T, T | T2>;\n/**\n * Concatenates all async-iterable sequences in the given sequences, as long as the previous async-iterable\n * sequence terminated successfully.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @param {AsyncIterable<T>} v1 First async-iterable source.\n * @param {AsyncIterable<T2>} v2 Second async-iterable source.\n * @param {AsyncIterable<T3>} v3 Third async-iterable source.\n * @returns {(OperatorAsyncFunction<T, T | T2 | T3>)} An async-iterable sequence that contains the elements of each given sequence,\n * in sequential order.\n */\nexport function concatWith<T, T2, T3>(\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>\n): OperatorAsyncFunction<T, T | T2 | T3>;\n/**\n * Concatenates all async-iterable sequences in the given sequences, as long as the previous async-iterable\n * sequence terminated successfully.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @param {AsyncIterable<T2>} v2 Second async-iterable source.\n * @param {AsyncIterable<T3>} v3 Third async-iterable source.\n * @param {AsyncIterable<T4>} v4 Fourth async-iterable source.\n * @returns {(OperatorAsyncFunction<T, T | T2 | T3 | T4>)} An async-iterable sequence that contains the elements of each\n * given sequence, in sequential order.\n */\nexport function concatWith<T, T2, T3, T4>(\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>\n): OperatorAsyncFunction<T, T | T2 | T3 | T4>;\n/**\n * Concatenates all async-iterable sequences in the given sequences, as long as the previous async-iterable\n * sequence terminated successfully.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @template T5 The type of the elements in the fifth source sequence.\n * @param {AsyncIterable<T2>} v2 Second async-iterable source.\n * @param {AsyncIterable<T3>} v3 Third async-iterable source.\n * @param {AsyncIterable<T4>} v4 Fourth async-iterable source.\n * @param {AsyncIterable<T5>} v5 Fifth async-iterable source.\n * @returns {(OperatorAsyncFunction<T, T | T2 | T3 | T4 | T5>)} An async-iterable sequence that contains the elements of each\n * given sequence, in sequential order.\n */\nexport function concatWith<T, T2, T3, T4, T5>(\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>,\n  v5: AsyncIterable<T5>\n): OperatorAsyncFunction<T, T | T2 | T3 | T4 | T5>;\n/**\n * Concatenates all async-iterable sequences in the given sequences, as long as the previous async-iterable\n * sequence terminated successfully.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @template T5 The type of the elements in the fifth source sequence.\n * @template T6 The type of the elements in the sixth source sequence.\n * @param {AsyncIterable<T2>} v2 Second async-iterable source.\n * @param {AsyncIterable<T3>} v3 Third async-iterable source.\n * @param {AsyncIterable<T4>} v4 Fourth async-iterable source.\n * @param {AsyncIterable<T5>} v5 Fifth async-iterable source.\n * @param {AsyncIterable<T6>} v6 Sixth async-iterable source.\n * @returns {(OperatorAsyncFunction<T, T | T2 | T3 | T4 | T5 | T6>)} An async-iterable sequence that contains the elements of each\n * given sequence, in sequential order.\n */\nexport function concatWith<T, T2, T3, T4, T5, T6>(\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>,\n  v5: AsyncIterable<T5>,\n  v6: AsyncIterable<T6>\n): OperatorAsyncFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n\n/**\n * Concatenates all async-iterable sequences in the given sequences, as long as the previous async-iterable\n * sequence terminated successfully.\n *\n * @template T The type of the elements in the sequences.\n * @param {...AsyncIterable<T>[]} args The async-iterable sources.\n * @returns {AsyncIterableX<T>} An async-iterable sequence that contains the elements of each given sequence, in sequential order.\n */\nexport function concatWith<T>(...args: AsyncIterable<T>[]): OperatorAsyncFunction<T, T> {\n  return function concatWithOperatorFunction(source: AsyncIterable<T>) {\n    return new ConcatAsyncIterable<T>([source, ...args]);\n  };\n}\n"]}