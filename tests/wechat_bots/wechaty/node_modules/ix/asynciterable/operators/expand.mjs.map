{"version":3,"sources":["asynciterable/operators/expand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,mBAA6B,SAAQ,cAAuB;IAC/D,OAAO,CAAyB;IAChC,SAAS,CAG6C;IAE9D,YACE,MAA8B,EAC9B,QAG6D;QAE7D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QAChD,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,MAAM,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;YACtB,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,aAAa,CAAC,GAAI,EAAE,MAAM,CAAC,EAAE;gBACpD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBACjD,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACd,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,MAAM,CACpB,QAG6D;IAE7D,OAAO,SAAS,sBAAsB,CAAC,MAA8B;QACnE,OAAO,IAAI,mBAAmB,CAAU,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC;AACJ,CAAC","file":"expand.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { MonoTypeOperatorAsyncFunction } from '../../interfaces';\nimport { wrapWithAbort } from './withabort';\nimport { throwIfAborted } from '../../aborterror';\n\nexport class ExpandAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _selector: (\n    value: TSource,\n    signal?: AbortSignal\n  ) => AsyncIterable<TSource> | Promise<AsyncIterable<TSource>>;\n\n  constructor(\n    source: AsyncIterable<TSource>,\n    selector: (\n      value: TSource,\n      signal?: AbortSignal\n    ) => AsyncIterable<TSource> | Promise<AsyncIterable<TSource>>\n  ) {\n    super();\n    this._source = source;\n    this._selector = selector;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n    const q = [this._source];\n    while (q.length > 0) {\n      const src = q.shift();\n      for await (const item of wrapWithAbort(src!, signal)) {\n        const items = await this._selector(item, signal);\n        q.push(items);\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * Expands (breadth first) the async-iterable sequence by recursively applying a selector function to generate more sequences at each recursion level.\n *\n * @template TSource Source sequence element type.\n * @param {((\n *     value: TSource,\n *     signal?: AbortSignal\n *   ) => AsyncIterable<TSource> | Promise<AsyncIterable<TSource>>)} selector Selector function to retrieve the next sequence to expand.\n * @returns {MonoTypeOperatorAsyncFunction<TSource>} An operator which returns a sequence with results\n * from the recursive expansion of the source sequence.\n */\nexport function expand<TSource>(\n  selector: (\n    value: TSource,\n    signal?: AbortSignal\n  ) => AsyncIterable<TSource> | Promise<AsyncIterable<TSource>>\n): MonoTypeOperatorAsyncFunction<TSource> {\n  return function expandOperatorFunction(source: AsyncIterable<TSource>): AsyncIterableX<TSource> {\n    return new ExpandAsyncIterable<TSource>(source, selector);\n  };\n}\n"]}