{"version":3,"sources":["asynciterable/operators/combinelatestwith.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,0BAA0B,EAAE,MAAM,kBAAkB,CAAC;AAuG9D,MAAM,UAAU,iBAAiB,CAAI,GAAG,OAAc;IACpD,OAAO,SAAS,6BAA6B,CAAC,MAAwB;QACpE,OAAO,IAAI,0BAA0B,CAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC;AACJ,CAAC","file":"combinelatestwith.js","sourcesContent":["import { OperatorAsyncFunction } from '../../interfaces';\nimport { CombineLatestAsyncIterable } from '../combinelatest';\n\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @param {AsyncIterable<T>} source First async-iterable source.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatestWith<T, T2>(\n  source2: AsyncIterable<T2>\n): OperatorAsyncFunction<T, [T, T2]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2, T3]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatestWith<T, T2, T3>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>\n): OperatorAsyncFunction<T, [T, T2, T3]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2, T3, T4]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatestWith<T, T2, T3, T4>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>\n): OperatorAsyncFunction<T, [T, T2, T3, T4]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @template T5 The type of the elements in the fifth source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @param {AsyncIterable<T5>} source5 Fifth async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2, T3, T4, T5]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatestWith<T, T2, T3, T4, T5>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>\n): OperatorAsyncFunction<T, [T, T2, T3, T4, T5]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @template T5 The type of the elements in the fifth source sequence.\n * @template T6 The type of the elements in the sixth source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @param {AsyncIterable<T5>} source5 Fifth async-iterable source.\n * @param {AsyncIterable<T6>} source6 Sixth async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2, T3, T4, T5, T6]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatestWith<T, T2, T3, T4, T5, T6>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>,\n  source6: AsyncIterable<T6>\n): OperatorAsyncFunction<T, [T, T2, T3, T4, T5, T6]>;\n\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The of the elements in the source sequences.\n * @param {...AsyncIterable<T>[]} sources The async-iterable sources.\n * @returns {OperatorAsyncFunction<T, T[]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatestWith<T>(...sources: AsyncIterable<T>[]): OperatorAsyncFunction<T, T[]>;\nexport function combineLatestWith<T>(...sources: any[]): OperatorAsyncFunction<T, T[]> {\n  return function combineLatestOperatorFunction(source: AsyncIterable<T>) {\n    return new CombineLatestAsyncIterable<T>([source, ...sources]);\n  };\n}\n"]}