{"version":3,"sources":["asynciterable/operators/takewhile.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,sBAAgC,SAAQ,cAAuB;IAClE,OAAO,CAAyB;IAChC,UAAU,CAIc;IAEhC,YACE,MAA8B,EAC9B,SAA8F;QAE9F,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QAChD,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;YAC5D,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE;gBAC/C,MAAM;aACP;YACD,MAAM,IAAI,CAAC;SACZ;IACH,CAAC;CACF;AAyBD;;;;;;;GAOG;AACH,MAAM,UAAU,SAAS,CACvB,SAAwF;IAExF,OAAO,SAAS,yBAAyB,CAAC,MAAwB;QAChE,OAAO,IAAI,sBAAsB,CAAI,MAAM,EAAE,SAAS,CAAC,CAAC;IAC1D,CAAC,CAAC;AACJ,CAAC","file":"takewhile.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { OperatorAsyncFunction } from '../../interfaces';\nimport { wrapWithAbort } from './withabort';\nimport { throwIfAborted } from '../../aborterror';\n\nexport class TakeWhileAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _predicate: (\n    value: TSource,\n    index: number,\n    signal?: AbortSignal\n  ) => boolean | Promise<boolean>;\n\n  constructor(\n    source: AsyncIterable<TSource>,\n    predicate: (value: TSource, index: number, signal?: AbortSignal) => boolean | Promise<boolean>\n  ) {\n    super();\n    this._source = source;\n    this._predicate = predicate;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n    let i = 0;\n    for await (const item of wrapWithAbort(this._source, signal)) {\n      if (!(await this._predicate(item, i++, signal))) {\n        break;\n      }\n      yield item;\n    }\n  }\n}\n\n/**\n * Returns elements from an async-iterable sequence as long as a specified condition is true.\n *\n * @template T The type of the elements in the source sequence.\n * @template S The result of the predicate that is truthy/falsy.\n * @param {(value: T, index: number, signal?: AbortSignal) => value is S} predicate A function to test each element for a condition.\n * @returns {OperatorAsyncFunction<T, S>} An async-iterable sequence that contains the elements from the input sequence that occur\n * before the element at which the test no longer passes.\n */\nexport function takeWhile<T, S extends T>(\n  predicate: (value: T, index: number, signal?: AbortSignal) => value is S\n): OperatorAsyncFunction<T, S>;\n/**\n * Returns elements from an async-iterable sequence as long as a specified condition is true.\n *\n * @template T The type of the elements in the source sequence.\n * @param {((value: T, index: number, signal?: AbortSignal) => boolean | Promise<boolean>)} predicate A function to test each element for a condition.\n * @returns {OperatorAsyncFunction<T, T>} An async-iterable sequence that contains the elements from the input sequence that occur\n * before the element at which the test no longer passes.\n */\nexport function takeWhile<T>(\n  predicate: (value: T, index: number, signal?: AbortSignal) => boolean | Promise<boolean>\n): OperatorAsyncFunction<T, T>;\n/**\n * Returns elements from an async-iterable sequence as long as a specified condition is true.\n *\n * @template T The type of the elements in the source sequence.\n * @param {((value: T, index: number, signal?: AbortSignal) => boolean | Promise<boolean>)} predicate A function to test each element for a condition.\n * @returns {OperatorAsyncFunction<T, T>} An async-iterable sequence that contains the elements from the input sequence that occur\n * before the element at which the test no longer passes.\n */\nexport function takeWhile<T>(\n  predicate: (value: T, index: number, signal?: AbortSignal) => boolean | Promise<boolean>\n): OperatorAsyncFunction<T, T> {\n  return function takeWhileOperatorFunction(source: AsyncIterable<T>): AsyncIterableX<T> {\n    return new TakeWhileAsyncIterable<T>(source, predicate);\n  };\n}\n"]}