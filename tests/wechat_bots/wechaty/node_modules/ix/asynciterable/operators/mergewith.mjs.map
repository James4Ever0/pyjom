{"version":3,"sources":["asynciterable/operators/mergewith.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAwG9C,MAAM,UAAU,SAAS,CAAI,GAAG,IAAwB;IACtD,OAAO,SAAS,yBAAyB,CAAC,MAAwB;QAChE,OAAO,IAAI,kBAAkB,CAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC;AACJ,CAAC","file":"mergewith.js","sourcesContent":["import { OperatorAsyncFunction } from '../../interfaces';\nimport { MergeAsyncIterable } from '../merge';\n\n/**\n * Merges elements from all of the specified async-iterable sequences into a single async-iterable sequence.\n *\n * @template T The type of the first async-iterable sequence.\n * @template T2 The type of the second async-iterable sequence.\n * @param {AsyncIterable<T>} source The first async-iterable source to merge.\n * @param {AsyncIterable<T2>} v2 The second async-iterable source to merge.\n * @returns {(OperatorAsyncFunction<T, T | T2>)} The merged elements from all of the specified async-iterable sequences\n * into a single async-iterable sequence.\n */\nexport function mergeWith<T, T2>(v2: AsyncIterable<T2>): OperatorAsyncFunction<T, T | T2>;\n/**\n * Merges elements from all of the specified async-iterable sequences into a single async-iterable sequence.\n *\n * @template T The type of the first async-iterable sequence.\n * @template T2 The type of the second async-iterable sequence.\n * @template T3 The type of the third async-iterable sequence.\n * @param {AsyncIterable<T2>} v2 The second async-iterable source to merge.\n * @param {AsyncIterable<T3>} v3 The third async-iterable source to merge.\n * @returns {(OperatorAsyncFunction<T, T | T2 | T3>)} The merged elements from all of the specified async-iterable sequences\n * into a single async-iterable sequence.\n */\nexport function mergeWith<T, T2, T3>(\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>\n): OperatorAsyncFunction<T, T | T2 | T3>;\n/**\n * Merges elements from all of the specified async-iterable sequences into a single async-iterable sequence.\n *\n * @template T The type of the first async-iterable sequence.\n * @template T2 The type of the second async-iterable sequence.\n * @template T3 The type of the third async-iterable sequence.\n * @template T4 The type of the fourth async-iterable sequence.\n * @param {AsyncIterable<T2>} v2 The second async-iterable source to merge.\n * @param {AsyncIterable<T3>} v3 The third async-iterable source to merge.\n * @param {AsyncIterable<T4>} v4 The fourth async-iterable source to merge.\n * @returns {(OperatorAsyncFunction<T, T | T2 | T3 | T4>)} The merged elements from all of the specified async-iterable sequences\n * into a single async-iterable sequence.\n */\nexport function mergeWith<T, T2, T3, T4>(\n  source: AsyncIterable<T>,\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>\n): OperatorAsyncFunction<T, T | T2 | T3 | T4>;\n/**\n * Merges elements from all of the specified async-iterable sequences into a single async-iterable sequence.\n *\n * @template T The type of the first async-iterable sequence.\n * @template T2 The type of the second async-iterable sequence.\n * @template T3 The type of the third async-iterable sequence.\n * @template T4 The type of the fourth async-iterable sequence.\n * @template T5 The type of the fifth async-iterable sequence.\n * @param {AsyncIterable<T2>} v2 The second async-iterable source to merge.\n * @param {AsyncIterable<T3>} v3 The third async-iterable source to merge.\n * @param {AsyncIterable<T4>} v4 The fourth async-iterable source to merge.\n * @param {AsyncIterable<T5>} v5 The fifth async-iterable source to merge.\n * @returns {(OperatorAsyncFunction<T, T | T2 | T3 | T4 | T5>)} The merged elements from all of the specified async-iterable sequences\n * into a single async-iterable sequence.\n */\nexport function mergeWith<T, T2, T3, T4, T5>(\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>,\n  v5: AsyncIterable<T5>\n): OperatorAsyncFunction<T, T | T2 | T3 | T4 | T5>;\n/**\n * Merges elements from all of the specified async-iterable sequences into a single async-iterable sequence.\n *\n * @template T The type of the first async-iterable sequence.\n * @template T2 The type of the second async-iterable sequence.\n * @template T3 The type of the third async-iterable sequence.\n * @template T4 The type of the fourth async-iterable sequence.\n * @template T5 The type of the fifth async-iterable sequence.\n * @template T6 The type of the sixth async-iterable sequence.\n * @param {AsyncIterable<T2>} v2 The second async-iterable source to merge.\n * @param {AsyncIterable<T3>} v3 The third async-iterable source to merge.\n * @param {AsyncIterable<T4>} v4 The fourth async-iterable source to merge.\n * @param {AsyncIterable<T5>} v5 The fifth async-iterable source to merge.\n * @param {AsyncIterable<T6>} v6 The sixth async-iterable source to merge.\n * @returns {(AsyncIterable<T | T2 | T3 | T4 | T5 | T6>)} The merged elements from all of the specified async-iterable sequences\n * into a single async-iterable sequence.\n */\nexport function mergeWith<T, T2, T3, T4, T5, T6>(\n  v2: AsyncIterable<T2>,\n  v3: AsyncIterable<T3>,\n  v4: AsyncIterable<T4>,\n  v5: AsyncIterable<T5>,\n  v6: AsyncIterable<T6>\n): OperatorAsyncFunction<T, T | T2 | T3 | T4 | T5 | T6>;\n/**\n * Merges elements from all of the specified async-iterable sequences into a single async-iterable sequence.\n *\n * @template T The type of the elements in the sequence to merge.\n * @param {...AsyncIterable<T>[]} args The async-iterable sources to merge.\n * @returns {AsyncIterableX<T>} The merged elements from all of the specified async-iterable sequences into a single async-iterable sequence.\n */\nexport function mergeWith<T>(\n  source: AsyncIterable<T>,\n  ...args: AsyncIterable<T>[]\n): OperatorAsyncFunction<T, T>;\n\nexport function mergeWith<T>(...args: AsyncIterable<T>[]): OperatorAsyncFunction<T, T> {\n  return function mergeWithOperatorFunction(source: AsyncIterable<T>) {\n    return new MergeAsyncIterable<T>([source, ...args]);\n  };\n}\n"]}