{"version":3,"sources":["util/safeRace.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;EAyBE;;;AAEF,0EAA0E;AAC1E,kDAAkD;AAElD,SAAS,WAAW,CAAC,KAAc;IACjC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC;AACtF,CAAC;AAED,+EAA+E;AAC/E,sDAAsD;AACtD,MAAM,EAAE,GAAG,IAAI,OAAO,EAAY,CAAC;AACnC,SAAgB,QAAQ,CAAI,UAAwB;IAClD,IAAI,QAAa,CAAC;IAClB,MAAM,MAAM,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAChD,QAAQ,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;QAC/B,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAClC,IAAI,WAAW,CAAC,SAAS,CAAC,EAAE;gBAC1B,wEAAwE;gBACxE,4DAA4D;gBAC5D,wEAAwE;gBACxE,4CAA4C;gBAC5C,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACjD,SAAS;aACV;YAED,IAAI,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC/B,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,MAAM,GAAG,EAAE,SAAS,EAAE,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;gBAC5D,EAAE,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;gBAC1B,kEAAkE;gBAClE,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAC7B,CAAC,KAAK,EAAE,EAAE;oBACR,qCAAqC;oBACrC,KAAK,MAAM,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,SAAS,EAAE;wBAC1C,OAAO,CAAC,KAAK,CAAC,CAAC;qBAChB;oBAED,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;oBACzB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACxB,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;oBACN,qCAAqC;oBACrC,KAAK,MAAM,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,SAAS,EAAE;wBACzC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACb;oBAED,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;oBACzB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACxB,CAAC,CACF,CAAC;aACH;iBAAM,IAAI,MAAM,CAAC,OAAO,EAAE;gBACzB,+CAA+C;gBAC/C,2CAA2C;gBAC3C,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aAClD;iBAAM;gBACL,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;aAChC;SACF;IACH,CAAC,CAAC,CAAC;IAEH,0EAA0E;IAC1E,0EAA0E;IAC1E,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;QACzB,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAClC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;gBAC3B,MAAM,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACjC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aACnC;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AA3DD,4BA2DC","file":"safeRace.js","sourcesContent":["/*\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n*/\n\n// see: https://github.com/nodejs/node/issues/17469#issuecomment-685216777\n// see: https://github.com/ReactiveX/IxJS/pull/323\n\nfunction isPrimitive(value: unknown): boolean {\n  return value === null || (typeof value !== 'object' && typeof value !== 'function');\n}\n\n// Keys are the values passed to race, values are a record of data containing a\n// set of deferreds and whether the value has settled.\nconst wm = new WeakMap<any, any>();\nexport function safeRace<T>(contenders: Promise<T>[]): Promise<T> {\n  let deferred: any;\n  const result = new Promise<T>((resolve, reject) => {\n    deferred = { resolve, reject };\n    for (const contender of contenders) {\n      if (isPrimitive(contender)) {\n        // If the contender is a primitive, attempting to use it as a key in the\n        // weakmap would throw an error. Luckily, it is safe to call\n        // `Promise.resolve(contender).then` on a primitive value multiple times\n        // because the promise fulfills immediately.\n        Promise.resolve(contender).then(resolve, reject);\n        continue;\n      }\n\n      let record = wm.get(contender);\n      if (record === undefined) {\n        record = { deferreds: new Set([deferred]), settled: false };\n        wm.set(contender, record);\n        // This call to `then` happens once for the lifetime of the value.\n        Promise.resolve(contender).then(\n          (value) => {\n            // eslint-disable-next-line no-shadow\n            for (const { resolve } of record.deferreds) {\n              resolve(value);\n            }\n\n            record.deferreds.clear();\n            record.settled = true;\n          },\n          (err) => {\n            // eslint-disable-next-line no-shadow\n            for (const { reject } of record.deferreds) {\n              reject(err);\n            }\n\n            record.deferreds.clear();\n            record.settled = true;\n          }\n        );\n      } else if (record.settled) {\n        // If the value has settled, it is safe to call\n        // `Promise.resolve(contender).then` on it.\n        Promise.resolve(contender).then(resolve, reject);\n      } else {\n        record.deferreds.add(deferred);\n      }\n    }\n  });\n\n  // The finally callback executes when any value settles, preventing any of\n  // the unresolved values from retaining a reference to the resolved value.\n  return result.finally(() => {\n    for (const contender of contenders) {\n      if (!isPrimitive(contender)) {\n        const record = wm.get(contender);\n        record.deferreds.delete(deferred);\n      }\n    }\n  });\n}\n"]}