{"version":3,"sources":["iterable/range.ts"],"names":[],"mappings":";;;AAAA,2CAAwC;AAExC,MAAM,aAAc,SAAQ,qBAAiB;IACnC,MAAM,CAAS;IACf,MAAM,CAAS;IAEvB,YAAY,KAAa,EAAE,KAAa;QACtC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,KAAK,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,OAAO,GAAG,GAAG,EAAE,OAAO,EAAE,EAAE;YACzF,MAAM,OAAO,CAAC;SACf;IACH,CAAC;CACF;AAED;;;;;;GAMG;AACH,SAAgB,KAAK,CAAC,KAAa,EAAE,KAAa;IAChD,OAAO,IAAI,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACzC,CAAC;AAFD,sBAEC","file":"range.js","sourcesContent":["import { IterableX } from './iterablex';\n\nclass RangeIterable extends IterableX<number> {\n  private _start: number;\n  private _count: number;\n\n  constructor(start: number, count: number) {\n    super();\n    this._start = start;\n    this._count = count;\n  }\n\n  *[Symbol.iterator]() {\n    for (let current = this._start, end = this._start + this._count; current < end; current++) {\n      yield current;\n    }\n  }\n}\n\n/**\n * Generates an iterable sequence of integral numbers within a specified range.\n *\n * @param {number} start The value of the first integer in the sequence.\n * @param {number} count The number of sequential integers to generate.\n * @returns {IterableX<number>} An iterable sequence that contains a range of sequential integral numbers.\n */\nexport function range(start: number, count: number): IterableX<number> {\n  return new RangeIterable(start, count);\n}\n"]}