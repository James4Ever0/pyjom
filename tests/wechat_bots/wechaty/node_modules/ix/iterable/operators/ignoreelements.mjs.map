{"version":3,"sources":["iterable/operators/ignoreelements.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAGzC,MAAM,OAAO,sBAAgC,SAAQ,SAAkB;IAC7D,OAAO,CAAoB;IAEnC,YAAY,MAAyB;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3C,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE;YACtB,yBAAyB;SAC1B;IACH,CAAC;CACF;AAED;;;;;;GAMG;AACH,MAAM,UAAU,cAAc;IAC5B,OAAO,SAAS,8BAA8B,CAAC,MAAyB;QACtE,OAAO,IAAI,sBAAsB,CAAU,MAAM,CAAC,CAAC;IACrD,CAAC,CAAC;AACJ,CAAC","file":"ignoreelements.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { MonoTypeOperatorFunction } from '../../interfaces';\n\nexport class IgnoreElementsIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n\n  constructor(source: Iterable<TSource>) {\n    super();\n    this._source = source;\n  }\n\n  *[Symbol.iterator](): Iterator<TSource> {\n    const it = this._source[Symbol.iterator]();\n    while (!it.next().done) {\n      /* intentionally empty */\n    }\n  }\n}\n\n/**\n * Ignores all elements in an iterable sequence leaving only the termination messages.\n *\n * @template TSource The type of the elements in the source sequence\n * @returns {MonoTypeOperatorFunction<TSource>} An operator that returns an empty iterable sequence\n * that signals termination, successful or exceptional, of the source sequence.\n */\nexport function ignoreElements<TSource>(): MonoTypeOperatorFunction<TSource> {\n  return function ignoreElementsOperatorFunction(source: Iterable<TSource>): IterableX<TSource> {\n    return new IgnoreElementsIterable<TSource>(source);\n  };\n}\n"]}