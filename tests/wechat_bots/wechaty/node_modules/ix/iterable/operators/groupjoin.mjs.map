{"version":3,"sources":["iterable/operators/groupjoin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAC7C,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAG/C,MAAM,OAAO,iBAAiD,SAAQ,SAAkB;IAC9E,MAAM,CAAmB;IACzB,MAAM,CAAmB;IACzB,cAAc,CAA0B;IACxC,cAAc,CAA0B;IACxC,eAAe,CAAsD;IAE7E,YACE,KAAuB,EACvB,KAAuB,EACvB,aAAsC,EACtC,aAAsC,EACtC,cAAmE;QAEnE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,MAAM,GAAG,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACvE,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE;YACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YACnD,MAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAmB,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;YACxF,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;SACzD;IACH,CAAC;CACF;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,UAAU,SAAS,CACvB,KAAuB,EACvB,aAAsC,EACtC,aAAsC,EACtC,cAAmE;IAEnE,OAAO,SAAS,yBAAyB,CAAC,KAAuB;QAC/D,OAAO,IAAI,iBAAiB,CAC1B,KAAK,EACL,KAAK,EACL,aAAa,EACb,aAAa,EACb,cAAc,CACf,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","file":"groupjoin.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { createGrouping } from './_grouping';\nimport { empty } from '../empty';\nimport { identity } from '../../util/identity';\nimport { OperatorFunction } from '../../interfaces';\n\nexport class GroupJoinIterable<TOuter, TInner, TKey, TResult> extends IterableX<TResult> {\n  private _outer: Iterable<TOuter>;\n  private _inner: Iterable<TInner>;\n  private _outerSelector: (value: TOuter) => TKey;\n  private _innerSelector: (value: TInner) => TKey;\n  private _resultSelector: (outer: TOuter, inner: Iterable<TInner>) => TResult;\n\n  constructor(\n    outer: Iterable<TOuter>,\n    inner: Iterable<TInner>,\n    outerSelector: (value: TOuter) => TKey,\n    innerSelector: (value: TInner) => TKey,\n    resultSelector: (outer: TOuter, inner: Iterable<TInner>) => TResult\n  ) {\n    super();\n    this._outer = outer;\n    this._inner = inner;\n    this._outerSelector = outerSelector;\n    this._innerSelector = innerSelector;\n    this._resultSelector = resultSelector;\n  }\n\n  *[Symbol.iterator]() {\n    const map = createGrouping(this._inner, this._innerSelector, identity);\n    for (const outerElement of this._outer) {\n      const outerKey = this._outerSelector(outerElement);\n      const innerElements = map.has(outerKey) ? <Iterable<TInner>>map.get(outerKey) : empty();\n      yield this._resultSelector(outerElement, innerElements);\n    }\n  }\n}\n\n/**\n * Correlates the elements of two iterable sequences based on equality of keys and groups the results.\n *\n * @template TOuter The type of the elements of the first iterable sequence.\n * @template TInner The type of the elements of the second iterable sequence.\n * @template TKey The type of the keys returned by the key selector functions.\n * @template TResult The type of the result elements.\n * @param {Iterable<TInner>} inner The async-enumerable sequence to join to the first sequence.\n * @param {((value: TOuter) => TKey)} outerSelector A function to extract the join key from each\n * element of the first sequence.\n * @param {((value: TInner) => TKey)} innerSelector A function to extract the join key from each\n * element of the second sequence.\n * @param {((outer: TOuter, inner: Iterable<TInner>) => TResult)} resultSelector A function to create a result\n * element from an element from the first sequence and a collection of matching elements from the second sequence.\n * @returns {OperatorFunction<TOuter, TResult>} An operator that returns an iterable sequence that contains the result elements\n * that are obtained by performing a grouped join on two sequences.\n */\nexport function groupJoin<TOuter, TInner, TKey, TResult>(\n  inner: Iterable<TInner>,\n  outerSelector: (value: TOuter) => TKey,\n  innerSelector: (value: TInner) => TKey,\n  resultSelector: (outer: TOuter, inner: Iterable<TInner>) => TResult\n): OperatorFunction<TOuter, TResult> {\n  return function groupJoinOperatorFunction(outer: Iterable<TOuter>): IterableX<TResult> {\n    return new GroupJoinIterable<TOuter, TInner, TKey, TResult>(\n      outer,\n      inner,\n      outerSelector,\n      innerSelector,\n      resultSelector\n    );\n  };\n}\n"]}