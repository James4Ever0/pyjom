{"version":3,"sources":["iterable/operators/publish.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAGnC,MAAM,eAAmB,SAAQ,SAAY;IACnC,OAAO,CAAkB;IACzB,OAAO,CAAc;IACrB,MAAM,CAAM;IACZ,QAAQ,GAAG,KAAK,CAAC;IAEzB,YAAY,MAAmB;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAAI,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,sCAAsC;IAC9B,CAAC,YAAY,CAAC,CAAS;QAC7B,IAAI;YACF,OAAO,CAAC,EAAE;gBACR,IAAI,QAAQ,GAAG,KAAK,CAAC;gBACrB,IAAI,OAAO,GAAM,EAAE,CAAC;gBACpB,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;oBAC3B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;wBAClB,IAAI;4BACF,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;4BACjC,QAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;4BACtB,qCAAqC;4BACrC,IAAI,QAAQ,EAAE;gCACZ,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;6BACtB;yBACF;wBAAC,OAAO,CAAC,EAAE;4BACV,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;4BAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;yBACtB;qBACF;oBAED,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACjB,IAAI,IAAI,CAAC,MAAM,EAAE;4BACf,MAAM,IAAI,CAAC,MAAM,CAAC;yBACnB;6BAAM;4BACL,MAAM;yBACP;qBACF;oBAED,IAAI,QAAQ,EAAE;wBACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC5B;iBACF;qBAAM;oBACL,QAAQ,GAAG,IAAI,CAAC;iBACjB;gBAED,IAAI,QAAQ,EAAE;oBACZ,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC3B;qBAAM;oBACL,MAAM;iBACP;gBAED,6CAA6C;gBAC7C,CAAC,EAAE,CAAC;aACL;SACF;gBAAS;YACR,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACrB;IACH,CAAC;IAED,CAAC,MAAM,CAAC,QAAQ,CAAC;QACf,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;IAClE,CAAC;CACF;AAyBD;;;;;;;;;;GAUG;AACH,MAAM,UAAU,OAAO,CACrB,QAA0D;IAE1D,OAAO,SAAS,uBAAuB,CAAC,MAAyB;QAC/D,OAAO,QAAQ;YACb,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAW,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;YACvE,CAAC,CAAC,IAAI,eAAe,CAAU,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC;AACJ,CAAC","file":"publish.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { RefCountList } from './_refcountlist';\nimport { create } from '../create';\nimport { OperatorFunction } from '../../interfaces';\n\nclass PublishedBuffer<T> extends IterableX<T> {\n  private _buffer: RefCountList<T>;\n  private _source: Iterator<T>;\n  private _error: any;\n  private _stopped = false;\n\n  constructor(source: Iterator<T>) {\n    super();\n    this._source = source;\n    this._buffer = new RefCountList<T>(0);\n  }\n\n  // eslint-disable-next-line complexity\n  private *_getIterable(i: number): Iterable<T> {\n    try {\n      while (1) {\n        let hasValue = false;\n        let current = <T>{};\n        if (i >= this._buffer.count) {\n          if (!this._stopped) {\n            try {\n              const next = this._source.next();\n              hasValue = !next.done;\n              // eslint-disable-next-line max-depth\n              if (hasValue) {\n                current = next.value;\n              }\n            } catch (e) {\n              this._error = e;\n              this._stopped = true;\n            }\n          }\n\n          if (this._stopped) {\n            if (this._error) {\n              throw this._error;\n            } else {\n              break;\n            }\n          }\n\n          if (hasValue) {\n            this._buffer.push(current);\n          }\n        } else {\n          hasValue = true;\n        }\n\n        if (hasValue) {\n          yield this._buffer.get(i);\n        } else {\n          break;\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        i++;\n      }\n    } finally {\n      this._buffer.done();\n    }\n  }\n\n  [Symbol.iterator](): Iterator<T> {\n    this._buffer.readerCount++;\n    return this._getIterable(this._buffer.count)[Symbol.iterator]();\n  }\n}\n\n/**\n * Creates a buffer with a view over the source sequence, causing each iterator to obtain access to the\n * remainder of the sequence from the current index in the buffer.\n *\n * @template TSource Source sequence element type.\n * @returns {OperatorFunction<TSource, TSource>} Buffer enabling each iterator to retrieve elements from\n * the shared source sequence, starting from the index at the point of obtaining the enumerator.\n */\nexport function publish<TSource>(): OperatorFunction<TSource, TSource>;\n/**\n * Buffer enabling each iterator to retrieve elements from the shared source sequence, starting from the\n * index at the point of obtaining the iterator.\n *\n * @template TSource Source sequence element type.\n * @template TResult Result sequence element type.\n * @param {(value: Iterable<TSource>) => Iterable<TResult>} [selector] Selector function with published\n * access to the source sequence for each iterator.\n * @returns {OperatorFunction<TSource, TResult>} Sequence resulting from applying the selector function to the\n * published view over the source sequence.\n */\nexport function publish<TSource, TResult>(\n  selector?: (value: Iterable<TSource>) => Iterable<TResult>\n): OperatorFunction<TSource, TResult>;\n/**\n * Buffer enabling each iterator to retrieve elements from the shared source sequence, starting from the\n * index at the point of obtaining the iterator.\n *\n * @template TSource Source sequence element type.\n * @template TResult Result sequence element type.\n * @param {(value: Iterable<TSource>) => Iterable<TResult>} [selector] Selector function with published\n * access to the source sequence for each iterator.\n * @returns {(OperatorFunction<TSource, TSource | TResult>)} Sequence resulting from applying the selector function to the\n * published view over the source sequence.\n */\nexport function publish<TSource, TResult>(\n  selector?: (value: Iterable<TSource>) => Iterable<TResult>\n): OperatorFunction<TSource, TSource | TResult> {\n  return function publishOperatorFunction(source: Iterable<TSource>): IterableX<TSource | TResult> {\n    return selector\n      ? create(() => selector(publish<TSource>()(source))[Symbol.iterator]())\n      : new PublishedBuffer<TSource>(source[Symbol.iterator]());\n  };\n}\n"]}