{"version":3,"sources":["iterable/operators/tonodestream.ts"],"names":[],"mappings":";;;AACA,8DAA+D;AAa/D,SAAgB,YAAY,CAC1B,OAAyB;IAEzB,OAAO,SAAS,4BAA4B,CAAC,MAAqB;QAChE,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,UAAU,KAAK,IAAI;YAC5C,CAAC,CAAC,IAAI,+BAAgB,CAAU,MAAM,EAAE,OAAO,CAAC;YAChD,CAAC,CAAC,IAAI,+BAAgB,CAA6C,MAAM,EAAE,OAAO,CAAC,CAAC;IACxF,CAAC,CAAC;AACJ,CAAC;AARD,oCAQC","file":"tonodestream.js","sourcesContent":["import { ReadableOptions } from 'stream';\nimport { IterableReadable } from '../../iterable/tonodestream';\nimport { BufferLike, UnaryFunction } from '../../interfaces';\n\nexport function toNodeStream<TSource>(): UnaryFunction<\nIterable<TSource>,\nIterableReadable<TSource>\n>;\nexport function toNodeStream<TSource>(\n  options: ReadableOptions & { objectMode: true }\n): UnaryFunction<Iterable<TSource>, IterableReadable<TSource>>;\nexport function toNodeStream<TSource extends BufferLike>(\n  options: ReadableOptions & { objectMode: false }\n): UnaryFunction<Iterable<TSource>, IterableReadable<TSource>>;\nexport function toNodeStream<TSource>(\n  options?: ReadableOptions\n): UnaryFunction<Iterable<TSource>, IterableReadable<TSource>> {\n  return function toNodeStreamOperatorFunction(source: Iterable<any>): IterableReadable<TSource> {\n    return !options || options.objectMode === true\n      ? new IterableReadable<TSource>(source, options)\n      : new IterableReadable<TSource extends BufferLike ? TSource : any>(source, options);\n  };\n}\n"]}