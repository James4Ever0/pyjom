#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const boolean_indicator_js_1 = require("./boolean-indicator.js");
(0, tstest_1.test)('BooleanIndicator init state', async (t) => {
    const indicator = new boolean_indicator_js_1.BooleanIndicator();
    t.equal(indicator.value(), false, 'should not be not true after init');
    await t.resolves(() => indicator.ready(false), 'should be idle after init');
});
(0, tstest_1.test)('BooleanIndicator set true', async (t) => {
    const sandbox = tstest_1.sinon.createSandbox();
    const spy = sandbox.spy();
    const indicator = new boolean_indicator_js_1.BooleanIndicator();
    indicator.value(true);
    t.equal(indicator.value(), true, 'should not be true after set true');
    indicator.ready(false).then(spy).catch(e => t.fail(e));
    await new Promise(setImmediate);
    t.equal(spy.callCount, 0, 'should not resolve ready(false) when true');
    sandbox.restore();
});
(0, tstest_1.test)('BooleanIndicator state transition', async (t) => {
    const sandbox = tstest_1.sinon.createSandbox();
    const spy = sandbox.spy();
    const indicator = new boolean_indicator_js_1.BooleanIndicator();
    indicator.value(true);
    indicator.ready(false).then(spy).catch(e => t.fail(e));
    await new Promise(setImmediate);
    t.equal(spy.callCount, 0, 'should not resolve ready(false) when true');
    indicator.value(false);
    await new Promise(setImmediate);
    t.equal(spy.callCount, 1, 'should resolve ready(false) when set to false');
});
//# sourceMappingURL=boolean-indicator.spec.js.map