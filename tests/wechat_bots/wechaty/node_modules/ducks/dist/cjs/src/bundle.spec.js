#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *   Ducks - https://github.com/huan/ducks
 *
 *   @copyright 2020 Huan LI (李卓桓) <https://github.com/huan>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
const tstest_1 = require("tstest");
const redux_1 = require("redux");
const redux_mock_store_1 = __importDefault(require("redux-mock-store"));
const counterDuck = __importStar(require("../examples/counter/mod.js"));
const bundle_js_1 = require("./bundle.js");
// https://github.com/huan/ducks/issues/3
const createMockStore = redux_mock_store_1.default.default;
(0, tstest_1.test)('VERSION', async (t) => {
    t.ok(bundle_js_1.Bundle.VERSION, 'has VERSION');
});
(0, tstest_1.test)('setStore()', async (t) => {
    const duck = new bundle_js_1.Bundle(counterDuck);
    const store = createMockStore()();
    t.throws(() => duck.selectors.getMeaningOfLife(42), 'should throw before setStore()');
    duck.setStore(store);
    t.doesNotThrow(() => duck.selectors.getMeaningOfLife(42), 'should not throw after setStore()');
});
(0, tstest_1.test)("ducksify functions' names", async (t) => {
    /**
     * Inferred function names
     *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
     */
    const duck = new bundle_js_1.Bundle(counterDuck);
    Object.keys(counterDuck.selectors).forEach(selector => {
        const bundleSelectorsFunc = duck.selectors[selector];
        const duckSelectorsFunc = counterDuck.selectors[selector];
        t.equals(bundleSelectorsFunc.name, duckSelectorsFunc.name, 'selectors function name should keep the same after ducksify');
    });
});
(0, tstest_1.test)('ducksify selectors & operations', async (t) => {
    const duck = new bundle_js_1.Bundle(counterDuck);
    const NAMESPACE = 'duck';
    const reducer = (0, redux_1.combineReducers)({
        [NAMESPACE]: duck.reducer,
    });
    const store = (0, redux_1.createStore)(reducer);
    duck.setStore(store);
    duck.setNamespaces(NAMESPACE);
    // store.subscribe(() => {
    //   console.info('store.subscribe() store.getState()', store.getState())
    // })
    let counter = duck.selectors.getCounter();
    t.equal(counter, 0, 'should be 0 before initialized');
    duck.operations.tap();
    counter = duck.selectors.getCounter();
    t.equal(counter, 1, 'should be 1 after tap');
});
//# sourceMappingURL=bundle.spec.js.map