"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dingDong = exports.counter = void 0;
/**
 *   Ducks - https://github.com/huan/ducks
 *
 *   @copyright 2020 Huan LI (李卓桓) <https://github.com/huan>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
const assert_1 = __importDefault(require("assert"));
const redux_1 = require("redux");
const mod_js_1 = require("../src/mod.js");
const switcherDuck = __importStar(require("./switcher/mod.js")); // Vanilla Duck: ON/OFF
const counterDuck = __importStar(require("./counter/mod.js")); // TypeSafe Actions: +1
const dingDongDuck = __importStar(require("./ding-dong/mod.js")); // Observable Middleware
// import * as pingPongDuck from './ping-pong/mod.js'  // Saga Middleware
const ducks = new mod_js_1.Ducks({
    counter: counterDuck,
    dingDong: dingDongDuck,
    // pingPong : pingPongDuck,
    switcher: switcherDuck,
});
const { counter, dingDong, 
// pingPong,
switcher, } = ducks.ducksify();
exports.counter = counter;
exports.dingDong = dingDong;
/**
 * Create the store.
 *
 * You can use `ducks.configureStore()` to create the same store
 * as the following code does, for your convenience.
 */
const store = (0, redux_1.createStore)(state => state, // Here's our normal Redux Reducer
ducks.enhancer());
// Show the initial store state structure data
const state = store.getState();
console.info('# Initial Store State:', state);
// Show the initialized store state structure
// store.subscribe(() => console.info(store.getState()))
/**
 * Vanilla: Switchers
 */
assert_1.default.strictEqual(switcher.selectors.getStatus(), false);
switcher.operations.toggle();
assert_1.default.strictEqual(switcher.selectors.getStatus(), true);
/**
 * TypeSafe Actions: Counter
 */
assert_1.default.strictEqual(counter.selectors.getCounter(), 0);
counter.operations.tap();
assert_1.default.strictEqual(counter.selectors.getCounter(), 1);
assert_1.default.strictEqual(counter.selectors.getMeaningOfLife(3), 42);
/**
 * Epic Middleware: DingDong
 */
assert_1.default.strictEqual(dingDong.selectors.getDong(), 0);
dingDong.operations.ding();
assert_1.default.strictEqual(dingDong.selectors.getDong(), 1);
/**
 * Saga Middleware: PingPong
 *
 * Huan(202109): disable saga
 *  See: https://github.com/huan/ducks/issues/4
 */
// assert.strictEqual(pingPong.selectors.getPong(), 0)
// pingPong.operations.ping()
// assert.strictEqual(pingPong.selectors.getPong(), 1)
// Show the new store state structure data
console.info('# Final Store State:', store.getState());
//# sourceMappingURL=quack.js.map