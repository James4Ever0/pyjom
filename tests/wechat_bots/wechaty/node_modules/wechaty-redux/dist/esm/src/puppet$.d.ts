/**
 *   Wechaty Open Source Software - https://github.com/wechaty
 *
 *   @copyright 2016 Huan LI (李卓桓) <https://github.com/huan>, and
 *                   Wechaty Contributors <https://github.com/wechaty>.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
import type * as PUPPET from 'wechaty-puppet';
import { RegisterPuppetOptions } from './registry/mod.js';
/**
 * Ducks operations need to get Puppet instance by id
 *   this map is used to store the Puppet instances
 */
declare const puppet$: (puppetInterface: PUPPET.impls.PuppetInterface, options?: RegisterPuppetOptions | undefined) => import("rxjs").Observable<import("typesafe-actions").PayloadAction<"wechaty-redux/REGISTER_PUPPET_COMMAND", {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/STATE_ACTIVATED_EVENT", {
    state: true | "pending";
}, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/STATE_INACTIVATED_EVENT", {
    state: true | "pending";
}, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/STARTED_EVENT", {
    puppetId: string;
}, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/STOPPED_EVENT", {
    puppetId: string;
}, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/DONG_RECEIVED_EVENT", PUPPET.payloads.EventDong, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/ERROR_RECEIVED_EVENT", PUPPET.payloads.EventError, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/FRIENDSHIP_RECEIVED_EVENT", PUPPET.payloads.EventFriendship, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/HEARTBEAT_RECEIVED_EVENT", PUPPET.payloads.EventHeartbeat, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/LOGIN_RECEIVED_EVENT", PUPPET.payloads.EventLogin, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/LOGOUT_RECEIVED_EVENT", PUPPET.payloads.EventLogout, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/MESSAGE_RECEIVED_EVENT", PUPPET.payloads.EventMessage, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/READY_RECEIVED_EVENT", PUPPET.payloads.EventReady, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/RESET_RECEIVED_EVENT", PUPPET.payloads.EventReset, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/ROOM_INVITE_RECEIVED_EVENT", PUPPET.payloads.EventRoomInvite, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/ROOM_JOIN_RECEIVED_EVENT", PUPPET.payloads.EventRoomJoin, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/ROOM_LEAVE_RECEIVED_EVENT", PUPPET.payloads.EventRoomLeave, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/ROOM_TOPIC_RECEIVED_EVENT", PUPPET.payloads.EventRoomTopic, {
    puppetId: string;
}> | import("typesafe-actions").PayloadMetaAction<"wechaty-redux/SCAN_RECEIVED_EVENT", PUPPET.payloads.EventScan, {
    puppetId: string;
}>>;
export { puppet$, };
//# sourceMappingURL=puppet$.d.ts.map