"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOP_COMMAND = exports.RESET_COMMAND = exports.DING_COMMAND = exports.SCAN_RECEIVED_EVENT = exports.ROOM_TOPIC_RECEIVED_EVENT = exports.ROOM_LEAVE_RECEIVED_EVENT = exports.ROOM_JOIN_RECEIVED_EVENT = exports.ROOM_INVITE_RECEIVED_EVENT = exports.RESET_RECEIVED_EVENT = exports.READY_RECEIVED_EVENT = exports.MESSAGE_RECEIVED_EVENT = exports.LOGOUT_RECEIVED_EVENT = exports.LOGIN_RECEIVED_EVENT = exports.HEARTBEAT_RECEIVED_EVENT = exports.FRIENDSHIP_RECEIVED_EVENT = exports.ERROR_RECEIVED_EVENT = exports.DONG_RECEIVED_EVENT = exports.STOPPED_EVENT = exports.STARTED_EVENT = exports.STATE_INACTIVATED_EVENT = exports.STATE_ACTIVATED_EVENT = exports.UNBIND_WECHATY_PUPPET_COMMAND = exports.BIND_WECHATY_PUPPET_COMMAND = exports.DEREGISTER_WECHATY_COMMAND = exports.REGISTER_WECHATY_COMMAND = exports.DEREGISTER_PUPPET_COMMAND = exports.REGISTER_PUPPET_COMMAND = void 0;
/**
 *   Wechaty Open Source Software - https://github.com/wechaty
 *
 *   @copyright 2016 Huan LI (李卓桓) <https://github.com/huan>, and
 *                   Wechaty Contributors <https://github.com/wechaty>.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
/* eslint-disable sort-keys */
const typesafe_actions_1 = require("typesafe-actions");
const types = __importStar(require("./types.js"));
/**
 * We put `puppetId` in the meta property
 *
 * This must be sync with CQRS Wechaty module
 */
const metaPuppetId = (puppetId, ..._) => ({ puppetId });
/**
 * @private Registery Actions Payload
 */
const payloadPuppetId = (puppetId) => ({ puppetId });
const payloadWechatyId = (wechatyId) => ({ wechatyId });
const payloadWechatyPuppetId = (options) => options;
/**
 * @private Registry Actions Creators
 */
exports.REGISTER_PUPPET_COMMAND = (0, typesafe_actions_1.createAction)(types.REGISTER_PUPPET_COMMAND, payloadPuppetId)();
exports.DEREGISTER_PUPPET_COMMAND = (0, typesafe_actions_1.createAction)(types.DEREGISTER_PUPPET_COMMAND, payloadPuppetId)();
exports.REGISTER_WECHATY_COMMAND = (0, typesafe_actions_1.createAction)(types.REGISTER_WECHATY_COMMAND, payloadWechatyId)();
exports.DEREGISTER_WECHATY_COMMAND = (0, typesafe_actions_1.createAction)(types.DEREGISTER_WECHATY_COMMAND, payloadWechatyId)();
exports.BIND_WECHATY_PUPPET_COMMAND = (0, typesafe_actions_1.createAction)(types.BIND_WECHATY_PUPPET_COMMAND, payloadWechatyPuppetId)();
exports.UNBIND_WECHATY_PUPPET_COMMAND = (0, typesafe_actions_1.createAction)(types.UNBIND_WECHATY_PUPPET_COMMAND, payloadWechatyPuppetId)();
/**
 * @public
 *
 * Event Actions' Payloads
 */
const payloadStateActive = (_puppetId, state) => ({ state });
const payloadStateInactive = (_puppetId, state) => ({ state });
const payloadEventDong = (_puppetId, payload) => payload;
const payloadEventError = (_puppetId, payload) => payload;
const payloadEventHeartbeat = (_puppetId, payload) => payload;
const payloadEventReady = (_puppetId, payload) => payload;
const payloadEventReset = (_puppetId, payload) => payload;
const payloadEventFriendship = (_puppetId, payload) => payload;
const payloadEventLogin = (_puppetId, payload) => payload;
const payloadEventLogout = (_puppetId, payload) => payload;
const payloadEventMessage = (_puppetId, payload) => payload;
const payloadEventRoomInvitation = (_puppetId, payload) => payload;
const payloadEventRoomJoin = (_puppetId, payload) => payload;
const payloadEventRoomLeave = (_puppetId, payload) => payload;
const payloadEventRoomTopic = (_puppetId, payload) => payload;
const payloadEventScan = (_puppetId, payload) => payload;
/**
 * Actions: StateState
 */
exports.STATE_ACTIVATED_EVENT = (0, typesafe_actions_1.createAction)(types.STATE_ACTIVATED_EVENT, payloadStateActive, metaPuppetId)();
exports.STATE_INACTIVATED_EVENT = (0, typesafe_actions_1.createAction)(types.STATE_INACTIVATED_EVENT, payloadStateInactive, metaPuppetId)();
exports.STARTED_EVENT = (0, typesafe_actions_1.createAction)(types.STARTED_EVENT, payloadPuppetId, metaPuppetId)();
exports.STOPPED_EVENT = (0, typesafe_actions_1.createAction)(types.STOPPED_EVENT, payloadPuppetId, metaPuppetId)();
/**
 * Actions: Pure Events
 */
exports.DONG_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.DONG_RECEIVED_EVENT, payloadEventDong, metaPuppetId)();
exports.ERROR_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.ERROR_RECEIVED_EVENT, payloadEventError, metaPuppetId)();
exports.FRIENDSHIP_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.FRIENDSHIP_RECEIVED_EVENT, payloadEventFriendship, metaPuppetId)();
exports.HEARTBEAT_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.HEARTBEAT_RECEIVED_EVENT, payloadEventHeartbeat, metaPuppetId)();
exports.LOGIN_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.LOGIN_RECEIVED_EVENT, payloadEventLogin, metaPuppetId)();
exports.LOGOUT_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.LOGOUT_RECEIVED_EVENT, payloadEventLogout, metaPuppetId)();
exports.MESSAGE_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.MESSAGE_RECEIVED_EVENT, payloadEventMessage, metaPuppetId)();
exports.READY_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.READY_RECEIVED_EVENT, payloadEventReady, metaPuppetId)();
exports.RESET_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.RESET_RECEIVED_EVENT, payloadEventReset, metaPuppetId)();
exports.ROOM_INVITE_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.ROOM_INVITE_RECEIVED_EVENT, payloadEventRoomInvitation, metaPuppetId)();
exports.ROOM_JOIN_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.ROOM_JOIN_RECEIVED_EVENT, payloadEventRoomJoin, metaPuppetId)();
exports.ROOM_LEAVE_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.ROOM_LEAVE_RECEIVED_EVENT, payloadEventRoomLeave, metaPuppetId)();
exports.ROOM_TOPIC_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.ROOM_TOPIC_RECEIVED_EVENT, payloadEventRoomTopic, metaPuppetId)();
exports.SCAN_RECEIVED_EVENT = (0, typesafe_actions_1.createAction)(types.SCAN_RECEIVED_EVENT, payloadEventScan, metaPuppetId)();
/**
 * Commands
 *
 * Wechaty Redux provide the minimum commands for the system state management:
 *  1. ding: request the `dong` event
 *  2. reset: reset the Wechaty state
 *
 * For more commands, please refer to the Wechaty CQRS:
 *  @link https://github.com/wechaty/cqrs
 */
const payloadData = (_puppetId, data) => ({ data });
exports.DING_COMMAND = (0, typesafe_actions_1.createAction)(types.DING_COMMAND, payloadData, metaPuppetId)();
exports.RESET_COMMAND = (0, typesafe_actions_1.createAction)(types.RESET_COMMAND, payloadData, metaPuppetId)();
/**
 * @private Bug compatible & workaround for Ducks API
 *  https://github.com/huan/ducks/issues/2
 */
exports.NOP_COMMAND = (0, typesafe_actions_1.createAction)(types.NOP_COMMAND)();
//# sourceMappingURL=actions.js.map