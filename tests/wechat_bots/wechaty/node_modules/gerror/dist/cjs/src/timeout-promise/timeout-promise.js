"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeoutPromise = void 0;
const timeout_promise_gerror_js_1 = require("./timeout-promise-gerror.js");
/**
 * @see https://github.com/huan/gerror
 *
 * How to add timeout to a Promise in Javascript
 *  A reusable script to add timeout functionality to any async operation
 *  @see https://advancedweb.hu/how-to-add-timeout-to-a-promise-in-javascript/
 */
const timeoutPromise = (future, milliseconds, exceptionFactory) => {
    let timer;
    const timeoutFuture = new Promise((resolve, reject) => {
        void resolve; // timeout will never resolve
        timer = setTimeout(() => {
            let e;
            if (exceptionFactory) {
                e = exceptionFactory();
            }
            else {
                e = timeout_promise_gerror_js_1.TimeoutPromiseGError.from('Timeout after ' + milliseconds + ' ms');
            }
            reject(e);
        }, milliseconds);
    });
    /**
     * https://www.sung.codes/blog/2019/promise-race-vs-promise-any-and-promise-all-vs-promise-allsettled
     */
    return Promise.race([
        future,
        timeoutFuture,
    ]).finally(() => clearTimeout(timer));
};
exports.timeoutPromise = timeoutPromise;
//# sourceMappingURL=timeout-promise.js.map