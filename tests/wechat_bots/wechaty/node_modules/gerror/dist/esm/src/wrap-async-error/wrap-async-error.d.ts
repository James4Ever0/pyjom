/**
 * Wrap promise in sync way (catch error by emitting it)
 *  1. convert a async callback function to be sync function
 *    by catcing any errors and emit them to error event
 *  2. wrap a Promise by catcing any errors and emit them to error event
 */
interface WrapAsync {
    (promise: Promise<any>): void;
    <T extends (...args: any[]) => Promise<any>>(asyncFunction: T): (...args: Parameters<T>) => void;
}
declare type WrapAsyncErrorCallback = (error: any) => void;
declare type WrapAsyncError = (onError: WrapAsyncErrorCallback) => WrapAsync;
declare const wrapAsyncError: WrapAsyncError;
export type { WrapAsync, WrapAsyncErrorCallback, };
export { wrapAsyncError, };
//# sourceMappingURL=wrap-async-error.d.ts.map