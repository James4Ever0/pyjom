/**
 * See:
 *  - https://cloud.google.com/apis/design/errors
 *
 * gRPC Status:
 *
 * The `Status` type defines a logical error model that is suitable for
 * different programming environments, including REST APIs and RPC APIs. It is
 * used by [gRPC](https://github.com/grpc). Each `Status` message contains
 * three pieces of data: error code, error message, and error details.
 * You can find out more about this error model and how to work with it in the
 * [API Design Guide](https://cloud.google.com/apis/design/errors).
 *
 * message Status {
 *   // The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
 *   // See: https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
 *
 *   int32 code = 1;
 *
 *   // A developer-facing error message, which should be in English. Any
 *   // user-facing error message should be localized and sent in the
 *   // [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
 *
 *   string message = 2;
 *
 *   // A list of messages that carry the error details.  There is a common set of
 *   // message types for APIs to use.
 *
 *   repeated google.protobuf.Any details = 3;
 * }
 */
/**
 * Credit: https://github.com/grpc/grpc-node/blob/master/packages/grpc-js/src/constants.ts
 *
 * Huan(202110): it seems that the order of the below enum Code is exactly follow the Protobuf enum:
 *  See: https://github.com/googleapis/googleapis/blob/master/google/rpc/code.protodeclare
 */
var Code;
(function (Code) {
    Code[Code["OK"] = 0] = "OK";
    Code[Code["CANCELLED"] = 1] = "CANCELLED";
    Code[Code["UNKNOWN"] = 2] = "UNKNOWN";
    Code[Code["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
    Code[Code["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
    Code[Code["NOT_FOUND"] = 5] = "NOT_FOUND";
    Code[Code["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
    Code[Code["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
    Code[Code["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
    Code[Code["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
    Code[Code["ABORTED"] = 10] = "ABORTED";
    Code[Code["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
    Code[Code["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
    Code[Code["INTERNAL"] = 13] = "INTERNAL";
    Code[Code["UNAVAILABLE"] = 14] = "UNAVAILABLE";
    Code[Code["DATA_LOSS"] = 15] = "DATA_LOSS";
    Code[Code["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
})(Code || (Code = {}));
const isGrpcStatus = (payload) => payload instanceof Object
    && typeof payload.code === 'number'
    // && typeof payload.message === 'string' // optional, message might be `undefined` in `@grpc/grpc-js`
    && ['undefined', 'string'].includes(typeof payload.details);
export { isGrpcStatus, Code, };
//# sourceMappingURL=grpc.js.map