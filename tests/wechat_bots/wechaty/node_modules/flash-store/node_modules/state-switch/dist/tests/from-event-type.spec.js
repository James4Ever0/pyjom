#!/usr/bin/env ts-node
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { test } from 'tstest';
import { expectType, expectAssignable, } from 'tsd';
import { fromEvent, firstValueFrom, } from 'rxjs';
import { StateSwitch } from '../src/state-switch';
test('StateSwitch satisfy DOM EventTarget: HasEventTargetAddRemove', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const state = new StateSwitch();
    expectAssignable(state);
    t.pass('expectAssignable match listener argument typings');
}));
test('RxJS: fromEvent type inference', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const state = new StateSwitch();
    const event$ = fromEvent(state, 'on');
    expectType(event$);
    const future = firstValueFrom(event$);
    state.on('pending');
    const result = yield future;
    expectType(result);
}));
test('RxJS: fromEvent stream for the second value', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const state = new StateSwitch();
    const event$ = fromEvent(state, 'off');
    state.off('pending');
    const future = firstValueFrom(event$);
    state.off(true);
    const result = yield future;
    t.equal(result, true, 'should get "true" result');
}));
//# sourceMappingURL=from-event-type.spec.js.map