// const jsdom = require("jsdom");
// const { JSDOM } = jsdom;
// doc = new jsdom.JSDOM(``, {
//     url: "https://www.baidu.com"
// });

document=`<html><body><div><div class="RichText ztext Post-RichText css-yvdm7v" options="[object Object]"><p data-first-child data-pid="sE25-Z0X">"怎样的数据是有价值的？"</p><p data-pid="h7XBtzTu">在爬虫的世界里，爬虫策略是为爬虫"注入灵魂”的关键要素。</p><p data-pid="QRDX0Twp">一个有效的爬虫策略能够以更低的代价抓取到更多有价值的信息。</p><p data-pid="SIecToil">让我们来假设一个需求：<b>如何从垃圾论文出发，通过论文之间的引用关系找到该领域下的最具价值的文献？</b>下图展示了一个由论文引用关系构成的引文网络，图中节点代表文献，连接代表引用关系，节点直径为该文献的影响力。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-8e7e322726c0eac81e8d994b72723422_b.jpg" data-size="normal" data-rawwidth="502" data-rawheight="622" class="origin_image zh-lightbox-thumb" data-original="https://pic3.zhimg.com/v2-8e7e322726c0eac81e8d994b72723422_r.jpg"></noscript><img src="" data-size="normal" data-rawwidth="502" data-rawheight="622" class="origin_image zh-lightbox-thumb lazy" data-original="https://pic3.zhimg.com/v2-8e7e322726c0eac81e8d994b72723422_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-8e7e322726c0eac81e8d994b72723422_b.jpg"><figcaption>引文网络可视化</figcaption></figure><p data-pid="sT4Vn2rr">事实上，类似上面这样的需求其实并不少见，例如从某个新冠感染者出发，找到该患者近期接触人群的关系网络；从某个犯罪分子的银行账户出发，找到该罪犯的资金网络，以便于打击相关非法团伙……</p><h2>图搜索技术</h2><p data-pid="oXDhtJwz">图搜索是解决上述问题最直观的办法，可以分为盲目搜索和启发式搜索两个流派，但无论是哪一种流派的搜索步骤都可以被归纳为以下模板：</p><ol><li data-pid="eZ7AnN4j"><b>初始化一个图，并准备一个OPEN表和一个CLOSE表</b>。OPEN表用于存放待扩展的节点，CLOSE表用于存放已扩展的节点。</li><li data-pid="W00Mn3RF"><b>从OPEN表中选择一个节点并扩展该节点</b>。扩展节点指的是将该节点的邻居、该节点与邻居之间的连边加入图。</li><li data-pid="FDY1HkDg"><b>将未曾在OPEN表和CLOSE表中出现的邻居加入OPEN表</b>。</li><li data-pid="Xrdesn2U">若未达到结束条件，则返回步骤2。</li></ol><h2>BFS</h2><p data-pid="IxmrHFX7">宽度优先搜索（BFS）属于盲目搜索流派，思路很简单，即从起点出发<b>逐层深入网络。</b>用<b>队列</b>实现图搜索模板中的OPEN表即可实现，话不多说，看图！</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-53710ba86858bc29e19b4bec2b8f694d_b.jpg" data-caption="" data-size="normal" data-rawwidth="630" data-rawheight="426" class="origin_image zh-lightbox-thumb" data-original="https://pic2.zhimg.com/v2-53710ba86858bc29e19b4bec2b8f694d_r.jpg"></noscript><img src="" data-caption="" data-size="normal" data-rawwidth="630" data-rawheight="426" class="origin_image zh-lightbox-thumb lazy" data-original="https://pic2.zhimg.com/v2-53710ba86858bc29e19b4bec2b8f694d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-53710ba86858bc29e19b4bec2b8f694d_b.jpg"></figure><p data-pid="DHfd6H_W">但是BFS的缺点也很明显：<b>搜索得到的网络过大，有价值的信息密度低</b>。</p><h2>DFS</h2><p data-pid="-tB1pPzz"><b>深度优先搜索</b>（DFS）也是盲目搜索的常见形式，该算法的特点是<b>不撞南墙不回头</b>，通常用<b>递归</b>来实现，看图！</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-a8afac2a266f8e5035125f97392cfcde_b.jpg" data-caption="" data-size="normal" data-rawwidth="642" data-rawheight="428" class="origin_image zh-lightbox-thumb" data-original="https://pic3.zhimg.com/v2-a8afac2a266f8e5035125f97392cfcde_r.jpg"></noscript><img src="" data-caption="" data-size="normal" data-rawwidth="642" data-rawheight="428" class="origin_image zh-lightbox-thumb lazy" data-original="https://pic3.zhimg.com/v2-a8afac2a266f8e5035125f97392cfcde_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-a8afac2a266f8e5035125f97392cfcde_b.jpg"></figure><p data-pid="ymZsri1A">但是DFS的缺点也很明显：<b>容易将爬虫误导到网络深处，就再也回不来了。。。</b></p><h2>PFS</h2><p data-pid="T972_Z_N">优先级优先搜索（PFS）属于启发式搜索流派，该算法的特点是<b>为OPEN表中的节点赋予优先级</b>，扩展操作将选择最高优先级的节点。这使得启发式搜索无需遍历整个网络，进而能够选择一条更快到达目标的路径。</p><p data-pid="0YsXSqfb">至于优先级如何定义和计算，要细分起来可就是五花八门了。。。</p><p data-pid="J7dxoybn">这里介绍一种A*算法，在该算法中，我们用一个<b>估价函数f(n)</b>来估计某个节点<code>n</code>到达目标节点的代价，并<b>比较各节点的估价函数来选择下一个进入的搜索状态</b>，一般来说算法优先选取代价较小的节点进行扩展，<code>f(n)</code>通常表示为：</p><p data-pid="LSMDzIDW">其中，<code>g(n)</code>表示从起始节点到当前节点<code>n</code>的<b>实际代价</b>，<code>h(n)</code>表示当前节点<code>n</code>到目标节点的<b>估计代价</b>。在实际的应用中，通常使用<b>搜索深度</b>来表示实际代价<code>g(n)</code>，而<code>h(n)</code>则没有固定套路，但需要满足以下条件，否则A*算法将失效：</p><blockquote data-pid="NazO4xZb">h(n) ≤ 当前节点<code>n</code>到目标节点的实际代价d(n)</blockquote><p data-pid="dBB62CGg">此外，当<code>h(n)</code>越接近<code>d(n)</code>时，算法的效果越好。</p><h2>OPIC</h2><p data-pid="H5zVO-b2">在线页面重要性计算（Online Page Importance Computation，简称OPIC）属于启发式搜索流派，该算法的思想是为所有节点分配一个固定权重，并优先扩展高权重节点。当某个节点被扩展时，该节点的权重就被平均分配给邻居节点，正如下图所示：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-9bcdd666009269a001ef496a0edff07b_b.jpg" data-caption="" data-size="normal" data-rawwidth="302" data-rawheight="387" class="content_image"></noscript><img src="" data-caption="" data-size="normal" data-rawwidth="302" data-rawheight="387" class="content_image lazy" data-actualsrc="https://pic4.zhimg.com/v2-9bcdd666009269a001ef496a0edff07b_b.jpg"></figure><h2>Poison</h2><p data-pid="hXPR0cmT">Poison策略来源于污点分析技术，该类算法的最初被用于追踪犯罪分子的资产流向，这里也给归类成启发式搜索策略。正如下图所示，某个时刻出现了一个犯罪分子（最左侧黑色节点），那么该节点的所有后续输出节点都会被标记成涉案节点，并优先扩展其邻居信息。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-23d4acd8f2b830222ead80e75873469f_b.jpg" data-caption="" data-size="normal" data-rawwidth="464" data-rawheight="386" class="origin_image zh-lightbox-thumb" data-original="https://pic4.zhimg.com/v2-23d4acd8f2b830222ead80e75873469f_r.jpg"></noscript><img src="" data-caption="" data-size="normal" data-rawwidth="464" data-rawheight="386" class="origin_image zh-lightbox-thumb lazy" data-original="https://pic4.zhimg.com/v2-23d4acd8f2b830222ead80e75873469f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-23d4acd8f2b830222ead80e75873469f_b.jpg"></figure><h2>Haircut</h2><p data-pid="MJCTU5r4">Poison策略也是一种污点分析技术，可被分类为启发式搜索策略。与Poison的"一棒子打死"方案不同，Haircut策根据连边权重的不同来划分权重传播的比例。正如下图所示，犯罪分子账户节点的赃款输入使其权重为3，那么该节点在扩展时，输出节点则根据连边权重比例获得权重。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-680957db78bf2f294d3a8f664ad5008c_b.jpg" data-caption="" data-size="normal" data-rawwidth="412" data-rawheight="410" class="content_image"></noscript><img src="" data-caption="" data-size="normal" data-rawwidth="412" data-rawheight="410" class="content_image lazy" data-actualsrc="https://pic1.zhimg.com/v2-680957db78bf2f294d3a8f664ad5008c_b.jpg"></figure><p data-pid="d-bYo-5w"><b>以上就是本文的所有内容啦~</b></p><p data-pid="0eF8kKs0"><b>图算法与网络爬虫系列文章</b>：</p><ol><li data-pid="ze6xdeAQ"><a href="https://zhuanlan.zhihu.com/p/383798669" class="internal">图算法与网络爬虫：反爬虫和反反爬虫</a></li><li data-pid="BmAO7AE_"><a href="https://zhuanlan.zhihu.com/p/384614837" class="internal">图算法与网络爬虫：图搜索与启发式搜索</a></li></ol></div></div></body></html>`

const { Readability } = require('@mozilla/readability');
let reader = new Readability(document);
let article = reader.parse();
console.log(article.title);