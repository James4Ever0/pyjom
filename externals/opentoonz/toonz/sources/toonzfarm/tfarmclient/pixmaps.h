#pragma once

static unsigned long casm_computing_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffa9a9a9, 0xff707070,
    0xff707070, 0xff707070, 0xff636363, 0xff383838, 0xff383838, 0xff383838,
    0xff1c1c1c, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff8c8c8c,
    0xffe1e1e1, 0xffa9a9a9, 0xff100c00, 0xff705400, 0xff806000, 0xff806000,
    0xff806000, 0xffbf9000, 0xffbf9000, 0xffbf9000, 0xffcf9c00, 0xffffc000,
    0xffffc000, 0xffffc000, 0xff403000, 0xffa9a9a9, 0xffe1e1e1, 0xff8c8c8c,
    0xff503c00, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000,
    0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000,
    0xff403000, 0xffa9a9a9, 0xffe1e1e1, 0xff707070, 0xff806000, 0xffffc000,
    0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000,
    0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xff100c00, 0xffc5c5c5,
    0xffe1e1e1, 0xff707070, 0xff806000, 0xffffc000, 0xffffc000, 0xffffc000,
    0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000,
    0xffffc000, 0xffffc000, 0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff707070,
    0xff806000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000,
    0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000, 0xffffc000,
    0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff636363, 0xff604800, 0xffbf9000,
    0xffbf9000, 0xffbf9000, 0xffbf9000, 0xff8f6c00, 0xff806000, 0xff806000,
    0xff806000, 0xff806000, 0xff806000, 0xff705400, 0xff1c1c1c, 0xffe1e1e1,
    0xffe1e1e1, 0xff383838, 0xff606060, 0xffbfbfbf, 0xffbfbfbf, 0xff303030,
    0xff000000, 0xffdfdfdf, 0xffefefef, 0xff101010, 0xff404040, 0xffffffff,
    0xffffffff, 0xff8f8f8f, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff383838,
    0xff9f9f9f, 0xffffffff, 0xffdfdfdf, 0xff000000, 0xff404040, 0xffbfbfbf,
    0xff606060, 0xff000000, 0xff808080, 0xffbfbfbf, 0xffbfbfbf, 0xff8f8f8f,
    0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff9a9a9a, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff555555, 0xff1c1c1c, 0xff000000,
    0xff4c4c4c, 0xff808080, 0xffbfbfbf, 0xffbfbfbf, 0xff383838, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffb7b7b7, 0xff707070,
    0xff3b3b3b, 0xff7c7c7c, 0xff9e9e9e, 0xff000000, 0xff101010, 0xffcfcfcf,
    0xffbfbfbf, 0xff606060, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xff636363, 0xff6c6c6c, 0xff9e9e9e, 0xff404040, 0xff000000, 0xff9f9f9f,
    0xffcfcfcf, 0xff404040, 0xff000000, 0xff000000, 0xff1c1c1c, 0xff636363,
    0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xff0e0e0e, 0xffbfbfbf,
    0xffdfdfdf, 0xff8f8f8f, 0xff000000, 0xff000000, 0xff1c1c1c, 0xff555555,
    0xff8c8c8c, 0xffc5c5c5, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xff707070, 0xff000000, 0xff0e0e0e, 0xff474747,
    0xff7e7e7e, 0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P casm_computing(16, 16, 16, (TPixel32 *)casm_computing_buffer);

static unsigned long casm_done_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffd3d3d3, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffa9a9a9, 0xff7e7e7e,
    0xff707070, 0xff707070, 0xff707070, 0xff383838, 0xff383838, 0xff383838,
    0xff2a2a2a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff8c8c8c,
    0xffe1e1e1, 0xffa9a9a9, 0xff000e00, 0xff005400, 0xff007100, 0xff007100,
    0xff007100, 0xff009b00, 0xff00a900, 0xff00a900, 0xff00a900, 0xff00e100,
    0xff00e100, 0xff00e100, 0xff003800, 0xffa9a9a9, 0xffe1e1e1, 0xff8c8c8c,
    0xff003800, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100,
    0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100,
    0xff003800, 0xffa9a9a9, 0xffe1e1e1, 0xff707070, 0xff007100, 0xff00e100,
    0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100,
    0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff000e00, 0xffc5c5c5,
    0xffe1e1e1, 0xff707070, 0xff007100, 0xff00e100, 0xff00e100, 0xff00e100,
    0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100,
    0xff00e100, 0xff00e100, 0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff707070,
    0xff007100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100,
    0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100, 0xff00e100,
    0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff636363, 0xff005400, 0xff00a900,
    0xff00a900, 0xff00a900, 0xff00a900, 0xff00a900, 0xff007100, 0xff007100,
    0xff007100, 0xff007100, 0xff007100, 0xff006200, 0xff1c1c1c, 0xffe1e1e1,
    0xffe1e1e1, 0xff383838, 0xff606060, 0xffbfbfbf, 0xffbfbfbf, 0xff303030,
    0xff000000, 0xffbfbfbf, 0xffdfdfdf, 0xff101010, 0xff404040, 0xffffffff,
    0xffffffff, 0xff8f8f8f, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff383838,
    0xff9f9f9f, 0xffffffff, 0xffdfdfdf, 0xff000000, 0xff505050, 0xffbfbfbf,
    0xff707070, 0xff000000, 0xff707070, 0xffbfbfbf, 0xffbfbfbf, 0xff8f8f8f,
    0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff9a9a9a, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff636363, 0xff1c1c1c, 0xff000000,
    0xff4c4c4c, 0xff7e7e7e, 0xffbfbfbf, 0xffbfbfbf, 0xff383838, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffb7b7b7, 0xff707070,
    0xff3b3b3b, 0xff7c7c7c, 0xff9c9c9c, 0xff000000, 0xff303030, 0xffdfdfdf,
    0xffcfcfcf, 0xff606060, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xff7e7e7e, 0xff5c5c5c, 0xff9e9e9e, 0xff404040, 0xff000000, 0xff9f9f9f,
    0xffcfcfcf, 0xff404040, 0xff000000, 0xff000000, 0xff1c1c1c, 0xff555555,
    0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xff0e0e0e, 0xffbfbfbf,
    0xffdfdfdf, 0xff8f8f8f, 0xff000000, 0xff000000, 0xff0e0e0e, 0xff555555,
    0xff8c8c8c, 0xffc5c5c5, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xff707070, 0xff000000, 0xff0e0e0e, 0xff474747,
    0xff7e7e7e, 0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P casm_done(16, 16, 16, (TPixel32 *)casm_done_buffer);

static unsigned long casm_done_with_errors_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffc5c5c5, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffa9a9a9, 0xff707070,
    0xff707070, 0xff707070, 0xff636363, 0xff383838, 0xff383838, 0xff383838,
    0xff2a2a2a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff8c8c8c,
    0xffe1e1e1, 0xffa9a9a9, 0xff100e00, 0xff706500, 0xff807300, 0xff807300,
    0xff807300, 0xffaf9e00, 0xffbfad00, 0xffbfad00, 0xffbfad00, 0xffffe600,
    0xffffe600, 0xffffe600, 0xff403a00, 0xffa9a9a9, 0xffe1e1e1, 0xff8c8c8c,
    0xff403a00, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600,
    0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600,
    0xff403a00, 0xffa9a9a9, 0xffe1e1e1, 0xff707070, 0xff807300, 0xffffe600,
    0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600,
    0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xff100e00, 0xffc5c5c5,
    0xffe1e1e1, 0xff707070, 0xff807300, 0xffffe600, 0xffffe600, 0xffffe600,
    0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600,
    0xffffe600, 0xffffe600, 0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff707070,
    0xff807300, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600,
    0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600, 0xffffe600,
    0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff636363, 0xff605600, 0xffbfad00,
    0xffbfad00, 0xffbfad00, 0xffbfad00, 0xff9f9000, 0xff807300, 0xff807300,
    0xff807300, 0xff807300, 0xff807300, 0xff706500, 0xff1c1c1c, 0xffe1e1e1,
    0xffe1e1e1, 0xff383838, 0xff606060, 0xffbfbfbf, 0xffbfbfbf, 0xff303030,
    0xff000000, 0xffcfcfcf, 0xffefefef, 0xff101010, 0xff404040, 0xffffffff,
    0xffffffff, 0xff8f8f8f, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff383838,
    0xff9f9f9f, 0xffffffff, 0xffdfdfdf, 0xff000000, 0xff404040, 0xffbfbfbf,
    0xff707070, 0xff000000, 0xff808080, 0xffbfbfbf, 0xffbfbfbf, 0xff8f8f8f,
    0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff9a9a9a, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff636363, 0xff1c1c1c, 0xff000000,
    0xff4c4c4c, 0xff7e7e7e, 0xffbfbfbf, 0xffbfbfbf, 0xff383838, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffb7b7b7, 0xff707070,
    0xff3b3b3b, 0xff7c7c7c, 0xff9c9c9c, 0xff000000, 0xff202020, 0xffdfdfdf,
    0xffbfbfbf, 0xff606060, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xff636363, 0xff6c6c6c, 0xff9e9e9e, 0xff404040, 0xff000000, 0xff9f9f9f,
    0xffcfcfcf, 0xff404040, 0xff000000, 0xff000000, 0xff1c1c1c, 0xff555555,
    0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xff0e0e0e, 0xffbfbfbf,
    0xffdfdfdf, 0xff8f8f8f, 0xff000000, 0xff000000, 0xff0e0e0e, 0xff555555,
    0xff8c8c8c, 0xffc5c5c5, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xff707070, 0xff000000, 0xff0e0e0e, 0xff474747,
    0xff7e7e7e, 0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P casm_done_with_errors(16, 16, 16,
                                 (TPixel32 *)casm_done_with_errors_buffer);

static unsigned long casm_suspended_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffa9a9a9, 0xff8c8c8c,
    0xff707070, 0xff707070, 0xff707070, 0xff474747, 0xff383838, 0xff383838,
    0xff383838, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff8c8c8c,
    0xffe1e1e1, 0xffa9a9a9, 0xff0a0a0a, 0xff303030, 0xff4d4d4d, 0xff4d4d4d,
    0xff4d4d4d, 0xff606060, 0xff747474, 0xff747474, 0xff747474, 0xff909090,
    0xff9a9a9a, 0xff9a9a9a, 0xff272727, 0xffa9a9a9, 0xffe1e1e1, 0xff9a9a9a,
    0xff272727, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a,
    0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a,
    0xff272727, 0xffa9a9a9, 0xffe1e1e1, 0xff707070, 0xff4d4d4d, 0xff9a9a9a,
    0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a,
    0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff0a0a0a, 0xffc5c5c5,
    0xffe1e1e1, 0xff707070, 0xff4d4d4d, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a,
    0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a,
    0xff9a9a9a, 0xff9a9a9a, 0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff707070,
    0xff4d4d4d, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a,
    0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a, 0xff9a9a9a,
    0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff636363, 0xff3a3a3a, 0xff747474,
    0xff747474, 0xff747474, 0xff747474, 0xff747474, 0xff606060, 0xff4d4d4d,
    0xff4d4d4d, 0xff4d4d4d, 0xff4d4d4d, 0xff434343, 0xff1c1c1c, 0xffe1e1e1,
    0xffe1e1e1, 0xff383838, 0xff606060, 0xffbfbfbf, 0xffbfbfbf, 0xff303030,
    0xff000000, 0xffbfbfbf, 0xffbfbfbf, 0xff202020, 0xff404040, 0xffffffff,
    0xffffffff, 0xff8f8f8f, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff383838,
    0xff9f9f9f, 0xffffffff, 0xffdfdfdf, 0xff000000, 0xff707070, 0xffbfbfbf,
    0xff707070, 0xff000000, 0xff707070, 0xffbfbfbf, 0xffbfbfbf, 0xff8f8f8f,
    0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff9a9a9a, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff636363, 0xff1c1c1c, 0xff000000,
    0xff3e3e3e, 0xff7e7e7e, 0xffafafaf, 0xffbfbfbf, 0xff383838, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffb7b7b7, 0xff7e7e7e,
    0xff3b3b3b, 0xff6e6e6e, 0xff9c9c9c, 0xff000000, 0xff303030, 0xffefefef,
    0xffcfcfcf, 0xff606060, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xff7e7e7e, 0xff6a6a6a, 0xff9e9e9e, 0xff404040, 0xff000000, 0xff9f9f9f,
    0xffcfcfcf, 0xff404040, 0xff000000, 0xff000000, 0xff1c1c1c, 0xff555555,
    0xffa9a9a9, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xff0e0e0e, 0xffbfbfbf,
    0xffdfdfdf, 0xff8f8f8f, 0xff000000, 0xff000000, 0xff0e0e0e, 0xff474747,
    0xff8c8c8c, 0xffc5c5c5, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xff707070, 0xff000000, 0xff000000, 0xff474747,
    0xff7e7e7e, 0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P casm_suspended(16, 16, 16, (TPixel32 *)casm_suspended_buffer);

static unsigned long casm_waiting_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xff9a9a9a, 0xff707070,
    0xff707070, 0xff707070, 0xff555555, 0xff383838, 0xff383838, 0xff383838,
    0xff0e0e0e, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff8c8c8c,
    0xffe1e1e1, 0xffa9a9a9, 0xff0f0000, 0xff760000, 0xff760000, 0xff760000,
    0xff840000, 0xffb00000, 0xffb00000, 0xffb00000, 0xffce0000, 0xffeb0000,
    0xffeb0000, 0xffeb0000, 0xff3b0000, 0xffa9a9a9, 0xffe1e1e1, 0xff8c8c8c,
    0xff490000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000,
    0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000,
    0xff3b0000, 0xffa9a9a9, 0xffe1e1e1, 0xff707070, 0xff760000, 0xffeb0000,
    0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000,
    0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xff0f0000, 0xffc5c5c5,
    0xffe1e1e1, 0xff707070, 0xff760000, 0xffeb0000, 0xffeb0000, 0xffeb0000,
    0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000,
    0xffeb0000, 0xffeb0000, 0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff707070,
    0xff760000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000,
    0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000, 0xffeb0000,
    0xff000000, 0xffe1e1e1, 0xffe1e1e1, 0xff636363, 0xff580000, 0xffb00000,
    0xffb00000, 0xffb00000, 0xffa20000, 0xff760000, 0xff760000, 0xff760000,
    0xff760000, 0xff760000, 0xff760000, 0xff670000, 0xff1c1c1c, 0xffe1e1e1,
    0xffe1e1e1, 0xff383838, 0xff606060, 0xffbfbfbf, 0xffbfbfbf, 0xff303030,
    0xff000000, 0xffffffff, 0xffefefef, 0xff101010, 0xff404040, 0xffffffff,
    0xffffffff, 0xff8f8f8f, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff383838,
    0xff9f9f9f, 0xffffffff, 0xffcfcfcf, 0xff000000, 0xff404040, 0xffbfbfbf,
    0xff606060, 0xff000000, 0xff808080, 0xffbfbfbf, 0xffbfbfbf, 0xff8f8f8f,
    0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xff9a9a9a, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff555555, 0xff1c1c1c, 0xff000000,
    0xff3c3c3c, 0xff808080, 0xffbfbfbf, 0xffbfbfbf, 0xff383838, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffa9a9a9, 0xff636363,
    0xff3b3b3b, 0xff8a8a8a, 0xffadadad, 0xff000000, 0xff101010, 0xffcfcfcf,
    0xffbfbfbf, 0xff606060, 0xff383838, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xff636363, 0xff6c6c6c, 0xff9e9e9e, 0xff404040, 0xff000000, 0xff9f9f9f,
    0xffcfcfcf, 0xff505050, 0xff000000, 0xff000000, 0xff2a2a2a, 0xff636363,
    0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xff0e0e0e, 0xffbfbfbf,
    0xffdfdfdf, 0xff808080, 0xff000000, 0xff000000, 0xff1c1c1c, 0xff555555,
    0xff8c8c8c, 0xffc5c5c5, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xff707070, 0xff000000, 0xff0e0e0e, 0xff474747,
    0xff7e7e7e, 0xffb7b7b7, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P casm_waiting(16, 16, 16, (TPixel32 *)casm_waiting_buffer);

static unsigned long computing_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe3e2df,
    0xffe4e3de, 0xffe2e2e0, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe5e3dd, 0xffe9e5d9, 0xffeae5d8, 0xffe8e5da,
    0xffe3e2df, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe2e2e0,
    0xffeae6d8, 0xffeee7d4, 0xffefe8d3, 0xffede7d5, 0xffe8e4da, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe5e3dd, 0xffede7d5, 0xfff2ead0,
    0xfff3eacf, 0xfff1e9d1, 0xffebe6d7, 0xffe3e2df, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffa9a9a9, 0xff707070, 0xff707070,
    0xff707070, 0xff8c7e54, 0xffa88d38, 0xffd9b33f, 0xffe7c96b, 0xffdec474,
    0xffcebc84, 0xffb2aea0, 0xffa9a9a9, 0xffa9a9a9, 0xffb7b7b7, 0xffe1e1e1,
    0xffe1e1e1, 0xff707070, 0xffa9a9a9, 0xffc9c9c9, 0xffcfcfcf, 0xffc9bc93,
    0xffd9c279, 0xfff3d017, 0xfffad409, 0xffe1b820, 0xffbc9e42, 0xffb0a78e,
    0xffa4a4a4, 0xff848484, 0xff585858, 0xffe1e1e1, 0xffe1e1e1, 0xff707070,
    0xffb9b9b9, 0xffffffff, 0xffffffff, 0xffe3dcc5, 0xffe7ce5a, 0xffffd800,
    0xffffda00, 0xfffed808, 0xffdcca96, 0xffffffff, 0xffffffff, 0xffd4d4d4,
    0xff626262, 0xffe1e1e1, 0xffe1e1e1, 0xff707070, 0xffb9b9b9, 0xffffffff,
    0xffffffff, 0xffdfd7bf, 0xffe5ce6d, 0xffffd800, 0xffffd900, 0xfffbd910,
    0xffdcca96, 0xffffffff, 0xffffffff, 0xffcfcfcf, 0xff585858, 0xffe1e1e1,
    0xffe1e1e1, 0xff707070, 0xffa9a9a9, 0xffbfbfbf, 0xffc9c9c9, 0xffc1b591,
    0xffd6c07c, 0xfff0d542, 0xfff7db1d, 0xffe2c65f, 0xffd0bd82, 0xffc7c3b7,
    0xffc9c9c9, 0xffa9a9a9, 0xff707070, 0xffe1e1e1, 0xffe1e1e1, 0xffb7b7b7,
    0xff707070, 0xff707070, 0xff707070, 0xff82795e, 0xffa2893e, 0xffb4922c,
    0xffb99527, 0xffaf9031, 0xff9b8645, 0xff787468, 0xff707070, 0xff707070,
    0xffa9a9a9, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe3e2df, 0xffebe6d7, 0xffefe8d3, 0xfff0e9d2, 0xffeee8d4,
    0xffeae5d8, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe7e4db, 0xffeae6d8, 0xffebe6d7, 0xffeae5d8, 0xffe4e3de, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe2e1e0, 0xffe5e3dd,
    0xffe7e4db, 0xffe4e3de, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P computing(16, 16, 16, (TPixel32 *)computing_buffer);

static unsigned long done_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffdfe2df, 0xffdee3de, 0xffe0e2e0,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffdde4dd, 0xffd9e7d9, 0xffd8e8d8, 0xffdae7da, 0xffdfe2df, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe0e2e0, 0xffd8e8d8, 0xffd4ebd4,
    0xffd3ecd3, 0xffd5ead5, 0xffd9e7d9, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffdde4dd, 0xffd5ead5, 0xffd0eed0, 0xffceefce, 0xffd0eed0,
    0xffd4ebd4, 0xffdee3de, 0xffe1e1e1, 0xffa9a9a9, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff8c8c8c, 0xffa9a9a9, 0xff94b994,
    0xff7eca7e, 0xff6fd56f, 0xff69da69, 0xff6ed76e, 0xff8ed68e, 0xffdbe6db,
    0xffe1e1e1, 0xff707070, 0xffa9a9a9, 0xffc9c9c9, 0xffcfcfcf, 0xffaeaeae,
    0xffa9a9a9, 0xffaaaaaa, 0xffa4a4a4, 0xff5ba35b, 0xff38b538, 0xff15e315,
    0xff08ee08, 0xff17d617, 0xff1e841e, 0xffd7e9d7, 0xffe1e1e1, 0xff707070,
    0xffb9b9b9, 0xffffffff, 0xffffffff, 0xffd4d4d4, 0xffb9b9b9, 0xffffffff,
    0xffffffff, 0xffc5dfc5, 0xff5adc5a, 0xff00f200, 0xff00f400, 0xff05f205,
    0xff1e961e, 0xffd5ebd5, 0xffe1e1e1, 0xff707070, 0xffb9b9b9, 0xffffffff,
    0xffffffff, 0xffcfcfcf, 0xffb9b9b9, 0xffffffff, 0xffffffff, 0xffbfdbbf,
    0xff6dda6d, 0xff00f200, 0xff00f400, 0xff0bf10b, 0xff1c851c, 0xffd5ead5,
    0xffe1e1e1, 0xff707070, 0xffa9a9a9, 0xffbfbfbf, 0xffc9c9c9, 0xffa9a9a9,
    0xffa9a9a9, 0xffbfbfbf, 0xffc9c9c9, 0xff91bc91, 0xff7ccc7c, 0xff41e541,
    0xff1aed1a, 0xff58db58, 0xff2ca42c, 0xffdae7da, 0xffe1e1e1, 0xffb7b7b7,
    0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070,
    0xff707070, 0xff5b805b, 0xff3d973d, 0xff2ca42c, 0xff24aa24, 0xff2ba52b,
    0xff7fc97f, 0xffdde4dd, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffdfe3df,
    0xffd7e9d7, 0xffd3ecd3, 0xffd1edd1, 0xffd3ecd3, 0xffd7e9d7, 0xffe0e2e0,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffdbe5db, 0xffd7e8d7,
    0xffd7e9d7, 0xffd8e8d8, 0xffdde4dd, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe0e1e0, 0xffdde4dd, 0xffdbe5db, 0xffdde4dd,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P done(16, 16, 16, (TPixel32 *)done_buffer);

static unsigned long done_with_errors_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe3e3df, 0xffe4e3de, 0xffe2e2e0,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe5e4dd, 0xffe9e7d9, 0xffeae8d8, 0xffe8e7da, 0xffe3e3df, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe2e2e0, 0xffeae8d8, 0xffeeebd4,
    0xffefecd3, 0xffedebd5, 0xffe9e8d9, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe5e4dd, 0xffedebd5, 0xfff2efd0, 0xfff4f0ce, 0xfff2efd0,
    0xffeeecd4, 0xffe4e3de, 0xffe1e1e1, 0xffa9a9a9, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff8c8c8c, 0xffa9a9a9, 0xffbeba94,
    0xffd4cc7e, 0xffe3d76f, 0xffe9dc69, 0xffe4d96e, 0xffe0d88e, 0xffe7e6db,
    0xffe1e1e1, 0xff707070, 0xffa9a9a9, 0xffc9c9c9, 0xffcfcfcf, 0xffaeaeae,
    0xffa9a9a9, 0xffaaaaaa, 0xffa4a4a4, 0xffada55b, 0xffc6b838, 0xfff9ee0b,
    0xfffef502, 0xffefe011, 0xff92871e, 0xffebe9d7, 0xffe1e1e1, 0xff707070,
    0xffb9b9b9, 0xffffffff, 0xffffffff, 0xffd4d4d4, 0xffb9b9b9, 0xffffffff,
    0xffffffff, 0xffe3e0c5, 0xffebe134, 0xfffff500, 0xfffff700, 0xfffff601,
    0xffa6991e, 0xffedebd5, 0xffe1e1e1, 0xff707070, 0xffb9b9b9, 0xffffffff,
    0xffffffff, 0xffcfcfcf, 0xffb9b9b9, 0xffffffff, 0xffffffff, 0xffdfdcbf,
    0xffe8df4e, 0xfffff500, 0xfffff700, 0xfffef503, 0xff94881c, 0xffedebd5,
    0xffe1e1e1, 0xff707070, 0xffa9a9a9, 0xffbfbfbf, 0xffc9c9c9, 0xffa9a9a9,
    0xffa9a9a9, 0xffbfbfbf, 0xffc9c9c9, 0xffc1bc91, 0xffd6cd7c, 0xfff4eb20,
    0xfffbf20e, 0xffeadf46, 0xffb4a62c, 0xffe8e7da, 0xffe1e1e1, 0xffb7b7b7,
    0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070,
    0xff707070, 0xff827f5e, 0xffa2983e, 0xffb4a72c, 0xffbbac25, 0xffb5a82b,
    0xffd3cb7f, 0xffe5e4dd, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe3e3df,
    0xffebe9d7, 0xffefecd3, 0xfff1eed1, 0xffefecd3, 0xffebe9d7, 0xffe2e2e0,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe7e6db, 0xffebe9d7,
    0xffebe9d7, 0xffeae8d8, 0xffe5e4dd, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe2e1e0, 0xffe5e4dd, 0xffe7e5db, 0xffe5e4dd,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P done_with_errors(16, 16, 16, (TPixel32 *)done_with_errors_buffer);

static unsigned long suspended_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffa9a9a9, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff8c8c8c, 0xffa9a9a9, 0xffa9a9a9,
    0xffa9a9a9, 0xffa9a9a9, 0xffa9a9a9, 0xffa9a9a9, 0xffb7b7b7, 0xffe1e1e1,
    0xffe1e1e1, 0xff707070, 0xffa9a9a9, 0xffbbbbbb, 0xffb8b8b8, 0xffaaaaaa,
    0xffa9a9a9, 0xffa3a3a3, 0xff9b9b9b, 0xff848484, 0xff7f7f7f, 0xff9a9a9a,
    0xff9b9b9b, 0xff848484, 0xff585858, 0xffe1e1e1, 0xffe1e1e1, 0xff707070,
    0xffb5b5b5, 0xffcdcdcd, 0xffcdcdcd, 0xffb8b8b8, 0xffb5b5b5, 0xffcdcdcd,
    0xffcdcdcd, 0xffb8b8b8, 0xffb5b5b5, 0xffcdcdcd, 0xffcdcdcd, 0xffb8b8b8,
    0xff626262, 0xffe1e1e1, 0xffe1e1e1, 0xff707070, 0xffb6b6b6, 0xffcdcdcd,
    0xffcdcdcd, 0xffb8b8b8, 0xffb6b6b6, 0xffcdcdcd, 0xffcdcdcd, 0xffb8b8b8,
    0xffb6b6b6, 0xffcdcdcd, 0xffcdcdcd, 0xffb8b8b8, 0xff585858, 0xffe1e1e1,
    0xffe1e1e1, 0xff707070, 0xffa9a9a9, 0xffb9b9b9, 0xffbdbdbd, 0xffa8a8a8,
    0xffa9a9a9, 0xffb9b9b9, 0xffbdbdbd, 0xffa8a8a8, 0xffa9a9a9, 0xffb9b9b9,
    0xffbdbdbd, 0xffa8a8a8, 0xff707070, 0xffe1e1e1, 0xffe1e1e1, 0xffb7b7b7,
    0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070,
    0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070,
    0xffa9a9a9, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P suspended(16, 16, 16, (TPixel32 *)suspended_buffer);

static unsigned long tasks_icon_buffer[] = {
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffdfdfdf, 0xff303030,
    0xff202020, 0xffcfcfcf, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffefefef, 0xff303030, 0xffb5bfbf,
    0xffc7cfce, 0xff2f3030, 0xff9f9f9f, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xff606060, 0xff929f9f, 0xfff0ffff,
    0xfff5fffe, 0xffe4efeb, 0xff2e302f, 0xff9f9f9f, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xff7f7f7f, 0xff556060, 0xffe8ffff, 0xfff0ffff,
    0xfff5fffe, 0xfff4fffb, 0xffe3efe8, 0xff5b605c, 0xff606060, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffafafaf, 0xff293030, 0xffe1ffff, 0xffd9efef, 0xff5c6060,
    0xff6c706f, 0xfff4fffb, 0xfff3fff8, 0xfff2fff5, 0xff69706a, 0xff505050,
    0xffefefef, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffcfcfcf, 0xff2b3030, 0xffcdefef, 0xffe1ffff, 0xff9fafaf, 0xff6e7070,
    0xff4d504f, 0xfff4fffb, 0xfff3fff8, 0xfff2fff5, 0xfff1fff2, 0xff969f96,
    0xff303030, 0xffefefef, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffefefef,
    0xff2d3030, 0xffaecfcf, 0xffdbffff, 0xffa9bfbf, 0xffe8ffff, 0xffd2dfdf,
    0xffe5efee, 0xfff4fffb, 0xfff3fff8, 0xfff2fff5, 0xfff1fff2, 0xfff0fff0,
    0xffa4afa3, 0xff1f201f, 0xffcfcfcf, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff404040,
    0xff839f9f, 0xffd6ffff, 0xff889f9f, 0xff606060, 0xff667070, 0xfff0ffff,
    0xff999f9f, 0xffe4efeb, 0xfff3fff8, 0xfff2fff5, 0xfff1fff2, 0xfff0fff0,
    0xffefffee, 0xffc1cfbf, 0xff1f201f, 0xffbfbfbf, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff606060, 0xff5b7070,
    0xffd2ffff, 0xffd6ffff, 0xff889f9f, 0xff2e3030, 0xffafbfbf, 0xfff0ffff,
    0xff5c6060, 0xff2e302f, 0xffe3efe8, 0xfff2fff5, 0xfff1fff2, 0xfff0fff0,
    0xffefffee, 0xffeeffec, 0xffdfefdb, 0xff2c302c, 0xffafafaf, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xff9f9f9f, 0xff405050, 0xffcfffff,
    0xffaacfcf, 0xff93afaf, 0xffdbffff, 0xffe1ffff, 0xffe8ffff, 0xfff0ffff,
    0xffa8afaf, 0xff9f9f96, 0xff4e504c, 0xffc4cfc7, 0xfff1fff2, 0xfff0fff0,
    0xffefffee, 0xffeeffec, 0xffeeffea, 0xffa3afa0, 0xff7f7f7f, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffcfcfcf, 0xff263030, 0xffc0efef, 0xffcfffff,
    0xff475050, 0xff707070, 0xffa5bfbf, 0xffe1ffff, 0xffe8ffff, 0xfff0ffff,
    0xffe5efee, 0xff707069, 0xff707069, 0xff3e3e37, 0xffe1efe3, 0xfff0fff0,
    0xffefffee, 0xffeeffec, 0xffd0dfcc, 0xff1f201f, 0xffcfcfcf, 0xffffffff

    ,
    0xffffffff, 0xffdfdfdf, 0xff1d2020, 0xffa6cfcf, 0xffcdffff, 0xffcfffff,
    0xff768f8f, 0xff465050, 0xffdbffff, 0xffe1ffff, 0xffe8ffff, 0xfff0ffff,
    0xfff5fffe, 0xff3d403f, 0xffbf932c, 0xffcfbd8d, 0xff69706a, 0xfff0fff0,
    0xffefffee, 0xffdfefdd, 0xff2d302c, 0xffcfcfcf, 0xffffffff, 0xffffffff

    ,
    0xffefefef, 0xff303030, 0xff99bfbf, 0xffccffff, 0xff5a7070, 0xff829f9f,
    0xffd2ffff, 0xffd6ffff, 0xffdbffff, 0xff475050, 0xffcbdfdf, 0xfff0ffff,
    0xfff5fffe, 0xffc6cfcc, 0xff705409, 0xffffd064, 0xff80775d, 0xffc3cfc3,
    0xffe0efdf, 0xff2d302c, 0xff9f9f9f, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xff8f8f8f, 0xff738f8f, 0xffccffff, 0xffa6cfcf, 0xff606060, 0xff2d3030,
    0xffd2ffff, 0xffd6ffff, 0xffdbffff, 0xffb7cfcf, 0xff1d2020, 0xffb4bfbf,
    0xfff5fffe, 0xfff4fffb, 0xff79807c, 0xffcf9c1d, 0xffffe095, 0xff4d4d43,
    0xff2d302d, 0xff9f9f9f, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xff8f8f8f, 0xff597070, 0xffccffff, 0xffccffff, 0xff738f8f, 0xff9bbfbf,
    0xffd2ffff, 0xffc9efef, 0xffdbffff, 0xffe1ffff, 0xffd9efef, 0xff2d3030,
    0xff898f8e, 0xfff4fffb, 0xffe3efe8, 0xff4e4421, 0xffffc53e, 0xffbfb187,
    0xff303030, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffefefef, 0xff606060, 0xff405050, 0xffbfefef, 0xffcdffff, 0xffcfffff,
    0xffaacfcf, 0xff283030, 0xffb2cfcf, 0xffe1ffff, 0xffe8ffff, 0xffe1efef,
    0xff5c605f, 0xff5b605e, 0xfff3fff8, 0xffb5bfb8, 0xff8f6b0d, 0xffffd472,
    0xff605a46, 0xff9f9f9f, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xff9f9f9f, 0xff293030, 0xffa7cfcf, 0xffcfffff,
    0xffd2ffff, 0xffaecfcf, 0xff293030, 0xff7f8f8f, 0xffe8ffff, 0xfff0ffff,
    0xfff5fffe, 0xffa7afac, 0xfff3fff8, 0xff5b605c, 0xff100c00, 0xffdfa924,
    0xffefd697, 0xff201f1a, 0xffefefef, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffcfcfcf, 0xff303030, 0xff758f8f,
    0xffd2ffff, 0xffd6ffff, 0xffcdefef, 0xff546060, 0xff495050, 0xffe1efef,
    0xfff5fffe, 0xfff4fffb, 0xff5b605d, 0xff606060, 0xffbfbfbf, 0xff403004,
    0xffffc84b, 0xffafa37c, 0xff505050, 0xffffffff, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffefefef, 0xff606060,
    0xff425050, 0xffc9efef, 0xffdbffff, 0xffe1ffff, 0xff909f9f, 0xff979f9f,
    0xfff5fffe, 0xff989f9d, 0xff606060, 0xffffffff, 0xffffffff, 0xff505050,
    0xffaf8313, 0xffffd982, 0xff403c2f, 0xffbfbfbf, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xff9f9f9f, 0xff2b3030, 0xffb2cfcf, 0xffe1ffff, 0xffe8ffff, 0xfff0ffff,
    0xff999f9f, 0xff303030, 0xffffffff, 0xffffffff, 0xffffffff, 0xffefefef,
    0xff201c11, 0xffefb62d, 0xffdfcb94, 0xff302e29, 0xffefefef, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffcfcfcf, 0xff303030, 0xff7f8f8f, 0xffe8ffff, 0xff959f9f,
    0xff303030, 0xffefefef, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xff9f9f9f, 0xff604807, 0xffefc054, 0xff302d25, 0xffafafaf, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffefefef, 0xff707070, 0xff2c3030, 0xff303030,
    0xffefefef, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xff404040, 0xff201c11, 0xff9f9f9f, 0xffffffff, 0xffffffff

    ,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
    0xffffffff, 0xffefefef, 0xffefefef, 0xffffffff, 0xffffffff, 0xffffffff};
TRaster32P tasks_icon(24, 24, 24, (TPixel32 *)tasks_icon_buffer);

static unsigned long waiting_buffer[] = {
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe3dfdf, 0xffe4dede, 0xffe2e0e0, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe4dddd, 0xffe8d9d9,
    0xffe8d8d8, 0xffe7dada, 0xffe2dfdf, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe2e0e0, 0xffe9d8d8, 0xffecd4d4, 0xffecd3d3, 0xffebd5d5,
    0xffe7dada, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe5dddd,
    0xffebd5d5, 0xffefd0d0, 0xfff0cfcf, 0xffeed1d1, 0xffead7d7, 0xffe2dfdf,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffbb9494, 0xff9f3838, 0xffaf2525,
    0xffb32020, 0xffaa2b2b, 0xff984040, 0xff977f7f, 0xffa9a9a9, 0xffa9a9a9,
    0xffa9a9a9, 0xffa9a9a9, 0xffa9a9a9, 0xffa9a9a9, 0xffb7b7b7, 0xffe1e1e1,
    0xffe1e1e1, 0xff8f4b4b, 0xffd27979, 0xfff01b1b, 0xfff60b0b, 0xffe32d2d,
    0xffcc8080, 0xffb69b9b, 0xffa4a4a4, 0xff848484, 0xff7f7f7f, 0xff9f9f9f,
    0xffa4a4a4, 0xff848484, 0xff585858, 0xffe1e1e1, 0xffe1e1e1, 0xff904a4a,
    0xffdf5a5a, 0xfff80000, 0xfff90000, 0xfff50808, 0xffd69696, 0xffffffff,
    0xffffffff, 0xffd4d4d4, 0xffb9b9b9, 0xffffffff, 0xffffffff, 0xffd4d4d4,
    0xff626262, 0xffe1e1e1, 0xffe1e1e1, 0xff904a4a, 0xffde6d6d, 0xfff80000,
    0xfff80000, 0xfff41010, 0xffd69696, 0xffffffff, 0xffffffff, 0xffcfcfcf,
    0xffb9b9b9, 0xffffffff, 0xffffffff, 0xffcfcfcf, 0xff585858, 0xffe1e1e1,
    0xffe1e1e1, 0xff8b5050, 0xffcf7c7c, 0xffe94242, 0xfff11d1d, 0xffda5f5f,
    0xffca8282, 0xffc6b7b7, 0xffc9c9c9, 0xffa9a9a9, 0xffa9a9a9, 0xffbfbfbf,
    0xffc9c9c9, 0xffa9a9a9, 0xff707070, 0xffe1e1e1, 0xffe1e1e1, 0xffc2aaaa,
    0xff9a3d3d, 0xffa92c2c, 0xffad2727, 0xffa53030, 0xff944545, 0xff776868,
    0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070, 0xff707070,
    0xffa9a9a9, 0xffe1e1e1, 0xffe1e1e1, 0xffe3dfdf, 0xffead7d7, 0xffedd3d3,
    0xffeed2d2, 0xffecd4d4, 0xffe8d8d8, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe6dbdb, 0xffe9d8d8, 0xffead7d7, 0xffe8d8d8,
    0xffe4dede, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e0e0, 0xffe5dddd, 0xffe6dbdb, 0xffe4dede, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1,
    0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1, 0xffe1e1e1};
TRaster32P waiting(16, 16, 16, (TPixel32 *)waiting_buffer);
