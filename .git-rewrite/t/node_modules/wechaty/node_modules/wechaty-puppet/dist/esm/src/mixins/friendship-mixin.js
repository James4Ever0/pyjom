import { log, } from '../config.js';
import { PayloadType } from '../schemas/payload.js';
const friendshipMixin = (mixinBase) => {
    class FriendshipMixin extends mixinBase {
        constructor(...args) {
            super(...args);
            log.verbose('PuppetFriendshipMixin', 'constructor()');
        }
        async friendshipSearch(searchQueryFilter) {
            log.verbose('PuppetFriendshipMixin', 'friendshipSearch("%s")', JSON.stringify(searchQueryFilter));
            if (Object.keys(searchQueryFilter).length !== 1) {
                throw new Error('searchQueryFilter should only include one key for query!');
            }
            if (searchQueryFilter.phone) {
                return this.friendshipSearchPhone(searchQueryFilter.phone);
            }
            else if (searchQueryFilter.weixin) {
                return this.friendshipSearchWeixin(searchQueryFilter.weixin);
            }
            throw new Error(`unknown key from searchQueryFilter: ${Object.keys(searchQueryFilter).join('')}`);
        }
        /**
         * Issue #155 - https://github.com/wechaty/puppet/issues/155
         *
         * @protected
         */
        friendshipPayloadCache(friendshipId) {
            log.silly('PuppetFriendshipMixin', 'friendshipPayloadCache(id=%s) @ %s', friendshipId, this);
            if (!friendshipId) {
                throw new Error('no id');
            }
            const cachedPayload = this.cache.friendship.get(friendshipId);
            if (cachedPayload) {
                // log.silly('PuppetFriendshipMixin', 'friendshipPayloadCache(%s) cache HIT', friendshipId)
            }
            else {
                log.silly('PuppetFriendshipMixin', 'friendshipPayloadCache(%s) cache MISS', friendshipId);
            }
            return cachedPayload;
        }
        async friendshipPayload(friendshipId, newPayload) {
            log.verbose('PuppetFriendshipMixin', 'friendshipPayload(%s)', friendshipId, newPayload
                ? ',' + JSON.stringify(newPayload)
                : '');
            if (typeof newPayload === 'object') {
                await this.cache.friendship.set(friendshipId, newPayload);
                return;
            }
            /**
              * 1. Try to get from cache first
              */
            const cachedPayload = this.friendshipPayloadCache(friendshipId);
            if (cachedPayload) {
                return cachedPayload;
            }
            /**
              * 2. Cache not found
              */
            const rawPayload = await this.friendshipRawPayload(friendshipId);
            const payload = await this.friendshipRawPayloadParser(rawPayload);
            this.cache.friendship.set(friendshipId, payload);
            return payload;
        }
        async friendshipPayloadDirty(id) {
            log.verbose('PuppetFriendshipMixin', 'friendshipPayloadDirty(%s)', id);
            await this.__dirtyPayloadAwait(PayloadType.Friendship, id);
        }
    }
    return FriendshipMixin;
};
export { friendshipMixin };
//# sourceMappingURL=friendship-mixin.js.map