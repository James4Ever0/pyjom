"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PuppetTest = void 0;
const PUPPET = __importStar(require("../../../src/mods/mod.js"));
class PuppetTest extends PUPPET.Puppet {
    name() {
        return 'puppet-test';
    }
    version() {
        return '1.0.0';
    }
    async onStart() { }
    async onStop() { }
    async ding(data) { return data; }
    async logout() { return {}; }
    /**
     *
     * ContactSelf
     *
     *
     */
    async contactSelfQRCode() { return ''; }
    async contactSelfName(name) { void name; }
    async contactSelfSignature(signature) { void signature; }
    /**
     *
     * Tag
     *
     */
    async tagContactAdd(tagId, contactId) { void { contactId, tagId }; }
    async tagContactRemove(tagId, contactId) { void { contactId, tagId }; }
    async tagContactDelete(tagId) { void { tagId }; }
    async tagContactList(contactId) { return [contactId || '']; }
    async contactAlias(contactId, alias) { return { alias, contactId }; }
    async contactAvatar(contactId, file) { return { contactId, file }; }
    async contactPhone(contactId, phoneList) { return { contactId, phoneList }; }
    async contactList() { return {}; }
    async contactCorporationRemark(contactId, corporationRemark) { return { contactId, corporationRemark }; }
    async contactDescription(contactId, description) { return { contactId, description }; }
    async contactRawPayload(id) { return { id }; }
    async contactRawPayloadParser(rawPayload) { return { rawPayload }; }
    /**
     *
     * Friendship
     *
     */
    async friendshipRawPayload(id) { return { id }; }
    async friendshipRawPayloadParser(rawPayload) { return rawPayload; }
    async friendshipSearchPhone(phone) { return phone; }
    async friendshipSearchHandle(handle) { return handle; }
    async friendshipAdd(contactId, option) { return { contactId, option }; }
    async friendshipAccept(friendshipId) { return { friendshipId }; }
    /**
     *
     * Message
     *
     */
    async messageContact(messageId) { return { messageId }; }
    async messageFile(messageId) { return { messageId }; }
    async messageImage(messageId, imageType) { return { imageType, messageId }; }
    async messageMiniProgram(messageId) { return { messageId }; }
    async messageUrl(messageId) { return { messageId }; }
    async messageLocation(messageId) { return { messageId }; }
    async messageForward(conversationId, messageId) { return { conversationId, messageId }; }
    async messageSendContact(conversationId, contactId) { return { contactId, conversationId }; }
    async messageSendFile(conversationId, file) { return { conversationId, file }; }
    async messageSendText(conversationId, text) { return { conversationId, text }; }
    async messageSendUrl(conversationId, urlLinkPayload) { return { conversationId, urlLinkPayload }; }
    async messageSendMiniProgram(conversationId, miniProgramPayload) { return { conversationId, miniProgramPayload }; }
    async messageSendLocation(conversationId, locationPayload) { return { conversationId, locationPayload }; }
    async messageSendPost(conversationId, postPayload) { return { conversationId, postPayload }; }
    async messageRawPayload(id) { return { id }; }
    async messageRawPayloadParser(rawPayload) { return { rawPayload }; }
    async messageRecall(messageId) { return { messageId }; }
    /**
     *
     * Conversation
     *
     */
    async conversationReadMark(conversationId, hasRead) { void { conversationId, hasRead }; }
    /**
     *
     * Room Invitation
     *
     */
    async roomInvitationAccept(_) { }
    async roomInvitationRawPayload(roomInvitationId) { return { roomInvitationId }; }
    async roomInvitationRawPayloadParser(rawPayload) { return rawPayload; }
    async roomAnnounce(roomId, text) { return { roomId, text }; }
    async roomAdd(roomId, contactId, inviteOnly) { return { contactId, inviteOnly, roomId }; }
    async roomAvatar(roomId) { return { roomId }; }
    async roomCreate(contactIdList, topic) { return { contactIdList, topic }; }
    async roomDel(roomId, contactId) { return { contactId, roomId }; }
    async roomQuit(roomId) { return { roomId }; }
    async roomQRCode(roomId) { return { roomId }; }
    async roomTopic(roomId, topic) { return { roomId, topic }; }
    async roomList() { return {}; }
    async roomMemberList(roomId) { return { roomId }; }
    async roomRawPayload(id) { return { id }; }
    async roomRawPayloadParser(rawPayload) { return { rawPayload }; }
    async roomMemberRawPayload(roomId, contactId) { return { contactId, roomId }; }
    async roomMemberRawPayloadParser(rawPayload) { return rawPayload; }
    /**
     * expose to public for internal methods:
     */
    messageQueryFilterFactory(query) {
        return super.messageQueryFilterFactory(query);
    }
    roomQueryFilterFactory(query) {
        return super.roomQueryFilterFactory(query);
    }
    contactQueryFilterFactory(query) {
        return super.contactQueryFilterFactory(query);
    }
    /**
     * Posts
     */
    async postRawPayload(postId) {
        return { postId };
    }
    async postRawPayloadParser(rawPayload) {
        return { rawPayload };
    }
    postSearch(query, pagination) {
        return { pagination, query };
    }
    postPublish(payload) {
        return { payload };
    }
    /**
     * Tap
     */
    tap(postId, type, tap) {
        return { postid: postId, tap, type };
    }
    /**
     * Search for taps for a post
     *
     * @param query
     * @param pagination
     */
    tapSearch(postId, query, pagination) {
        return { pagination, postId, query };
    }
}
exports.PuppetTest = PuppetTest;
exports.default = PuppetTest;
//# sourceMappingURL=puppet-test.js.map