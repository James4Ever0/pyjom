"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.union = void 0;
const type_1 = require("./type");
const Result = __importStar(require("./Result"));
/**
 * Take one of the types. Merge the metadata from left to right.
 * If nothing matches, prints all the errors.
 */
function union(ts, { combineErrors = errors => errors.join('\n'), } = {}) {
    const merged = Object.assign({}, ...ts.map(x => type_1.typeDef(x)));
    return {
        ...merged,
        async from(input) {
            const errors = [];
            for (const t of ts) {
                const decoded = await Result.safeAsync(type_1.fromFn(t)(input));
                if (Result.isOk(decoded)) {
                    return decoded.value;
                }
                errors.push(decoded.error.message);
            }
            throw new Error(combineErrors(errors));
        },
    };
}
exports.union = union;
//# sourceMappingURL=union.js.map