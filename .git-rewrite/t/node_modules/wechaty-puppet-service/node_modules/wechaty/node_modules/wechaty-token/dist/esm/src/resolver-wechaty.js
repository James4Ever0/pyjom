import { log, DEFAULT_AUTHORITY, } from './config.js';
import { GrpcStatus, Metadata, resolverManager, uriToString, } from './grpc-js.js';
import { WechatyToken } from './wechaty-token.js';
class WechatyResolver {
    target;
    listener;
    channelOptions;
    addresses;
    static getDefaultAuthority(target) {
        log.verbose('ResolverWechaty', 'getDefaultAuthority(%s)', JSON.stringify(target));
        return target.authority || DEFAULT_AUTHORITY;
    }
    static setup() {
        log.verbose('ResolverWechaty', 'setup()');
        resolverManager.registerResolver('wechaty', WechatyResolver);
    }
    constructor(target, listener, channelOptions) {
        this.target = target;
        this.listener = listener;
        this.channelOptions = channelOptions;
        log.verbose('WechatyResolver', 'constructor("%s",)', JSON.stringify(target));
        log.silly('WechatyResolver', 'constructor(,,"%s")', JSON.stringify(channelOptions));
        this.addresses = [];
    }
    reportResolutionError(reason) {
        this.listener.onError({
            code: GrpcStatus.UNAVAILABLE,
            details: `Wechaty service discovery / resolution failed for target ${uriToString(this.target)}: ${reason}`,
            metadata: new Metadata(),
        });
    }
    async updateResolution() {
        log.verbose('ResolverWechaty', 'updateResolution()');
        let address;
        try {
            address = await new WechatyToken({
                authority: this.target.authority,
                token: this.target.path, // `__token__` in `wechaty://api.chatie.io/__token__`
            }).discover();
        }
        catch (e) {
            log.warn('WechatyResolver', 'updateResolution() wechatyToken.discover() error for target ' + uriToString(this.target) + ' due to error ' + e.message);
            console.error(e);
            this.reportResolutionError(e.message);
        }
        if (!address || !address.port) {
            log.warn('ResolverWechaty', 'updateResolution() address not found target ' + uriToString(this.target) + ': token does not exist');
            this.reportResolutionError(`token "${this.target.path}" does not exist`);
            return;
        }
        this.addresses = [address];
        /**
         * See: grpc-js/src/resolver-uds.ts
         */
        process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});
    }
    destroy() {
        log.verbose('ResolverWechaty', 'destroy()');
    }
}
export { WechatyResolver, };
//# sourceMappingURL=resolver-wechaty.js.map