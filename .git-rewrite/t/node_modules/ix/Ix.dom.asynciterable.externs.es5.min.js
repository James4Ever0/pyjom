
// @ts-nocheck
/**
 * @fileoverview Closure Compiler externs for Ix
 * @externs
 * @suppress {duplicate,checkTypes}
 */
/** @type {symbol} */
Symbol.iterator;
/** @type {symbol} */
Symbol.observable;
/** @type {symbol} */
Symbol.asyncIterator;

var as = function() {};
var asyncifyErrback = function() {};
var asyncify = function() {};
var AsyncIterableX = function() {};
/** @type {?} */
AsyncIterableX.prototype.forEach;
/** @type {?} */
AsyncIterableX.prototype.pipe;
/** @type {?} */
AsyncIterableX.prototype.tee;
/** @type {?} */
AsyncIterableX.prototype.pipeTo;
/** @type {?} */
AsyncIterableX.prototype.pipeThrough;
/** @type {?} */
AsyncIterableX.prototype.toDOMStream;
var AsyncSink = function() {};
/** @type {?} */
AsyncSink.prototype.write;
/** @type {?} */
AsyncSink.prototype.error;
/** @type {?} */
AsyncSink.prototype._push;
/** @type {?} */
AsyncSink.prototype.next;
/** @type {?} */
AsyncSink.prototype.end;
var average = function() {};
var CatchAllAsyncIterable = function() {};
var catchAll = function() {};
var catchError = function() {};
var CombineLatestAsyncIterable = function() {};
var combineLatest = function() {};
var ConcatAsyncIterable = function() {};
var _concatAll = function() {};
var concat = function() {};
var count = function() {};
var create = function() {};
var defer = function() {};
var elementAt = function() {};
var empty = function() {};
var every = function() {};
var findIndex = function() {};
var find = function() {};
var first = function() {};
var forkJoin = function() {};
var AsyncIterableReadableByteStream = function() {};
var AsyncIterableReadableStream = function() {};
var fromDOMStream = function() {};
var fromEventPattern = function() {};
var fromEvent = function() {};
var FromArrayIterable = function() {};
var FromAsyncIterable = function() {};
var FromObservableAsyncIterable = function() {};
var FromPromiseIterable = function() {};
var _initialize = function() {};
var from = function() {};
var generate = function() {};
var generateTime = function() {};
var iif = function() {};
var includes = function() {};
var interval = function() {};
var isEmpty = function() {};
var last = function() {};
var max = function() {};
var maxBy = function() {};
var MergeAsyncIterable = function() {};
var merge = function() {};
var min = function() {};
var minBy = function() {};
var NeverAsyncIterable = function() {};
var never = function() {};
var OfAsyncIterable = function() {};
var of = function() {};
var OnErrorResumeNextAsyncIterable = function() {};
var onErrorResumeNext = function() {};
var pipe = function() {};
var RaceAsyncIterable = function() {};
var race = function() {};
var range = function() {};
var reduceRight = function() {};
var reduce = function() {};
var RepeatValueAsyncIterable = function() {};
var repeatValue = function() {};
var sequenceEqual = function() {};
var single = function() {};
var some = function() {};
var sum = function() {};
var throwError = function() {};
var toArray = function() {};
var toDOMStream = function() {};
var toDOMStreamProto = function() {};
var toMap = function() {};
var toObservable = function() {};
var toSet = function() {};
var whileDo = function() {};
var ZipAsyncIterable = function() {};
var zip = function() {};