{"version":3,"sources":["iterable/operators/skip.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAGzC,MAAM,OAAO,YAAsB,SAAQ,SAAkB;IACnD,OAAO,CAAoB;IAC3B,MAAM,CAAS;IAEvB,YAAY,MAAyB,EAAE,KAAa;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,IAAI,CAAC;QACT,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;YAC5C,KAAK,EAAE,CAAC;SACT;QACD,IAAI,KAAK,IAAI,CAAC,EAAE;YACd,OAAO,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;gBAC/B,MAAM,IAAI,CAAC,KAAK,CAAC;aAClB;SACF;IACH,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,IAAI,CAAU,KAAa;IACzC,OAAO,SAAS,oBAAoB,CAAC,MAAyB;QAC5D,OAAO,IAAI,YAAY,CAAU,MAAM,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC;AACJ,CAAC","file":"skip.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { MonoTypeOperatorFunction } from '../../interfaces';\n\nexport class SkipIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _count: number;\n\n  constructor(source: Iterable<TSource>, count: number) {\n    super();\n    this._source = source;\n    this._count = count;\n  }\n\n  *[Symbol.iterator]() {\n    const it = this._source[Symbol.iterator]();\n    let count = this._count;\n    let next;\n    while (count > 0 && !(next = it.next()).done) {\n      count--;\n    }\n    if (count <= 0) {\n      while (!(next = it.next()).done) {\n        yield next.value;\n      }\n    }\n  }\n}\n\n/**\n * Bypasses a specified number of elements in an iterable sequence and then returns the remaining elements.\n *\n * @template TSource The type of the elements in the source sequence.\n * @param {number} count The number of elements to skip before returning the remaining elements.\n * @returns {MonoTypeOperatorFunction<TSource>} An iterable sequence that contains the elements that\n * occur after the specified index in the input sequence.\n */\nexport function skip<TSource>(count: number): MonoTypeOperatorFunction<TSource> {\n  return function skipOperatorFunction(source: Iterable<TSource>): IterableX<TSource> {\n    return new SkipIterable<TSource>(source, count);\n  };\n}\n"]}