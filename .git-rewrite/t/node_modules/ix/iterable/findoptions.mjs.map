{"version":3,"sources":["iterable/findoptions.ts"],"names":[],"mappings":"","file":"findoptions.js","sourcesContent":["/**\n * A find options property bag with the selector and thisArg for binding all optional.\n *\n * @interface OptionalFindOptions\n * @template T The type of the elements in the source sequence.\n */\nexport interface OptionalFindOptions<T> {\n  /**\n   * The optional `this` binding for the predicate function.\n   *\n   * @type {*}\n   * @memberof OptionalFindOptions\n   */\n  thisArg?: any;\n  /**\n   * The optional predicate which gives the current value and the current index. This function\n   * returns either a boolean or a promise containing a boolean whether the condition holds or not.\n   *\n   * @memberof OptionalFindOptions\n   */\n  predicate?: (value: T, index: number) => boolean;\n}\n\n/**\n * A find options property bag with the selector being required and the thisArg for binding are all optional.\n *\n * @interface FindOptions\n * @template T The type of the elements in the source sequence.\n */\nexport interface FindOptions<T> {\n  /**\n   * The optional `this` binding for the predicate function.\n   *\n   * @type {*}\n   * @memberof FindOptions\n   */\n  thisArg?: any;\n  /**\n   * The optional predicate which gives the current value and the current index. This function\n   * returns either a truthy value whether the condition holds or not.\n   *\n   * @memberof FindOptions\n   */\n  predicate: (value: T, index: number, signal?: AbortSignal) => boolean;\n}\n"]}