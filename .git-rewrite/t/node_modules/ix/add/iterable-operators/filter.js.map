{"version":3,"sources":["add/iterable-operators/filter.ts"],"names":[],"mappings":";;;AAAA,wDAAqD;AACrD,4DAAyD;AAezD,SAAgB,WAAW,CAEzB,SAA+C,EAC/C,OAAa;IAEb,OAAO,eAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;AAC1C,CAAC;AAND,kCAMC;AAED,qBAAS,CAAC,SAAS,CAAC,MAAM,GAAG,WAAW,CAAC","file":"filter.js","sourcesContent":["import { IterableX } from '../../iterable/iterablex';\nimport { filter } from '../../iterable/operators/filter';\n\n/**\n * @ignore\n */\nexport function filterProto<T, S extends T>(\n  this: IterableX<T>,\n  predicate: (value: T, index: number) => value is S,\n  thisArg?: any\n): IterableX<S>;\nexport function filterProto<T>(\n  this: IterableX<T>,\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): IterableX<T>;\nexport function filterProto<T>(\n  this: IterableX<T>,\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): IterableX<T> {\n  return filter(predicate, thisArg)(this);\n}\n\nIterableX.prototype.filter = filterProto;\n\ndeclare module '../../iterable/iterablex' {\n  interface IterableX<T> {\n    filter: typeof filterProto;\n  }\n}\n"]}