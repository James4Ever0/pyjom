{"version":3,"sources":["add/iterable-operators/takewhile.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,oCAAoC,CAAC;AAa/D,MAAM,UAAU,cAAc,CAE5B,SAA+C;IAE/C,OAAO,SAAS,CAAI,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC;AAED,SAAS,CAAC,SAAS,CAAC,SAAS,GAAG,cAAc,CAAC","file":"takewhile.js","sourcesContent":["import { IterableX } from '../../iterable/iterablex';\nimport { takeWhile } from '../../iterable/operators/takewhile';\n\n/**\n * @ignore\n */\nexport function takeWhileProto<T, S extends T>(\n  this: IterableX<T>,\n  predicate: (value: T, index: number) => value is S\n): IterableX<S>;\nexport function takeWhileProto<T>(\n  this: IterableX<T>,\n  predicate: (value: T, index: number) => boolean\n): IterableX<T>;\nexport function takeWhileProto<T>(\n  this: IterableX<T>,\n  predicate: (value: T, index: number) => boolean\n): IterableX<T> {\n  return takeWhile<T>(predicate)(this);\n}\n\nIterableX.prototype.takeWhile = takeWhileProto;\n\ndeclare module '../../iterable/iterablex' {\n  interface IterableX<T> {\n    takeWhile: typeof takeWhileProto;\n  }\n}\n"]}