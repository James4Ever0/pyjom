{"version":3,"sources":["asynciterable/operators/scanright.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAGrC,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,sBAA6B,SAAQ,cAAiB;IACzD,OAAO,CAAmB;IAC1B,GAAG,CAAwE;IAC3E,KAAK,CAAS;IACd,QAAQ,CAAU;IAE1B,YAAY,MAAwB,EAAE,OAA0B;QAC9D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QAChD,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACrB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACnD,KAAK,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE;YAC1D,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YAC5B,IAAI,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAC1C,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAI,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;gBACnD,MAAM,GAAG,CAAC;aACX;iBAAM;gBACL,GAAG,GAAG,IAAI,CAAC;gBACX,QAAQ,GAAG,IAAI,CAAC;aACjB;SACF;IACH,CAAC;CACF;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,SAAS,CAAW,OAA0B;IAC5D,OAAO,SAAS,yBAAyB,CAAC,MAAwB;QAChE,OAAO,IAAI,sBAAsB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC,CAAC;AACJ,CAAC","file":"scanright.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { toArray } from '../toarray';\nimport { OperatorAsyncFunction } from '../../interfaces';\nimport { ScanOptions } from './scanoptions';\nimport { throwIfAborted } from '../../aborterror';\n\nexport class ScanRightAsyncIterable<T, R> extends AsyncIterableX<R> {\n  private _source: AsyncIterable<T>;\n  private _fn: (acc: R, x: T, index: number, signal?: AbortSignal) => R | Promise<R>;\n  private _seed?: T | R;\n  private _hasSeed: boolean;\n\n  constructor(source: AsyncIterable<T>, options: ScanOptions<T, R>) {\n    super();\n    this._source = source;\n    this._fn = options['callback'];\n    this._hasSeed = options.hasOwnProperty('seed');\n    this._seed = options['seed'];\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n    let hasValue = false;\n    let acc = this._seed;\n    const source = await toArray(this._source, signal);\n    for (let offset = source.length - 1; offset >= 0; offset--) {\n      const item = source[offset];\n      if (hasValue || (hasValue = this._hasSeed)) {\n        acc = await this._fn(<R>acc, item, offset, signal);\n        yield acc;\n      } else {\n        acc = item;\n        hasValue = true;\n      }\n    }\n  }\n}\n\n/**\n * Applies an accumulator function over an async-iterable sequence from the right and returns each intermediate result.\n * The specified seed value, if given, is used as the initial accumulator value.\n *\n * @template T The type of the elements in the source sequence.\n * @template R The type of the result of the aggregation.\n * @param {ScanOptions<T, R>} options The options including the accumulator function and seed.\n * @returns {OperatorAsyncFunction<T, R>} An async-enumerable sequence containing the accumulated values from the right.\n */\nexport function scanRight<T, R = T>(options: ScanOptions<T, R>): OperatorAsyncFunction<T, R> {\n  return function scanRightOperatorFunction(source: AsyncIterable<T>): AsyncIterableX<R> {\n    return new ScanRightAsyncIterable(source, options);\n  };\n}\n"]}