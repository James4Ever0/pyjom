{"version":3,"sources":["asynciterable/operators/withlatestfrom.ts"],"names":[],"mappings":"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","file":"withlatestfrom.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { OperatorAsyncFunction } from '../../interfaces';\nimport { wrapWithAbort } from './withabort';\nimport { throwIfAborted } from '../../aborterror';\nimport { identity } from '../../util/identity';\nimport { safeRace } from '../../util/safeRace';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst NEVER_PROMISE = new Promise(() => {});\n\ntype MergeResult<T> = { value: T; index: number };\n\nfunction wrapPromiseWithIndex<T>(promise: Promise<T>, index: number) {\n  return promise.then((value) => ({ value, index })) as Promise<MergeResult<T>>;\n}\n\nexport class WithLatestFromAsyncIterable<TSource> extends AsyncIterableX<TSource[]> {\n  private _source: AsyncIterable<TSource>;\n  private _others: AsyncIterable<TSource>[];\n\n  constructor(source: AsyncIterable<TSource>, others: AsyncIterable<TSource>[]) {\n    super();\n    this._source = source;\n    this._others = others;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n\n    const length = this._others.length;\n    const newLength = length + 1;\n    const iterators = new Array<AsyncIterator<TSource>>(newLength);\n    const nexts = new Array<Promise<MergeResult<IteratorResult<TSource>>>>(newLength);\n\n    let hasValueAll = false;\n    const hasValue = new Array(length);\n    const values = new Array(length);\n    hasValue.fill(false);\n\n    for (let i = 0; i < length; i++) {\n      const iterator = wrapWithAbort(this._others[i], signal)[Symbol.asyncIterator]();\n      iterators[i] = iterator;\n      nexts[i] = wrapPromiseWithIndex(iterator.next(), i);\n    }\n\n    const it = wrapWithAbort(this._source, signal)[Symbol.asyncIterator]();\n    iterators[length] = it;\n    nexts[length] = wrapPromiseWithIndex(it.next(), length);\n\n    for (;;) {\n      const next = safeRace(nexts);\n      const {\n        value: { value: value$, done: done$ },\n        index,\n      } = await next;\n\n      if (index === length) {\n        if (done$) {\n          break;\n        }\n\n        const iterator$ = iterators[index];\n        nexts[index] = wrapPromiseWithIndex(iterator$.next(), index);\n\n        if (hasValueAll) {\n          yield [value$, ...values];\n        }\n      } else if (done$) {\n        nexts[index] = <Promise<MergeResult<IteratorResult<TSource>>>>NEVER_PROMISE;\n      } else {\n        values[index] = value$;\n        hasValue[index] = true;\n        hasValueAll = hasValue.every(identity);\n\n        const iterator$ = iterators[index];\n        nexts[index] = wrapPromiseWithIndex(iterator$.next(), index);\n      }\n    }\n  }\n}\n\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence by combining each element\n * from the first source with the latest element from the other sources, if any.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2]>} An async-iterable sequence containing the result of combining\n * each element of the first source with the latest element from the second source, if any as an array.\n */\nexport function withLatestFrom<T, T2>(\n  source2: AsyncIterable<T2>\n): OperatorAsyncFunction<T, [T, T2]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence by combining each element\n * from the first source with the latest element from the other sources, if any.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2, T3]>} An async-iterable sequence containing the result of combining\n * each element of the first source with the latest element from the second source, if any as an array.\n */\nexport function withLatestFrom<T, T2, T3>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>\n): OperatorAsyncFunction<T, [T, T2, T3]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence by combining each element\n * from the first source with the latest element from the other sources, if any.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2, T3, T4]>} An async-iterable sequence containing the result of combining\n * each element of the first source with the latest element from the second source, if any as an array.\n */\nexport function withLatestFrom<T, T2, T3, T4>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>\n): OperatorAsyncFunction<T, [T, T2, T3, T4]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence by combining each element\n * from the first source with the latest element from the other sources, if any.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @template T5 The type of the elements in the fifth source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @param {AsyncIterable<T5>} source5 Fifth async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2, T3, T4, T5]>} An async-iterable sequence containing the result of combining\n * each element of the first source with the latest element from the second source, if any as an array.\n */\nexport function withLatestFrom<T, T2, T3, T4, T5>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>\n): OperatorAsyncFunction<T, [T, T2, T3, T4, T5]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence by combining each element\n * from the first source with the latest element from the other sources, if any.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @template T5 The type of the elements in the fifth source sequence.\n * @template T6 The type of the elements in the sixth source sequence.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @param {AsyncIterable<T5>} source5 Fifth async-iterable source.\n * @param {AsyncIterable<T6>} source6 Sixth async-iterable source.\n * @returns {OperatorAsyncFunction<T, [T, T2, T3, T4, T5, T6]>} An async-iterable sequence containing the result of combining\n * each element of the first source with the latest element from the second source, if any as an array.\n */\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>,\n  source6: AsyncIterable<T6>\n): OperatorAsyncFunction<T, [T, T2, T3, T4, T5, T6]>;\n\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence by combining each element\n * from the first source with the latest element from the other sources, if any.\n *\n * @template T The type of the elements in the source sequences.\n * @param {...AsyncIterable<T>[]} sources The source sequences.\n * @returns {OperatorAsyncFunction<T, T[]>} An async-iterable sequence containing the result of combining\n * each element of the first source with the latest element from the second source, if any as an array.\n */\nexport function withLatestFrom<T>(...sources: AsyncIterable<T>[]): OperatorAsyncFunction<T, T[]>;\n\nexport function withLatestFrom<T>(...sources: any[]): OperatorAsyncFunction<T, T[]> {\n  return function withLatestFromOperatorFunction(source: AsyncIterable<T>) {\n    return new WithLatestFromAsyncIterable<T>(source, sources);\n  };\n}\n"]}