{"version":3,"sources":["asynciterable/operators/slice.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,OAAO,kBAA4B,SAAQ,cAAuB;IAC9D,OAAO,CAAyB;IAChC,MAAM,CAAS;IACf,IAAI,CAAS;IAErB,YAAY,MAA8B,EAAE,KAAa,EAAE,GAAW;QACpE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QAChD,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACnD,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;QAC1C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,IAAI,CAAC;QACT,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;YAClD,KAAK,EAAE,CAAC;SACT;QAED,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;QACpB,IAAI,GAAG,GAAG,CAAC,EAAE;YACX,OAAO,CAAC,CAAC,IAAI,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;gBACrC,MAAM,IAAI,CAAC,KAAK,CAAC;gBACjB,IAAI,EAAE,GAAG,KAAK,CAAC,EAAE;oBACf,MAAM;iBACP;aACF;SACF;IACH,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,KAAK,CACnB,KAAa,EACb,GAAG,GAAG,QAAQ;IAEd,OAAO,SAAS,qBAAqB,CAAC,MAA8B;QAClE,OAAO,IAAI,kBAAkB,CAAU,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IAC7D,CAAC,CAAC;AACJ,CAAC","file":"slice.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { MonoTypeOperatorAsyncFunction } from '../../interfaces';\nimport { wrapWithAbort } from './withabort';\nimport { throwIfAborted } from '../../aborterror';\n\nexport class SliceAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _begin: number;\n  private _end: number;\n\n  constructor(source: AsyncIterable<TSource>, begin: number, end: number) {\n    super();\n    this._source = source;\n    this._begin = begin;\n    this._end = end;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n    const source = wrapWithAbort(this._source, signal);\n    const it = source[Symbol.asyncIterator]();\n    let begin = this._begin;\n    let next;\n    while (begin > 0 && !(next = await it.next()).done) {\n      begin--;\n    }\n\n    let end = this._end;\n    if (end > 0) {\n      while (!(next = await it.next()).done) {\n        yield next.value;\n        if (--end === 0) {\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns the elements from the source async-iterable sequence only after the function that returns a promise produces an element.\n *\n * @template TSource The type of elements in the source sequence.\n * @param {number} begin Zero-based index at which to begin extraction.\n * @param {number} [end=Infinity] Zero-based index before which to end extraction.\n * @returns {MonoTypeOperatorAsyncFunction<TSource>} An async-iterable containing the extracted elements.\n */\nexport function slice<TSource>(\n  begin: number,\n  end = Infinity\n): MonoTypeOperatorAsyncFunction<TSource> {\n  return function sliceOperatorFunction(source: AsyncIterable<TSource>): AsyncIterableX<TSource> {\n    return new SliceAsyncIterable<TSource>(source, begin, end);\n  };\n}\n"]}