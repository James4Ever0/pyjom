"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flatMap = exports.FlatMapAsyncIterable = void 0;
const asynciterablex_1 = require("../asynciterablex");
const withabort_1 = require("./withabort");
const aborterror_1 = require("../../aborterror");
class FlatMapAsyncIterable extends asynciterablex_1.AsyncIterableX {
    _source;
    _selector;
    _thisArg;
    constructor(source, selector, thisArg) {
        super();
        this._source = source;
        this._selector = selector;
        this._thisArg = thisArg;
    }
    async *[Symbol.asyncIterator](signal) {
        aborterror_1.throwIfAborted(signal);
        const { _source: source, _selector: selector, _thisArg: thisArg } = this;
        let index = 0;
        for await (const outer of withabort_1.wrapWithAbort(source, signal)) {
            const inners = await selector.call(thisArg, outer, index++, signal);
            for await (const inner of withabort_1.wrapWithAbort(inners, signal)) {
                yield inner;
            }
        }
    }
}
exports.FlatMapAsyncIterable = FlatMapAsyncIterable;
/**
 * Projects each element of an async-iterable sequence to an async-iterable sequence and merges
 * the resulting async-iterable sequences into one async-iterable sequence.
 *
 * @template TSource The type of the elements in the source sequence.
 * @template TResult The type of the elements in the projected inner sequences and the elements in the merged result sequence.
 * @param {((
 *     value: TSource,
 *     index: number,
 *     signal?: AbortSignal
 *   ) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>)} selector A transform function to apply to each element.
 * @param {*} [thisArg] Option this for binding to the selector.
 * @returns {OperatorAsyncFunction<TSource, TResult>} An operator that creates an async-iterable sequence whose
 * elements are the result of invoking the one-to-many transform function on each element of the input sequence.
 */
function flatMap(selector, thisArg) {
    return function flatMapOperatorFunction(source) {
        return new FlatMapAsyncIterable(source, selector, thisArg);
    };
}
exports.flatMap = flatMap;

//# sourceMappingURL=flatmap.js.map
