/**
 *   Ducks - https://github.com/huan/ducks
 *
 *   @copyright 2020 Huan LI (李卓桓) <https://github.com/huan>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
import { ActionFromReducersMapObject, Reducer, ReducersMapObject, StateFromReducersMapObject } from 'redux';
declare type StateFromInsertReducers<R extends Reducer, M extends ReducersMapObject<any>> = StateFromReducersMapObject<M> & (R extends Reducer<infer RS> ? RS : never);
declare type ActionFromInsertReducers<R extends Reducer, M extends ReducersMapObject<any>> = ActionFromReducersMapObject<M> & R extends Reducer<any, infer RA> ? RA : never;
/**
 * We have to do some tricky with insertReducer.
 *  because the Redux reduce system will check matching for the the keys of the state and reducers.
 */
declare function insertReducers<R extends Reducer, M extends ReducersMapObject>(originReducer: R, insertReducers: M): Reducer<StateFromInsertReducers<R, M>, ActionFromInsertReducers<R, M>>;
export { insertReducers, };
//# sourceMappingURL=insert-reducers.d.ts.map