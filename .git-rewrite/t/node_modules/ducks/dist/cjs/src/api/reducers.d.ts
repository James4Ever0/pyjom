declare const reducer: import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
    handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
    handleAction: <TActionCreator extends (...args: any[]) => never, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends never>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
        handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
        handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_1) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
            handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_1>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
            handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_2) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_2>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_3) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                    handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_3>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                    handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_4) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                        handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_4>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                        handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_5) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                            handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_5>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                            handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_6) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_6>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                                handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_7) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                    handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_7>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                                    handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_8) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                        handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_8>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                                        handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_9) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                            handlers: Record<Exclude<import("typesafe-actions").EmptyAction<"ducks/NOOP">, TOutputAction_9>["type"], (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                                            handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: THandledAction_10) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & any : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                                handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                                            };
                                        } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                            handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                                        };
                                    } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                        handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                                    };
                                } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                    handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                                };
                            } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                                handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                            };
                        } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                            handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                        };
                    } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                        handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                    };
                } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                    handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
                };
            } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
                handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
            };
        } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
            handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
        };
    } : import("typesafe-actions").Reducer<import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, import("typesafe-actions").EmptyAction<"ducks/NOOP">> & {
        handlers: Record<"ducks/NOOP", (state: import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>, action: import("typesafe-actions").EmptyAction<"ducks/NOOP">) => import("utility-types/dist/mapped-types")._DeepReadonlyObject<unknown>>;
    };
};
export default reducer;
export declare type State = ReturnType<typeof reducer>;
//# sourceMappingURL=reducers.d.ts.map