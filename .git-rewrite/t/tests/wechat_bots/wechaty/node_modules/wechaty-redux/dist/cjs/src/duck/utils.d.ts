/**
 *   Wechaty Open Source Software - https://github.com/wechaty
 *
 *   @copyright 2016 Huan LI (李卓桓) <https://github.com/huan>, and
 *                   Wechaty Contributors <https://github.com/wechaty>.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
import * as PUPPET from 'wechaty-puppet';
import { Observable } from 'rxjs';
import type * as actions from './actions.js';
/**
 * Example: `pipe(mergeMap(toMessage$))`
 */
declare const toMessage$: (action: ReturnType<typeof actions.MESSAGE_RECEIVED_EVENT>) => Observable<((PUPPET.payloads.MessageBase & PUPPET.payloads.MessageRoom) | (PUPPET.payloads.MessageBase & PUPPET.payloads.MessageTo)) & {
    puppetId: string;
}>;
declare const toContact$: (action: ReturnType<typeof actions.LOGIN_RECEIVED_EVENT>) => Observable<PUPPET.payloads.Contact & {
    puppetId: string;
}>;
declare const isTextMessage: (text?: string | undefined) => (message: PUPPET.payloads.Message) => boolean;
declare const isWechaty: (puppetId: string) => (action: ReturnType<typeof actions.MESSAGE_RECEIVED_EVENT>) => boolean;
declare const skipSelfMessage$: (action: ReturnType<typeof actions.MESSAGE_RECEIVED_EVENT>) => Observable<import("typesafe-actions").PayloadMetaAction<"wechaty-redux/MESSAGE_RECEIVED_EVENT", PUPPET.payloads.EventMessage, {
    puppetId: string;
}>>;
export { toMessage$, toContact$, isTextMessage, isWechaty, skipSelfMessage$, };
//# sourceMappingURL=utils.d.ts.map