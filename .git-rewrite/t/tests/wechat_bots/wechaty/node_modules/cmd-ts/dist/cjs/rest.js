"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rest = void 0;
const Result = __importStar(require("./Result"));
function rest(config) {
    return {
        helpTopics() {
            var _a, _b;
            const displayName = (_a = config === null || config === void 0 ? void 0 : config.displayName) !== null && _a !== void 0 ? _a : 'arg';
            return [
                {
                    usage: `[...${displayName}]`,
                    category: 'arguments',
                    defaults: [],
                    description: (_b = config === null || config === void 0 ? void 0 : config.description) !== null && _b !== void 0 ? _b : 'catches the rest of the values',
                },
            ];
        },
        register() { },
        async parse(context) {
            const visitedNodeIndices = [...context.visitedNodes]
                .map((x) => context.nodes.indexOf(x))
                .filter((x) => x > -1);
            if (visitedNodeIndices.length === 0) {
                return Result.ok([]);
            }
            const maxIndex = Math.max(...visitedNodeIndices);
            const restItems = context.nodes.slice(maxIndex + 1);
            restItems.forEach((node) => context.visitedNodes.add(node));
            return Result.ok(restItems.map((x) => x.raw));
        },
    };
}
exports.rest = rest;
//# sourceMappingURL=rest.js.map