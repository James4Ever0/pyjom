import { identity } from './type';
/**
 * A number type to be used with `option`
 *
 * Throws an error when the provided string is not a number
 */
export const number = {
    async from(str) {
        const decoded = parseFloat(str);
        if (Number.isNaN(decoded)) {
            throw new Error('Not a number');
        }
        else {
            return decoded;
        }
    },
    displayName: 'number',
    description: 'a number',
};
/**
 * A string type to be used with `option`.
 */
export const string = {
    ...identity(),
    description: 'a string',
    displayName: 'str',
};
/**
 * A boolean type to be used with `flag`.
 */
export const boolean = {
    ...identity(),
    description: 'a boolean',
    displayName: 'true/false',
    defaultValue() {
        return false;
    },
};
/**
 * Makes any type optional, by defaulting to `undefined`.
 */
export function optional(t) {
    return {
        ...t,
        defaultValue() {
            return undefined;
        },
    };
}
/**
 * Transforms any type into an array, useful for `multioption` and `multiflag`.
 */
export function array(t) {
    return {
        ...t,
        async from(inputs) {
            return Promise.all(inputs.map((input) => t.from(input)));
        },
    };
}
//# sourceMappingURL=types.js.map