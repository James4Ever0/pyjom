/**
 * [RFC] We need a better error system #159
 *  https://github.com/wechaty/puppet/issues/159
 */
import type { EcmaError } from './ecma.js';
import { isEcmaError } from './ecma.js';
import type { GrpcStatus } from './grpc.js';
import { isGrpcStatus } from './grpc.js';
declare const isGError: (payload: any) => payload is GError;
declare class GError extends Error implements GrpcStatus, EcmaError {
    /**
     * GrpcStatus additional properties
     */
    code: number;
    details?: string;
    static stringify(payload: any): string;
    /**
     * GError.from() supports:
     *  - string
     *  - Error instance
     *  - GError instance
     *  - GrpcStatus object
     *  - EcmaError object
     *  - GError object
     *  - PuppetEventErrorPayload object/string
     */
    static from(payload: any): GError;
    /**
     * From a gRPC standard error
     *  Protobuf
     */
    static fromJSON(payload: string | GrpcStatus | EcmaError): GError;
    constructor(payload: GrpcStatus | EcmaError);
    toJSON(): GrpcStatus & EcmaError;
    toGrpcStatus(): GrpcStatus;
    toEcmaError(): EcmaError;
}
export { GError, isGError, isGrpcStatus, isEcmaError, };
//# sourceMappingURL=gerror.d.ts.map