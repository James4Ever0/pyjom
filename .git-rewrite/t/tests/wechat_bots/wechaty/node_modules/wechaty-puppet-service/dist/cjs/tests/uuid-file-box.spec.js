#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const wechaty_puppet_mock_1 = __importDefault(require("wechaty-puppet-mock"));
const get_port_1 = __importDefault(require("get-port"));
const temp_1 = __importDefault(require("temp"));
const file_box_1 = require("file-box");
const mod_js_1 = __importStar(require("../src/mod.js"));
const NIL_UUID_V4 = '00000000-0000-0000-0000-000000000000';
const __dirname = path.resolve();
(0, tstest_1.test)('message file test', async (t) => {
    const PORT = await (0, get_port_1.default)();
    const TOKEN = `insecure_${NIL_UUID_V4}`;
    const ENDPOINT = `0.0.0.0:${PORT}`;
    const FILE = path.join(__dirname, 'tests', 'fixtures', 'smoke-testing.ts');
    const EXPECTED_SIZE = fs.statSync(FILE).size;
    /**
     * Puppet Server
     */
    const puppet = new wechaty_puppet_mock_1.default();
    puppet.messageFile = async () => file_box_1.FileBox.fromFile(FILE);
    const serverOptions = {
        endpoint: ENDPOINT,
        puppet: puppet,
        token: TOKEN,
    };
    const puppetServer = new mod_js_1.PuppetServer(serverOptions);
    await puppetServer.start();
    /**
     * Puppet Service Client
     */
    const puppetOptions = {
        endpoint: ENDPOINT,
        token: TOKEN,
    };
    const puppetService = new mod_js_1.default(puppetOptions);
    await puppetService.start();
    const file = await puppetService.messageFile('sb');
    const tmpFolder = temp_1.default.mkdirSync('test');
    const tmpFile = path.join(tmpFolder, 'uuid-file.dat');
    await file.toFile(tmpFile);
    const fileSize = fs.statSync(tmpFile).size;
    t.equal(fileSize, EXPECTED_SIZE, 'should save file with the correct size');
    fs.rmSync(tmpFile);
    await puppetService.stop();
    await puppetServer.stop();
});
//# sourceMappingURL=uuid-file-box.spec.js.map