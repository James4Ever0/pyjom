#!/usr/bin/env -S node --no-warnings --loader ts-node/esm
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const get_port_1 = __importDefault(require("get-port"));
const wechaty_puppet_mock_1 = require("wechaty-puppet-mock");
const puppet_service_js_1 = require("./puppet-service.js");
const mod_js_1 = require("../mod.js");
(0, tstest_1.test)('version()', async (t) => {
    const puppet = new puppet_service_js_1.PuppetService({
        token: 'test',
    });
    t.ok(puppet.version());
});
/**
 * Huan(202003):
 *  need to setup a test server to provide test token for Puppet Service
 */
(0, tstest_1.test)('PuppetService restart without problem', async (t) => {
    const TOKEN = 'insecure_token';
    const PORT = await (0, get_port_1.default)();
    const ENDPOINT = '0.0.0.0:' + PORT;
    const puppet = new wechaty_puppet_mock_1.PuppetMock();
    const serverOptions = {
        endpoint: ENDPOINT,
        puppet: puppet,
        token: TOKEN,
    };
    const puppetServer = new mod_js_1.PuppetServer(serverOptions);
    await puppetServer.start();
    /**
     * Puppet Service Client
     */
    const puppetOptions = {
        endpoint: ENDPOINT,
        token: TOKEN,
    };
    const puppetService = new puppet_service_js_1.PuppetService(puppetOptions);
    try {
        for (let i = 0; i < 3; i++) {
            await puppetService.start();
            await puppetService.stop();
            t.pass('start/stop-ed at #' + i);
        }
        t.pass('PuppetService() start/restart successed.');
    }
    catch (e) {
        t.fail(e);
    }
    await puppetServer.stop();
});
//# sourceMappingURL=puppet-service.spec.js.map