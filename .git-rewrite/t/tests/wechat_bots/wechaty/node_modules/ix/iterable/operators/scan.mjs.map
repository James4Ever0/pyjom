{"version":3,"sources":["iterable/operators/scan.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAIzC,MAAM,OAAO,YAAmB,SAAQ,SAAY;IAC1C,OAAO,CAAc;IACrB,GAAG,CAAqC;IACxC,KAAK,CAAS;IACd,QAAQ,CAAU;IAE1B,YAAY,MAAmB,EAAE,OAA0B;QACzD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACrB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,IAAI,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAC1C,GAAG,GAAG,IAAI,CAAC,GAAG,CAAI,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;gBAClC,MAAM,GAAG,CAAC;aACX;iBAAM;gBACL,GAAG,GAAG,IAAI,CAAC;gBACX,QAAQ,GAAG,IAAI,CAAC;gBAChB,CAAC,EAAE,CAAC;aACL;SACF;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC7B,MAAM,GAAQ,CAAC;SAChB;IACH,CAAC;CACF;AAgBD,MAAM,UAAU,IAAI,CAClB,oBAA4F,EAC5F,IAAQ;IAER,MAAM,OAAO;IACX,6CAA6C;IAC7C,OAAO,oBAAoB,KAAK,UAAU;QACxC,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC;YACpB,CAAC,CAAC,kBAAkB;gBAClB,EAAE,UAAU,EAAE,oBAAoB,EAAE,MAAM,EAAE,IAAI,EAAE;YACpD,CAAC,CAAC,kBAAkB;gBAClB,EAAE,UAAU,EAAE,oBAAoB,EAAE;QACxC,CAAC,CAAC,oBAAoB,CAAC;IAC3B,OAAO,SAAS,oBAAoB,CAAC,MAAmB;QACtD,OAAO,IAAI,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC,CAAC;AACJ,CAAC","file":"scan.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { OperatorFunction } from '../../interfaces';\nimport { ScanOptions } from './scanoptions';\n\nexport class ScanIterable<T, R> extends IterableX<R> {\n  private _source: Iterable<T>;\n  private _fn: (acc: R, x: T, index: number) => R;\n  private _seed?: T | R;\n  private _hasSeed: boolean;\n\n  constructor(source: Iterable<T>, options: ScanOptions<T, R>) {\n    super();\n    this._source = source;\n    this._fn = options['callback'];\n    this._hasSeed = options.hasOwnProperty('seed');\n    this._seed = options['seed'];\n  }\n\n  *[Symbol.iterator]() {\n    let i = 0;\n    let hasValue = false;\n    let acc = this._seed;\n    for (const item of this._source) {\n      if (hasValue || (hasValue = this._hasSeed)) {\n        acc = this._fn(<R>acc, item, i++);\n        yield acc;\n      } else {\n        acc = item;\n        hasValue = true;\n        i++;\n      }\n    }\n    if (i === 1 && !this._hasSeed) {\n      yield acc as R;\n    }\n  }\n}\n\n/**\n * Applies an accumulator function over an iterable sequence and returns each intermediate result.\n * The specified seed value, if given, is used as the initial accumulator value.\n *\n * @template T The type of the elements in the source sequence.\n * @template R The type of the result of the aggregation.\n * @param {ScanOptions<T, R>} options The options including the accumulator function and seed.\n * @returns {OperatorFunction<T, R>} An async-enumerable sequence containing the accumulated values.\n */\nexport function scan<T, R = T>(options: ScanOptions<T, R>): OperatorFunction<T, R>;\nexport function scan<T, R = T>(\n  accumulator: (accumulator: R, current: T, index: number) => R,\n  seed?: R\n): OperatorFunction<T, R>;\nexport function scan<T, R = T>(\n  optionsOrAccumulator: ScanOptions<T, R> | ((accumulator: R, current: T, index: number) => R),\n  seed?: R\n): OperatorFunction<T, R> {\n  const options =\n    // eslint-disable-next-line no-nested-ternary\n    typeof optionsOrAccumulator === 'function'\n      ? arguments.length > 1\n        ? // prettier-ignore\n          { 'callback': optionsOrAccumulator, 'seed': seed }\n        : // prettier-ignore\n          { 'callback': optionsOrAccumulator }\n      : optionsOrAccumulator;\n  return function scanOperatorFunction(source: Iterable<T>): IterableX<R> {\n    return new ScanIterable(source, options);\n  };\n}\n"]}