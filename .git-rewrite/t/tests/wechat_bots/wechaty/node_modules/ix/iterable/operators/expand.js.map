{"version":3,"sources":["iterable/operators/expand.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAGzC,MAAa,cAAwB,SAAQ,qBAAkB;IACrD,OAAO,CAAoB;IAC3B,GAAG,CAAwC;IAEnD,YAAY,MAAyB,EAAE,EAAyC;QAC9E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAChB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,MAAM,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;YACtB,KAAK,MAAM,IAAI,IAAI,GAAI,EAAE;gBACvB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvB,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;CACF;AApBD,wCAoBC;AAED;;;;;;;GAOG;AACH,SAAgB,MAAM,CACpB,QAA+C;IAE/C,OAAO,SAAS,sBAAsB,CAAC,MAAyB;QAC9D,OAAO,IAAI,cAAc,CAAU,MAAM,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC,CAAC;AACJ,CAAC;AAND,wBAMC","file":"expand.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { MonoTypeOperatorFunction } from '../../interfaces';\n\nexport class ExpandIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _fn: (value: TSource) => Iterable<TSource>;\n\n  constructor(source: Iterable<TSource>, fn: (value: TSource) => Iterable<TSource>) {\n    super();\n    this._source = source;\n    this._fn = fn;\n  }\n\n  *[Symbol.iterator]() {\n    const q = [this._source];\n    while (q.length > 0) {\n      const src = q.shift();\n      for (const item of src!) {\n        q.push(this._fn(item));\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * Expands (breadth first) the iterable sequence by recursively applying a selector function to generate more sequences at each recursion level.\n *\n * @template TSource Source sequence element type.\n * @param {(( value: TSource) => Iterable<TSource>)} selector Selector function to retrieve the next sequence to expand.\n * @returns {MonoTypeOperatorFunction<TSource>} An operator which returns a sequence with results\n * from the recursive expansion of the source sequence.\n */\nexport function expand<TSource>(\n  selector: (value: TSource) => Iterable<TSource>\n): MonoTypeOperatorFunction<TSource> {\n  return function expandOperatorFunction(source: Iterable<TSource>): IterableX<TSource> {\n    return new ExpandIterable<TSource>(source, selector);\n  };\n}\n"]}