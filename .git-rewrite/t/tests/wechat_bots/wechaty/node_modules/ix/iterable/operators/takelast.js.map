{"version":3,"sources":["iterable/operators/takelast.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AAGzC,MAAa,gBAA0B,SAAQ,qBAAkB;IACvD,OAAO,CAAoB;IAC3B,MAAM,CAAS;IAEvB,YAAY,MAAyB,EAAE,KAAa;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;QAChB,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,MAAM,CAAC,GAAG,EAAe,CAAC;YAC1B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC/B,IAAI,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE;oBAC3B,CAAC,CAAC,KAAK,EAAE,CAAC;iBACX;gBACD,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACd;YAED,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,MAAM,CAAC,CAAC,KAAK,EAAG,CAAC;aAClB;SACF;IACH,CAAC;CACF;AAzBD,4CAyBC;AAED;;;;;;;GAOG;AACH,SAAgB,QAAQ,CAAU,KAAa;IAC7C,OAAO,SAAS,wBAAwB,CAAC,MAAyB;QAChE,OAAO,IAAI,gBAAgB,CAAU,MAAM,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC;AACJ,CAAC;AAJD,4BAIC","file":"takelast.js","sourcesContent":["import { IterableX } from '../iterablex';\nimport { MonoTypeOperatorFunction } from '../../interfaces';\n\nexport class TakeLastIterable<TSource> extends IterableX<TSource> {\n  private _source: Iterable<TSource>;\n  private _count: number;\n\n  constructor(source: Iterable<TSource>, count: number) {\n    super();\n    this._source = source;\n    this._count = count;\n  }\n\n  *[Symbol.iterator]() {\n    if (this._count > 0) {\n      const q = [] as TSource[];\n      for (const item of this._source) {\n        if (q.length >= this._count) {\n          q.shift();\n        }\n        q.push(item);\n      }\n\n      while (q.length > 0) {\n        yield q.shift()!;\n      }\n    }\n  }\n}\n\n/**\n * Returns a specified number of contiguous elements from the end of an iterable sequence.\n *\n * @template TSource The type of the elements in the source sequence.\n * @param {number} count Number of elements to take from the end of the source sequence.\n * @returns {MonoTypeOperatorFunction<TSource>} An iterable sequence containing the specified\n * number of elements from the end of the source sequence.\n */\nexport function takeLast<TSource>(count: number): MonoTypeOperatorFunction<TSource> {\n  return function takeLastOperatorFunction(source: Iterable<TSource>): IterableX<TSource> {\n    return new TakeLastIterable<TSource>(source, count);\n  };\n}\n"]}