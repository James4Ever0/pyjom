{"version":3,"sources":["asynciterable/throwerrror.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C,MAAM,kBAAmB,SAAQ,cAAqB;IAC5C,MAAM,CAAM;IAEpB,YAAY,KAAU;QACpB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QAChD,cAAc,CAAC,MAAM,CAAC,CAAC;QACvB,MAAM,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;CACF;AAED;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CAAC,KAAU;IACnC,OAAO,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC","file":"throwerrror.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { throwIfAborted } from '../aborterror';\n\nclass ThrowAsyncIterable extends AsyncIterableX<never> {\n  private _error: any;\n\n  constructor(error: any) {\n    super();\n    this._error = error;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal): AsyncIterator<never> {\n    throwIfAborted(signal);\n    throw this._error;\n  }\n}\n\n/**\n * Creates an async-iterable that throws the specified error upon iterating.\n *\n * @param {*} error The error to throw upon iterating the async-iterable.\n * @returns {AsyncIterableX<never>} An async-iterable that throws when iterated.\n */\nexport function throwError(error: any): AsyncIterableX<never> {\n  return new ThrowAsyncIterable(error);\n}\n"]}