{"version":3,"sources":["asynciterable/asasynciterable.ts"],"names":[],"mappings":";;;AAAA,qDAAkD;AAElD,mCAAwE;AASxE,MAAM,kBAAkB,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAExD,MAAa,sBAA0B,SAAQ,kBAAS;IAC9C,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC;IAC5C,YAAY,OAA0B;QACpC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,yEAAyE;QACzE,yDAAyD;QACzD,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,EAAE;YAC/C,sBAAsB,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;YAClD,MAAM,CAAC,gBAAgB,CACrB,sBAAsB,CAAC,SAAS,EAChC,MAAM,CAAC,yBAAyB,CAAC,+BAAc,CAAC,SAAS,CAAC,CAC3D,CAAC;SACH;IACH,CAAC;IACD,kBAAkB;IAClB,MAAM,CAAC,QAA2B;QAChC,QAAQ,EAAE,CAAC;IACb,CAAC;IACD,kBAAkB;IAClB,UAAU,CAAC,KAAU,EAAE,SAAiB,EAAE,QAA2B;QACnE,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACxB,CAAC;;AArBH,wDAsBC;AAED,SAAgB,eAAe,CAAI,UAA4B,EAAE;IAC/D,OAAO,IAAI,sBAAsB,CAAI,OAAO,CAAC,CAAC;AAChD,CAAC;AAFD,0CAEC","file":"asasynciterable.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { OperatorAsyncFunction, UnaryFunction } from '../interfaces';\nimport { Transform, TransformCallback, TransformOptions } from 'stream';\n\nexport interface AsyncIterableTransform<T> extends AsyncIterableX<T>, Transform {\n  pipe<R>(...operations: UnaryFunction<AsyncIterable<T>, R>[]): R;\n  pipe<R>(...operations: OperatorAsyncFunction<T, R>[]): AsyncIterableX<R>;\n  pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean }): R;\n  [Symbol.asyncIterator](): AsyncIterableIterator<T>;\n}\n\nconst asyncIterableMixin = Symbol('asyncIterableMixin');\n\nexport class AsyncIterableTransform<T> extends Transform {\n  private static [asyncIterableMixin] = false;\n  constructor(options?: TransformOptions) {\n    super(options);\n    // If this is the first time AsyncIterableTransform is being constructed,\n    // mixin the methods from the AsyncIterableX's prototype.\n    if (!AsyncIterableTransform[asyncIterableMixin]) {\n      AsyncIterableTransform[asyncIterableMixin] = true;\n      Object.defineProperties(\n        AsyncIterableTransform.prototype,\n        Object.getOwnPropertyDescriptors(AsyncIterableX.prototype)\n      );\n    }\n  }\n  /** @nocollapse */\n  _flush(callback: TransformCallback): void {\n    callback();\n  }\n  /** @nocollapse */\n  _transform(chunk: any, _encoding: string, callback: TransformCallback): void {\n    callback(null, chunk);\n  }\n}\n\nexport function asAsyncIterable<T>(options: TransformOptions = {}) {\n  return new AsyncIterableTransform<T>(options);\n}\n"]}