{"version":3,"sources":["asynciterable/combinelatest.ts"],"names":[],"mappings":"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","file":"combinelatest.js","sourcesContent":["import { AsyncIterableX } from './asynciterablex';\nimport { identity } from '../util/identity';\nimport { wrapWithAbort } from './operators/withabort';\nimport { throwIfAborted } from '../aborterror';\nimport { safeRace } from '../util/safeRace';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst NEVER_PROMISE = new Promise(() => {});\n\ntype MergeResult<T> = { value: T; index: number };\n\nfunction wrapPromiseWithIndex<T>(promise: Promise<T>, index: number) {\n  return promise.then((value) => ({ value, index })) as Promise<MergeResult<T>>;\n}\n\nexport class CombineLatestAsyncIterable<TSource> extends AsyncIterableX<TSource[]> {\n  private _sources: AsyncIterable<TSource>[];\n\n  constructor(sources: AsyncIterable<TSource>[]) {\n    super();\n    this._sources = sources;\n  }\n\n  async *[Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n\n    const length = this._sources.length;\n    const iterators = new Array<AsyncIterator<TSource>>(length);\n    const nexts = new Array<Promise<MergeResult<IteratorResult<TSource>>>>(length);\n    let hasValueAll = false;\n    const values = new Array<TSource>(length);\n    const hasValues = new Array<boolean>(length);\n    let active = length;\n\n    hasValues.fill(false);\n\n    for (let i = 0; i < length; i++) {\n      const iterator = wrapWithAbort(this._sources[i], signal)[Symbol.asyncIterator]();\n      iterators[i] = iterator;\n      nexts[i] = wrapPromiseWithIndex(iterator.next(), i);\n    }\n\n    while (active > 0) {\n      const next = safeRace(nexts);\n      const {\n        value: { value: value$, done: done$ },\n        index,\n      } = await next;\n      if (done$) {\n        nexts[index] = <Promise<MergeResult<IteratorResult<TSource>>>>NEVER_PROMISE;\n        active--;\n      } else {\n        values[index] = value$;\n        hasValues[index] = true;\n\n        const iterator$ = iterators[index];\n        nexts[index] = wrapPromiseWithIndex(iterator$.next(), index);\n\n        if (hasValueAll || (hasValueAll = hasValues.every(identity))) {\n          yield values;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @param {AsyncIterable<T>} source First async-iterable source.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @returns {AsyncIterableX<[T, T2]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatest<T, T2>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>\n): AsyncIterableX<[T, T2]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @param {AsyncIterable<T>} source First async-iterable source.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @returns {AsyncIterableX<[T, T2, T3]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatest<T, T2, T3>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>\n): AsyncIterableX<[T, T2, T3]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @param {AsyncIterable<T>} source First async-iterable source.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @returns {AsyncIterableX<[T, T2, T3, T4]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatest<T, T2, T3, T4>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>\n): AsyncIterableX<[T, T2, T3, T4]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @template T5 The type of the elements in the fifth source sequence.\n * @param {AsyncIterable<T>} source First async-iterable source.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @param {AsyncIterable<T5>} source5 Fifth async-iterable source.\n * @returns {AsyncIterableX<[T, T2, T3, T4, T5]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatest<T, T2, T3, T4, T5>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>\n): AsyncIterableX<[T, T2, T3, T4, T5]>;\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The type of the elements in the first source sequence.\n * @template T2 The type of the elements in the second source sequence.\n * @template T3 The type of the elements in the third source sequence.\n * @template T4 The type of the elements in the fourth source sequence.\n * @template T5 The type of the elements in the fifth source sequence.\n * @template T6 The type of the elements in the sixth source sequence.\n * @param {AsyncIterable<T>} source First async-iterable source.\n * @param {AsyncIterable<T2>} source2 Second async-iterable source.\n * @param {AsyncIterable<T3>} source3 Third async-iterable source.\n * @param {AsyncIterable<T4>} source4 Fourth async-iterable source.\n * @param {AsyncIterable<T5>} source5 Fifth async-iterable source.\n * @param {AsyncIterable<T6>} source6 Sixth async-iterable source.\n * @returns {AsyncIterableX<[T, T2, T3, T4, T5, T6]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatest<T, T2, T3, T4, T5, T6>(\n  source: AsyncIterable<T>,\n  source2: AsyncIterable<T2>,\n  source3: AsyncIterable<T3>,\n  source4: AsyncIterable<T4>,\n  source5: AsyncIterable<T5>,\n  source6: AsyncIterable<T6>\n): AsyncIterableX<[T, T2, T3, T4, T5, T6]>;\n\n/**\n * Merges multiple async-iterable sequences into one async-iterable sequence as an array whenever\n * one of the async-iterable sequences produces an element.\n *\n * @template T The of the elements in the source sequences.\n * @param {...AsyncIterable<T>[]} sources The async-iterable sources.\n * @returns {AsyncIterableX<T[]>} An async-iterable sequence containing an array of all sources.\n */\nexport function combineLatest<T>(...sources: AsyncIterable<T>[]): AsyncIterableX<T[]>;\nexport function combineLatest<T>(...sources: any[]): AsyncIterableX<T[]> {\n  return new CombineLatestAsyncIterable<T>(sources);\n}\n"]}