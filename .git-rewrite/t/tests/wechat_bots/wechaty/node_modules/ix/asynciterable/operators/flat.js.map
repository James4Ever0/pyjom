{"version":3,"sources":["asynciterable/operators/flat.ts"],"names":[],"mappings":";;;AAAA,sDAAmD;AACnD,sDAAwD;AAExD,2CAA4C;AAC5C,iDAAkD;AAElD,MAAa,oBAA8B,SAAQ,+BAAuB;IAChE,OAAO,CAAyB;IAChC,MAAM,CAAS;IAEvB,YAAY,MAA8B,EAAE,KAAa;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,6CAA6C;IACrC,KAAK,CAAC,CAAC,QAAQ,CACrB,MAA8B,EAC9B,KAAa,EACb,MAAoB;QAEpB,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,yBAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;gBACtD,MAAM,IAAI,CAAC;aACZ;YACD,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,yBAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YACtD,IAAI,4BAAe,CAAC,IAAI,CAAC,EAAE;gBACzB,IAAI,KAAK,EAAE,MAAM,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,EAAE;oBACpE,MAAM,SAAS,CAAC;iBACjB;aACF;iBAAM;gBACL,MAAM,IAAI,CAAC;aACZ;SACF;IACH,CAAC;IAED,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAoB;QACzC,2BAAc,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;IAClF,CAAC;CACF;AArCD,oDAqCC;AAED;;;;;;GAMG;AACH,SAAgB,IAAI,CAAI,KAAK,GAAG,QAAQ;IACtC,OAAO,SAAS,uBAAuB,CAAC,MAAwB;QAC9D,OAAO,IAAI,oBAAoB,CAAI,MAAM,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC;AACJ,CAAC;AAJD,oBAIC","file":"flat.js","sourcesContent":["import { AsyncIterableX } from '../asynciterablex';\nimport { isAsyncIterable } from '../../util/isiterable';\nimport { MonoTypeOperatorAsyncFunction } from '../../interfaces';\nimport { wrapWithAbort } from './withabort';\nimport { throwIfAborted } from '../../aborterror';\n\nexport class FlattenAsyncIterable<TSource> extends AsyncIterableX<TSource> {\n  private _source: AsyncIterable<TSource>;\n  private _depth: number;\n\n  constructor(source: AsyncIterable<TSource>, depth: number) {\n    super();\n    this._source = source;\n    this._depth = depth;\n  }\n\n  // eslint-disable-next-line consistent-return\n  private async *_flatten(\n    source: AsyncIterable<TSource>,\n    depth: number,\n    signal?: AbortSignal\n  ): AsyncIterable<TSource> {\n    if (depth === 0) {\n      for await (const item of wrapWithAbort(source, signal)) {\n        yield item;\n      }\n      return undefined;\n    }\n    for await (const item of wrapWithAbort(source, signal)) {\n      if (isAsyncIterable(item)) {\n        for await (const innerItem of this._flatten(item, depth - 1, signal)) {\n          yield innerItem;\n        }\n      } else {\n        yield item;\n      }\n    }\n  }\n\n  [Symbol.asyncIterator](signal?: AbortSignal) {\n    throwIfAborted(signal);\n    return this._flatten(this._source, this._depth, signal)[Symbol.asyncIterator]();\n  }\n}\n\n/**\n * Flattens the nested async-iterable by the given depth.\n *\n * @template T The type of elements in the source sequence.\n * @param {number} [depth=Infinity] The depth to flatten the async-iterable sequence if specified, otherwise infinite.\n * @returns {MonoTypeOperatorAsyncFunction<T>} An operator that flattens the async-iterable sequence.\n */\nexport function flat<T>(depth = Infinity): MonoTypeOperatorAsyncFunction<T> {\n  return function flattenOperatorFunction(source: AsyncIterable<T>): AsyncIterableX<T> {\n    return new FlattenAsyncIterable<T>(source, depth);\n  };\n}\n"]}